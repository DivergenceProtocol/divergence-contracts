{
  "address": "0xB85E2020c7D70904CD6cB96848fe0c94841D3645",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "createBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_trackName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_peroidType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settleType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settleValue",
          "type": "uint256"
        }
      ],
      "name": "getBattleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5b7ae357e989843e75f6332b53aca1d453799ab38fbd6e1d650c89b8383c4ea",
  "receipt": {
    "to": null,
    "from": "0x466043D6644886468E8E0ff36dfAF0060aEE7d37",
    "contractAddress": "0xB85E2020c7D70904CD6cB96848fe0c94841D3645",
    "transactionIndex": 4,
    "gasUsed": "4196342",
    "logsBloom": "0x
    "blockHash": "0x09d4164b78b74bdbd3f1cfc8b6090d853365c40304a3afc1dd9f761d17f2514e",
    "transactionHash": "0xa5b7ae357e989843e75f6332b53aca1d453799ab38fbd6e1d650c89b8383c4ea",
    "logs": [],
    "blockNumber": 25091886,
    "cumulativeGasUsed": "4658993",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6381d118ec5aab71efc187aeef84708e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_trackName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_peroidType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleValue\",\"type\":\"uint256\"}],\"name\":\"getBattleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Creater.sol\":\"Creater\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            AddressUpgradeable.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /*\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xda94a85ba0a26d49cd327cc63b8b54fa5dde8f5d1c5f3c942237096ef896eff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes\\n * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify\\n * continuation of the upgradability.\\n *\\n * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6014667ab9e057c1810fcb7ef844123c581a34eb8dafc1aaa15f4e0f704620b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xf35335925904418fa03f87f35feddc196c7fd2b4d6397a1c45c427085cee3707\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BattleReady.sol\\\";\\nimport \\\"./interfaces/IArena.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./structs/SettleType.sol\\\";\\nimport \\\"./structs/PeroidType.sol\\\";\\nimport \\\"./structs/RoundResult.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./structs/RoundInfo.sol\\\";\\nimport \\\"./structs/BattleInfo.sol\\\";\\nimport \\\"./structs/UserInfo.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./oracle/Oracle.sol\\\";\\n\\ncontract Battle is BattleReady, Ownable, Initializable {\\n    using SafeDecimalMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    address public feeTo;\\n    uint public feeRatio;\\n\\n    uint256 public cri;\\n    uint256[] public roundIds;\\n\\n    IArena public arena;\\n    IERC20 public collateralToken;\\n\\n    string public trackName;\\n    string public priceName;\\n\\n    PeroidType public peroidType;\\n    SettleType public settleType;\\n    uint256 public settleValue;\\n\\n    uint256 public spearStartPrice;\\n    uint256 public shieldStartPrice;\\n\\n    mapping(address => uint256) public enterRoundId;\\n    mapping(address => EnumerableSet.UintSet) internal userRoundIds;\\n\\n    uint public nextRoundSpearPrice;\\n    uint public preLPAmount;\\n\\n    Oracle public oracle;\\n    bool public isInit0;\\n    bool public isInit;\\n\\n    function init0(\\n        address _collateral,\\n        address _arena,\\n        string memory _trackName,\\n        string memory _priceName,\\n        PeroidType _peroidType,\\n        SettleType _settleType,\\n        uint256 _settleValue\\n    ) public {\\n        require(isInit0 == false, \\\"init0\\\");\\n        isInit0 = true;\\n        collateralToken = IERC20(_collateral);\\n        arena = IArena(_arena);\\n        trackName = _trackName;\\n        priceName = _priceName;\\n        peroidType = _peroidType;\\n        settleType = _settleType;\\n        settleValue = _settleValue;\\n    }\\n\\n    function init(\\n        address creater,\\n        uint256 cAmount,\\n        uint256 _spearPrice,\\n        uint256 _shieldPrice,\\n        address _oracle\\n    ) public addUserRoundId(creater) {\\n        require(isInit==false, \\\"init\\\");\\n        oracle = Oracle(_oracle);\\n        isInit = true;\\n        spearStartPrice = _spearPrice;\\n        shieldStartPrice = _shieldPrice;\\n        initNewRound(cAmount);\\n        enterRoundId[creater] = cri;\\n        _mint(creater, cAmount);\\n    }\\n\\n    function setArena(address _arena) public onlyOwner {\\n        arena = IArena(_arena);\\n    }\\n\\n    function setFeeTo(address _feeTo) public onlyOwner {\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeRatio(uint _feeRatio) public onlyOwner {\\n        feeRatio = _feeRatio;\\n    }\\n\\n    function setNextRoundSpearPrice(uint price) public {\\n        require(balanceOf(msg.sender) >= preLPAmount, \\\"not enough lp\\\");\\n        require(price < 1e18, \\\"price error\\\");\\n        spearStartPrice = price;\\n        shieldStartPrice = 1e18 - price;\\n        emit SetVPrice(msg.sender, spearStartPrice, shieldStartPrice);\\n    }\\n\\n    function tryBuySpear(uint cDeltaAmount) public view returns(uint) {\\n        return tryBuySpear(cri, cDeltaAmount);\\n    }\\n\\n    function buySpear(uint256 cDeltaAmount) public handleHistoryVirtual addUserRoundId(msg.sender){\\n        uint fee = cDeltaAmount.multiplyDecimal(feeRatio);\\n        buySpear(cri, cDeltaAmount-fee);\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            cDeltaAmount-fee\\n        );\\n        collateralToken.safeTransferFrom(msg.sender, feeTo, fee);\\n    }\\n\\n    function trySellSpear(uint vDeltaAmount) public view returns(uint) {\\n        return trySellSpear(cri, vDeltaAmount);\\n    }\\n\\n    function sellSpear(uint256 vDeltaAmount) public handleHistoryVirtual{\\n        uint256 out = sellSpear(cri, vDeltaAmount);\\n        uint fee = out.multiplyDecimal(feeRatio);\\n        collateralToken.safeTransfer(msg.sender, out-fee);\\n        collateralToken.safeTransfer(feeTo, fee);\\n    }\\n\\n    function buyShield(uint cDeltaAmount) public handleHistoryVirtual addUserRoundId(msg.sender) {\\n        uint fee = cDeltaAmount.multiplyDecimal(feeRatio);\\n        buyShield(cri, cDeltaAmount-fee);\\n        collateralToken.safeTransferFrom(msg.sender, address(this), cDeltaAmount-fee); \\n        collateralToken.safeTransferFrom(msg.sender, feeTo, fee);\\n    }\\n\\n    function tryBuyShield(uint cDeltaAmount) public view returns(uint){\\n        return tryBuyShield(cri, cDeltaAmount);\\n    }\\n\\n    function trySellShield(uint vDeltaAmount) public view returns(uint) {\\n        return trySellShield(cri, vDeltaAmount);\\n    }\\n\\n    function sellShield(uint vDeltaAmount) public handleHistoryVirtual {\\n        uint out = sellShield(cri, vDeltaAmount);\\n        uint fee = out.multiplyDecimal(feeRatio);\\n        collateralToken.safeTransfer(msg.sender, out-fee);\\n        collateralToken.safeTransfer(feeTo, fee);\\n    }\\n\\n    function tryAddLiquidity(uint cDeltaAmount) public view returns(uint cDeltaSpear, uint cDeltaShield, uint deltaSpear, uint deltaShield, uint lpDelta) {\\n        return tryAddLiquidity(cri, cDeltaAmount);\\n    }\\n\\n    function addLiquidity(uint256 cDeltaAmount) public addUserRoundId(msg.sender){\\n        addLiquidity(cri, cDeltaAmount);\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            cDeltaAmount\\n        );\\n    }\\n\\n    function tryRemoveLiquidity(uint lpDeltaAmount) public view returns(uint cDelta, uint deltaSpear, uint deltaShield) {\\n        return tryRemoveLiquidity(cri, lpDeltaAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lpDeltaAmount) public {\\n        uint256 cDelta = removeLiquidity(cri, lpDeltaAmount);\\n        collateralToken.safeTransfer(msg.sender, cDelta);\\n    }\\n\\n    function settle() public {\\n        require(block.timestamp >= endTS[cri], \\\"too early\\\");\\n        require(roundResult[cri] == RoundResult.Non, \\\"settled\\\");\\n        uint256 price = oracle.historyPrice(priceName, endTS[cri]);\\n        require(price != 0, \\\"price error\\\");\\n        endPrice[cri] = price;\\n        updateRoundResult();\\n        // handle collateral\\n        uint256 cRemain = getCRemain();\\n        initNewRound(cRemain);\\n    }\\n\\n    // uri => userRoundId\\n    // rr => roundResult\\n    function tryClaim(address user) public view returns(uint uri, RoundResult rr, uint amount) {\\n        uri = enterRoundId[user];\\n        rr = roundResult[uri];\\n        if (uri != 0 && uri < cri) {\\n            if (rr == RoundResult.SpearWin) {\\n                amount = spearBalance[uri][user];\\n            } else if (rr == RoundResult.ShieldWin) {\\n                amount = shieldBalance[uri][user];\\n            }\\n        }\\n    }\\n\\n    function claim() public {\\n        (uint uri, , uint amount) = tryClaim(msg.sender);\\n        require(amount != 0, \\\"spear/shield zero\\\");\\n        burnSpear(uri, msg.sender, amount);\\n        burnShield(uri, msg.sender, amount);\\n        delete enterRoundId[msg.sender];\\n        collateralToken.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function updateRoundResult() internal {\\n        if (settleType == SettleType.TwoWay) {\\n            if (\\n                endPrice[cri] >= strikePriceOver[cri] ||\\n                endPrice[cri] <= strikePriceUnder[cri]\\n            ) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else if (settleType == SettleType.Positive) {\\n            if (endPrice[cri] >= strikePriceOver[cri]) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else if (settleType == SettleType.Negative) {\\n            if (endPrice[cri] >= strikePriceUnder[cri]) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else if (settleType == SettleType.Specific) {\\n            if (endPrice[cri] >= strikePrice[cri]) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else {\\n            revert(\\\"unknown settle type\\\");\\n        }\\n    }\\n\\n    function getCRemain() internal view returns (uint256 cRemain) {\\n        if (roundResult[cri] == RoundResult.SpearWin) {\\n            cRemain = collateral[cri] - spearTotal[cri];\\n        } else if (roundResult[cri] == RoundResult.ShieldWin) {\\n            cRemain = collateral[cri] - shieldTotal[cri];\\n        } else {\\n            revert(\\\"not correct round result\\\");\\n        }\\n    }\\n\\n    function initNewRound(uint256 cAmount) internal {\\n        (uint256 _startTS, uint256 _endTS) = oracle.getPeroidTS(uint(peroidType));\\n        cri = _startTS;\\n        roundIds.push(_startTS);\\n        (\\n            uint256 _startPrice,\\n            uint256 _strikePrice,\\n            uint256 _strikePriceOver,\\n            uint256 _strikePriceUnder\\n        ) =\\n            oracle.getStrikePrice(\\n                priceName,\\n                uint(peroidType),\\n                uint(settleType),\\n                settleValue\\n            );\\n        mintSpear(cri, address(this), cAmount);\\n        mintShield(cri, address(this), cAmount);\\n        addCSpear(cri, spearStartPrice.multiplyDecimal(cAmount));\\n        addCShield(cri, shieldStartPrice.multiplyDecimal(cAmount));\\n        // startPrice endPrice\\n        startPrice[cri] = _startPrice;\\n        startTS[cri] = _startTS;\\n        endTS[cri] = _endTS;\\n        strikePrice[cri] = _strikePrice;\\n        strikePriceOver[cri] = _strikePriceOver;\\n        strikePriceUnder[cri] = _strikePriceUnder;\\n        roundResult[cri] = RoundResult.Non;\\n    }\\n\\n    function getBattleInfo() public view returns(BattleInfo memory) {\\n        return BattleInfo({\\n            trackName: trackName ,\\n            priceName: priceName,\\n            peroidType: peroidType,\\n            settleType: settleType,\\n            settleValue: settleValue\\n        });\\n    }\\n\\n    function getCurrentRoundInfo() public view returns(RoundInfo memory) {\\n        return getRoundInfo(cri);\\n    }\\n\\n    function getRoundInfo(uint ri) public view returns(RoundInfo memory) {\\n        return RoundInfo({\\n            spearPrice: spearPrice(ri),\\n            shieldPrice: shieldPrice(ri),\\n            strikePrice: strikePrice[ri],\\n            strikePriceOver: strikePriceOver[ri],\\n            strikePriceUnder: strikePriceUnder[ri],\\n            startTS: startTS[ri],\\n            endTS: endTS[ri]\\n        });\\n    }\\n\\n    function getUserInfo(address user) public view returns(UserInfo memory) {\\n    }\\n\\n    modifier addUserRoundId(address user) {\\n        if(!userRoundIds[user].contains(cri)) {\\n            userRoundIds[user].add(cri);\\n        }\\n        _;\\n    }\\n\\n    modifier handleHistoryVirtual() {\\n        if (enterRoundId[msg.sender] != 0) {\\n            claim();\\n        }\\n        _;\\n    }\\n\\n    event SetVPrice(address acc, uint spearPrice, uint shieldPrice);\\n\\n}\\n\",\"keccak256\":\"0xf35a77af4667b7be8d88d9fb07f1da72b1d616e307e9c53307b63c4098f93361\",\"license\":\"MIT\"},\"contracts/BattleReady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BondingCurve.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./structs/RoundResult.sol\\\";\\n\\ncontract BattleReady is BondingCurve, ERC20 {\\n\\n    using SafeDecimalMath for uint;\\n\\n    mapping(uint=>uint) public startPrice;\\n    mapping(uint=>uint) public endPrice;\\n\\n    mapping(uint=>uint) public startTS;\\n    mapping(uint=>uint) public endTS;\\n\\n    mapping(uint=>uint) public strikePrice;\\n    mapping(uint=>uint) public strikePriceOver;\\n    mapping(uint=>uint) public strikePriceUnder;\\n\\n    mapping(uint=>RoundResult) public roundResult;\\n\\n    constructor() ERC20(\\\"Battle Liquilidity Token\\\", \\\"BLP\\\") {\\n\\n    }\\n\\n    function tryAddLiquidity(uint ri, uint cDeltaAmount) public view returns(uint cDeltaSpear, uint cDeltaShield, uint deltaSpear, uint deltaShield, uint lpDelta) {\\n        uint cVirtual = cSpear[ri] + cShield[ri];\\n        cDeltaSpear = cSpear[ri].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        cDeltaShield = cShield[ri].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        deltaSpear = spearBalance[ri][address(this)].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        deltaShield = shieldBalance[ri][address(this)].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        if(totalSupply() == 0) {\\n            lpDelta = cDeltaAmount;\\n        } else {\\n            lpDelta = cDeltaAmount.multiplyDecimal(totalSupply()).divideDecimal(collateral[ri]);\\n        }\\n    }\\n\\n    function addLiquidity(uint ri, uint cDeltaAmount) internal {\\n        (uint cDeltaSpear, uint cDeltaShield, uint deltaSpear, uint deltaShield, uint lpDelta) = tryAddLiquidity(ri, cDeltaAmount);\\n        addCSpear(ri, cDeltaSpear);\\n        addCShield(ri, cDeltaShield);\\n        mintSpear(ri, msg.sender, deltaSpear);\\n        mintShield(ri, msg.sender, deltaShield);\\n        // mint lp\\n        _mint(msg.sender, lpDelta);\\n    }\\n\\n    function tryRemoveLiquidity(uint ri, uint lpDeltaAmount) public view returns(uint cDelta, uint deltaSpear, uint deltaShield){\\n        uint spSold = spearSold(ri);\\n        uint shSold = shieldSold(ri);\\n        uint maxSold = spSold > shSold ? spSold:shSold;\\n        cDelta = (collateral[ri] - maxSold).multiplyDecimal(lpDeltaAmount).divideDecimal(totalSupply());\\n        deltaSpear = spearBalance[ri][address(this)].multiplyDecimal(lpDeltaAmount).divideDecimal(totalSupply());\\n        deltaShield = shieldBalance[ri][address(this)].multiplyDecimal(lpDeltaAmount).divideDecimal(totalSupply());\\n    }\\n\\n    function removeLiquidity(uint ri, uint lpDeltaAmount) internal returns(uint) {\\n        (uint cDelta, uint deltaSpear, uint deltaShield) = tryRemoveLiquidity(ri, lpDeltaAmount);\\n        uint cDeltaSpear = cDelta.multiplyDecimal(cSpear[ri]).divideDecimal(collateral[ri]);\\n        uint cDeltaShield = cDelta.multiplyDecimal(cShield[ri]).divideDecimal(collateral[ri]);\\n        uint cDeltaSurplus = cDelta.multiplyDecimal(cSurplus(ri)).divideDecimal(collateral[ri]);\\n        subCSpear(ri, cDeltaSpear);\\n        subCShield(ri, cDeltaShield);\\n        subCSurplus(ri, cDeltaSurplus);\\n        burnSpear(ri, address(this), deltaSpear);\\n        burnShield(ri, address(this), deltaShield);\\n        _burn(msg.sender, lpDeltaAmount);\\n        return cDelta;\\n    }\\n\\n    function _afterAddLiquidity(uint ri, uint cDeltaAmount) internal virtual {}\\n    function _afterRemoveLiquidity(uint ri, uint lpDeltaAmount) internal virtual {}\\n\\n}\",\"keccak256\":\"0x2c72da624a40489df1e5820541e23b6cdf39d4e5692f9100ad9fac0748531b42\",\"license\":\"MIT\"},\"contracts/BondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VirtualToken.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./algo/Pricing.sol\\\";\\n\\ncontract BondingCurve is VirtualToken {\\n\\n    using SafeDecimalMath for uint;\\n\\n    uint maxPrice = 0.9999 * 1e18;\\n    uint minPrice = 1e18 - maxPrice;\\n\\n    function spearPrice(uint roundId) public view returns(uint) {\\n        uint spPrice = cSpear[roundId].divideDecimal(spearBalance[roundId][address(this)]);\\n        return spPrice;\\n    }\\n\\n    function shieldPrice(uint roundId) public view returns(uint) {\\n        uint shPrice = cShield[roundId].divideDecimal(shieldBalance[roundId][address(this)]);\\n        return shPrice;\\n    }\\n\\n    function buySpear(uint roundId, uint cDeltaAmount) internal {\\n        uint out = tryBuySpear(roundId, cDeltaAmount);\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        if ((cDeltaAmount + cSpear[roundId]).divideDecimal(spearInContract-out) >= maxPrice) {\\n            setCSpear(roundId, maxPrice.multiplyDecimal(spearInContract));\\n            addCollateral(roundId, cDeltaAmount);\\n            // handle shield\\n            transferSpear(roundId, address(this), msg.sender, out);\\n            setCShield(roundId, minPrice.multiplyDecimal(shieldInContract));\\n        } else {\\n            addCSpear(roundId, cDeltaAmount);\\n            transferSpear(roundId, address(this), msg.sender, out);\\n            setCShield(roundId, (1e18 - spearPrice(roundId)).multiplyDecimal(shieldInContract));\\n        }\\n    }\\n\\n    function tryBuySpear(uint roundId, uint cDeltaAmount) internal view returns(uint out){\\n        out = Pricing.getVirtualOut(cDeltaAmount, cSpear[roundId], spearBalance[roundId][address(this)]);\\n    }\\n\\n    function tryBuyShield(uint roundId, uint cDeltaAmount) internal view returns(uint out) {\\n        out = Pricing.getVirtualOut(cDeltaAmount, cShield[roundId], shieldBalance[roundId][address(this)]);\\n    }\\n\\n\\n    function buyShield(uint roundId, uint cDeltaAmount) internal {\\n        uint out = tryBuyShield(roundId, cDeltaAmount);\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        if ((cDeltaAmount + cShield[roundId]).divideDecimal(shieldInContract-out) >= maxPrice) {\\n            setCShield(roundId, maxPrice.multiplyDecimal(shieldInContract));\\n            addCollateral(roundId, cDeltaAmount);\\n            // handle shield\\n            transferShield(roundId, address(this), msg.sender, out);\\n            setCSpear(roundId, minPrice.multiplyDecimal(spearInContract));\\n        } else {\\n            addCShield(roundId, cDeltaAmount);\\n            transferShield(roundId, address(this), msg.sender, out);\\n            setCSpear(roundId, (1e18 - shieldPrice(roundId)).multiplyDecimal(shieldInContract));\\n        }\\n    }\\n\\n   \\n\\n    function sellSpear(uint roundId, uint vDeltaAmount) internal returns(uint out) {\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        out = trySellSpear(roundId, vDeltaAmount);\\n        subCSpear(roundId, out);\\n        transferSpear(roundId, msg.sender, address(this), vDeltaAmount);\\n        setCShield(roundId, (1e18 - spearPrice(roundId)).multiplyDecimal(shieldInContract));\\n    }\\n\\n    function trySellSpear(uint roundId, uint vDeltaAmount) internal view returns(uint out) {\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        out = Pricing.getCollateralOut(vDeltaAmount, spearInContract, cSpear[roundId]);\\n    }\\n\\n     function trySellShield(uint roundId, uint vDeltaAmount) internal view returns(uint out) {\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        out = Pricing.getCollateralOut(vDeltaAmount, shieldInContract, cShield[roundId]);\\n    }\\n\\n    function sellShield(uint roundId, uint vDeltaAmount) internal returns(uint out) {\\n        out = trySellShield(roundId, vDeltaAmount);\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        subCShield(roundId, out);\\n        transferShield(roundId, msg.sender, address(this), vDeltaAmount);\\n        setCSpear(roundId, (1e18 - shieldPrice(roundId)).multiplyDecimal(spearInContract));\\n    }\\n\\n    function _afterBuySpear(uint roundId, uint cDeltaAmount) internal virtual {}\\n    function _afterSellSpear(uint roundId, uint vDeltaAmount) internal virtual {}\\n    function _afterBuyShield(uint roundId, uint cDeltaAmount) internal virtual {}\\n    function _afterSellShield(uint roundId, uint vDeltaAmount) internal virtual {}\\n\\n}\",\"keccak256\":\"0xdc768bef2a24c483443a5f3867ff783fb78c1a1a47d09f4f4ad7ff9d0137bb5a\",\"license\":\"MIT\"},\"contracts/Creater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Battle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\ncontract Creater {\\n    \\n    function getBattleAddress(\\n        address _collateral,\\n        string memory _trackName,\\n        uint _peroidType,\\n        uint _settleType,\\n        uint256 _settleValue\\n    ) public view returns(address, bytes32){\\n         bytes32 salt =\\n            keccak256(\\n                abi.encodePacked(\\n                    _collateral,\\n                    _trackName,\\n                    _peroidType,\\n                    _settleType,\\n                    _settleValue\\n                )\\n            );\\n        bytes32 bytecodeHash = keccak256(type(Battle).creationCode);\\n        address battleAddr = Create2.computeAddress(salt, bytecodeHash);\\n        return (battleAddr, salt);\\n    }\\n\\n    function createBattle(bytes32 salt) public {\\n        Create2.deploy(0, salt, type(Battle).creationCode);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x05b5d67479c6d3c46cad203bcfeb91823578adc7dd603ceeb89ec61585b1ec1a\",\"license\":\"MIT\"},\"contracts/VirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract VirtualToken {\\n    mapping (uint=>uint) public spearTotal;\\n    mapping(uint => mapping(address=>uint)) public spearBalance;\\n\\n\\n    mapping (uint=>uint) public shieldTotal;\\n    mapping(uint => mapping(address=>uint)) public shieldBalance;\\n\\n\\n    mapping(uint=>uint) public cSpear;\\n    mapping(uint=>uint) public cShield;\\n    mapping(uint=>uint) public collateral;\\n\\n    // 0 => spear; 1 => shield\\n    event Transfer(uint spearOrShield, address from, address to, uint amount);\\n    event Mint(uint spearOrShield, address to, uint amount);\\n    event Burn(uint spearOrShield, address from, uint amount);\\n\\n    // view\\n    function spearSold(uint roundId) public view returns(uint){\\n        return spearTotal[roundId] - spearBalance[roundId][address(this)];\\n    }\\n\\n    function shieldSold(uint roundId) public view returns(uint) {\\n        return shieldTotal[roundId] - shieldBalance[roundId][address(this)];\\n    }\\n\\n    function cSurplus(uint roundId) public view returns(uint amount) {\\n        amount = collateral[roundId] - cSpear[roundId] - cShield[roundId];\\n    }\\n\\n    // mut\\n    function addCSpear(uint roundId, uint amount) internal {\\n        cSpear[roundId] += amount;\\n        collateral[roundId] += amount;\\n    }\\n\\n    function addCShield(uint roundId, uint amount) internal {\\n        cShield[roundId] += amount;\\n        collateral[roundId] += amount;\\n    }\\n\\n    function subCSpear(uint roundId, uint amount) internal {\\n        cSpear[roundId] -= amount;\\n        collateral[roundId] -= amount;\\n    }\\n\\n    function subCShield(uint roundId, uint amount) internal {\\n        cShield[roundId] -= amount;\\n        collateral[roundId] -= amount;\\n    }\\n\\n    function subCSurplus(uint roundId, uint amount) internal {\\n        collateral[roundId] -= amount;\\n    }\\n\\n    function setCSpear(uint roundId, uint amount) internal {\\n        cSpear[roundId] = amount;\\n    }\\n\\n    function setCShield(uint roundId, uint amount) internal {\\n        cShield[roundId] = amount;\\n    }\\n\\n    function addCollateral(uint roundId, uint amount) internal {\\n        collateral[roundId] += amount;\\n    }\\n\\n    function transferSpear(uint roundId, address from, address to, uint amount) internal {\\n        require(from != address(0), \\\"from should not be address(0)\\\");\\n        require(to != address(0), \\\"to should not be address(0)\\\");\\n        spearBalance[roundId][from] -= amount;\\n        spearBalance[roundId][to] += amount;\\n        emit Transfer(0, from, to, amount);\\n    }\\n\\n    function transferShield(uint roundId, address from, address to, uint amount) internal {\\n        require(from != address(0), \\\"from should not be address(0)\\\");\\n        require(to != address(0), \\\"to should not be address(0)\\\");\\n        shieldBalance[roundId][from] -= amount;\\n        shieldBalance[roundId][to] += amount;\\n        emit Transfer(1, from, to, amount);\\n    }\\n\\n    function burnSpear(uint roundId, address acc, uint amount) internal {\\n        spearBalance[roundId][acc] -= amount;\\n        spearTotal[roundId] -= amount;\\n        emit Burn(0, acc, amount);\\n    }\\n\\n    function burnShield(uint roundId, address acc, uint amount) internal {\\n        shieldBalance[roundId][acc] -= amount;\\n        shieldTotal[roundId] -= amount;\\n        emit Burn(1, acc, amount);\\n    }\\n\\n    function mintSpear(uint roundId, address acc, uint amount) internal {\\n        spearBalance[roundId][acc] += amount;\\n        spearTotal[roundId] += amount;\\n        emit Mint(0, acc, amount);\\n    }\\n\\n    function mintShield(uint roundId, address acc, uint amount) internal {\\n        shieldBalance[roundId][acc] += amount;\\n        shieldTotal[roundId] += amount;\\n        emit Mint(1, acc, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x857c4c204c585bd1084629481db601ccadf3a2ec9ff800190dc087bb7e0bbc0d\",\"license\":\"MIT\"},\"contracts/algo/Pricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/DMath.sol\\\";\\nimport \\\"../lib/SafeDecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Pricing {\\n    \\n    using SafeMath for uint;\\n    using SafeDecimalMath for uint;\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint _pre_k) internal pure returns(uint amountOut, bool e, uint pre_k) {\\n        require(amountIn > 0, 'Battle: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'Battle: INSUFFICIENT_LIQUIDITY');\\n        if (reserveIn >= reserveOut.mul(99).div(100)) {\\n            amountOut = amountIn;\\n            e = true;\\n            return (amountOut, e, _pre_k);\\n        }\\n        // if amountIn > sqrt(reserveIn)\\n        uint maxAmount = DMath.sqrt(reserveIn*reserveOut.mul(100).div(99));\\n        pre_k = maxAmount;\\n        // console.log(\\\"maxAmount %s and amountIn %s, reserveIn %s, reserveOut %s\\\", maxAmount, amountIn, reserveIn);\\n        if (amountIn.add(reserveIn) > maxAmount) {\\n            uint maxAmountIn = maxAmount.sub(reserveIn);\\n            uint amountInWithFee = maxAmountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n            amountOut = amountOut.add(amountIn.sub(maxAmountIn));\\n            e = true;\\n        } else {\\n            uint amountInWithFee = amountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n        }\\n    }\\n\\n    function getVirtualOut(uint cDeltaAmount, uint cAmount, uint vAmount) internal pure returns(uint) {\\n        if (cAmount.divideDecimal(vAmount) >= 0.9999 * 1e18) {\\n            return cDeltaAmount;\\n        }\\n        uint cLimitAmount = DMath.sqrt(cAmount*vAmount.mul(9999).div(10000));\\n        uint vLimitAmount = DMath.sqrt(cAmount*vAmount.mul(10000).div(9999));\\n        if (cDeltaAmount + cAmount > cLimitAmount) {\\n            return vAmount - vLimitAmount + cDeltaAmount - cLimitAmount + cAmount;\\n        } else {\\n            uint numerator = vAmount * cDeltaAmount;\\n            uint denominator = cAmount + cDeltaAmount;\\n            return numerator / denominator;\\n        }\\n    }\\n\\n    function getCollateralOut(uint vDeltaAmount, uint vAmount, uint cAmount) internal pure returns(uint) {\\n        uint numerator = cAmount * vDeltaAmount;\\n        uint denominator = vAmount + vDeltaAmount;\\n        return numerator / denominator;\\n    }\\n\\n}\",\"keccak256\":\"0x62e03e5c2c84164d098a0390a795ea7aecb79d4c597236c78162fc8529060709\",\"license\":\"MIT\"},\"contracts/interfaces/IArena.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../structs/PeroidType.sol\\\";\\nimport \\\"../structs/SettleType.sol\\\";\\n\\ninterface IArena {\\n//     function getPeroidTS(PeroidType peroidType)\\n//         external\\n//         view\\n//         returns (uint256, uint256);\\n\\n//     function getSpacePrice(uint256 oraclePrice, uint256 rawPrice)\\n//         external\\n//         pure\\n//         returns (uint256 price);\\n\\n//     function getStrikePrice(\\n//         string memory symbol,\\n//         PeroidType _peroidType,\\n//         SettleType _settleType,\\n//         uint256 _settleValue\\n//     )\\n//         external\\n//         returns (\\n//             uint256 startPrice,\\n//             uint256 strikePrice,\\n//             uint256 strikePriceOver,\\n//             uint256 strikePriceUnder\\n//         );\\n\\n//    function getPriceByTS(string memory symbol, uint ts) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xf9503c56a33efbad25379286eff4d64cd60923dc00129f42c5eb96e06a2cc0c3\",\"license\":\"MIT\"},\"contracts/lib/DMath.sol\":{\"content\":\"  \\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary DMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xe9a4c4d5a1e9eb41b47118bcdc8008d4c580676e6228767e1773be3ae839e94d\",\"license\":\"GPL-3.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/oracle/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../structs/SettleType.sol\\\";\\nimport \\\"../lib/SafeDecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract Oracle is Initializable, UUPSUpgradeable, OwnableUpgradeable{\\n    using SafeDecimalMath for uint;\\n\\n    mapping(string=>uint) public price;\\n    mapping(string=>mapping(uint=>uint)) public historyPrice;\\n    // bytes32 public ORACLE_ROLE;\\n\\n    uint[] public monSTS;\\n    uint[] public monETS;\\n\\n    function initialize() public initializer {\\n        // _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // _setupRole(ORACLE_ROLE, msg.sender);\\n        // ORACLE_ROLE = \\\"oracle_role\\\";\\n        __Ownable_init_unchained();\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function setPrice(string memory symbol, uint ts, uint _price) public onlyOwner{\\n        // require(hasRole(ORACLE_ROLE, msg.sender), \\\"caller not oracle\\\");\\n        price[symbol] = _price;\\n        historyPrice[symbol][ts] = _price;\\n    }\\n\\n    function setMultiPrice(string memory symbol, uint[] memory ts, uint[] memory _prices) public {\\n        require(ts.length == _prices.length, \\\"length should match\\\");\\n        for(uint i; i < ts.length; i++) {\\n            setPrice(symbol, ts[i], _prices[i]);\\n        }\\n    }\\n    // 0 => day; 1 => week; 2 => month\\n    function getPeroidTS(uint _peroidType) public view returns (uint start, uint end) {\\n        // 0 => day\\n        if (_peroidType == 0) {\\n            start = block.timestamp - (block.timestamp % 86400);\\n            end = start + 86400;\\n        } else if (_peroidType == 2) {\\n            // 1 => week\\n            start = block.timestamp - ((block.timestamp + 259200) % 604800);\\n            end = start + 604800;\\n        } else if (_peroidType == 3) {\\n            // 2 => month\\n            for (uint256 i; i < monSTS.length; i++) {\\n                if (\\n                    monSTS[i] >= block.timestamp &&\\n                    monETS[i] <= block.timestamp\\n                ) {\\n                    start = monSTS[i];\\n                    end = monETS[i];\\n                }\\n            }\\n            require(start != 0, \\\"not known start ts\\\");\\n            require(end != 0, \\\"not known end ts\\\");\\n        }\\n    }\\n\\n    function setMonthTS(uint256[] memory starts, uint256[] memory ends) public {\\n        require(starts.length == ends.length, \\\"starts and ends should match\\\");\\n        for (uint256 i; i < starts.length; i++) {\\n            monSTS.push(starts[i]);\\n            monETS.push(ends[i]);\\n        }\\n    }\\n\\n    // peroidType: \\n    // settleType: \\n    // TwoWay, // 0\\n    // Positive, // 1\\n    // Negative, // 2\\n    // Specific // 3\\n    function getStrikePrice(\\n        string memory symbol,\\n        uint _peroidType,\\n        uint _settleType,\\n        uint256 _settleValue\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 startPrice,\\n            uint256 strikePrice,\\n            uint256 strikePriceOver,\\n            uint256 strikePriceUnder\\n        )\\n    {\\n        (uint256 startTS, ) = getPeroidTS(_peroidType);\\n        startPrice = historyPrice[symbol][startTS];\\n        uint256 settlePrice;\\n        uint256 settlePriceOver;\\n        uint256 settlePriceUnder;\\n        if (_settleType == 3) {\\n            settlePrice = _settleValue;\\n        } else if (_settleType == 0) {\\n            settlePriceOver = startPrice.multiplyDecimal(1e18 + _settleValue);\\n            settlePriceUnder = startPrice.multiplyDecimal(1e18 - _settleValue);\\n        } else if (_settleType == 1) {\\n            settlePriceOver = startPrice.multiplyDecimal(1e18 + _settleValue);\\n        } else if (_settleType == 2) {\\n            settlePriceUnder = startPrice.multiplyDecimal(1e18 - _settleValue);\\n        } else {\\n            revert(\\\"unknown Settle Type\\\");\\n        }\\n        strikePrice = getSpacePrice(startPrice, settlePrice);\\n        strikePriceOver = getSpacePrice(startPrice, settlePriceOver);\\n        strikePriceUnder = getSpacePrice(startPrice, settlePriceUnder);\\n    }\\n\\n    function getSpacePrice(uint256 oraclePrice, uint256 rawPrice)\\n        public\\n        pure\\n        returns (uint256 price_)\\n    {\\n        uint256 i = 12;\\n        while (oraclePrice / 10**i >= 10) {\\n            i += 1;\\n        }\\n        uint256 minI = i - 2;\\n        uint256 maxI = i - 1;\\n        uint256 unit0 = 10**minI;\\n        uint256 unit1 = 10**maxI;\\n\\n        uint256 overBound = (oraclePrice * 130) / 100;\\n        uint256 underBound = (oraclePrice * 70) / 100;\\n        if (rawPrice >= underBound || rawPrice <= overBound) {\\n            price_ = (rawPrice / unit0) * unit0;\\n        } else {\\n            price_ = (rawPrice / unit1) * unit1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x97ceed7e9d0f5bb620282eb598212254123b827bb1c869c9b775842daeaf60ad\",\"license\":\"MIT\"},\"contracts/structs/BattleInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PeroidType.sol\\\";\\nimport \\\"./SettleType.sol\\\";\\n\\nstruct BattleInfo {\\n    string trackName;\\n    string priceName;\\n    PeroidType peroidType;\\n    SettleType settleType;\\n    uint settleValue;\\n}\",\"keccak256\":\"0xc05735dd67a61ab64150d9a8a189c19b35e161860b0bc8abeefc48d6dc45554d\",\"license\":\"MIT\"},\"contracts/structs/PeroidType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum PeroidType {\\n    Day, // 0 \\n    Week, // 1\\n    Month // 2\\n}\",\"keccak256\":\"0xf7b8924060950854146e0ad3134c9bc07545eda6b011bf65cc333357fcf6d431\",\"license\":\"MIT\"},\"contracts/structs/RoundInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PeroidType.sol\\\";\\nimport \\\"./SettleType.sol\\\";\\n\\nstruct RoundInfo {\\n    uint spearPrice;\\n    uint shieldPrice;\\n    uint strikePrice;\\n    uint strikePriceOver;\\n    uint strikePriceUnder;\\n    uint startTS;\\n    uint endTS;\\n}\",\"keccak256\":\"0x0a964b0bfe53f6c32f14973905a8589bcd88ffa290de6deb13f52c0aaa256be7\",\"license\":\"MIT\"},\"contracts/structs/RoundResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RoundResult {\\n    Non, // 0\\n    SpearWin, // 1\\n    ShieldWin //2\\n}\\n\",\"keccak256\":\"0xf89bd082ca4090e4330b4042ae03d23d713d00cba8aee98d2ef80606bbcfc5f7\",\"license\":\"MIT\"},\"contracts/structs/SettleType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum SettleType {\\n    TwoWay, // 0\\n    Positive, // 1\\n    Negative, // 2\\n    Specific // 3\\n\\n}\\n\",\"keccak256\":\"0x5615575d747f742885a44b9a2260145cf34c87dbef9eb9aea42f5084f82a8214\",\"license\":\"MIT\"},\"contracts/structs/UserInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nstruct UserInfo {\\n    uint[] roundIds;\\n    uint[] spearBalances;\\n    uint[] shieldBalances;\\n    uint lpBalance;\\n}\",\"keccak256\":\"0xa3d0ff78ee1844272cb6f70a2d62799051688519721894ed2317819327f7aad7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614af1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638fd28afc1461003b578063ae1fec9014610071575b600080fd5b61004e61004936600461028f565b610086565b604080516001600160a01b03909316835260208301919091520160405180910390f35b61008461007f366004610372565b610145565b005b600080600087878787876040516020016100a495949392919061038a565b6040516020818303038152906040528051906020012090506000604051806020016100ce90610282565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b0319848401526bffffffffffffffffffffffff193060601b166021840152603583018690526055808401919091528151808403909101815260759092019052805191012099919850909650505050505050565b6101736000826040518060200161015b90610282565b601f1982820381018352601f90910116604052610177565b5050565b600080844710156101cf5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b825161021d5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016101c6565b8383516020850187f590506001600160a01b03811661027a5760405162461bcd60e51b8152602060048201526019602482015278437265617465323a204661696c6564206f6e206465706c6f7960381b60448201526064016101c6565b949350505050565b6146af8061040d83390190565b600080600080600060a086880312156102a6578081fd5b85356001600160a01b03811681146102bc578182fd5b9450602086013567ffffffffffffffff808211156102d8578283fd5b818801915088601f8301126102eb578283fd5b8135818111156102fd576102fd6103f6565b604051601f8201601f19908116603f01168101908382118183101715610325576103256103f6565b816040528281528b602084870101111561033d578586fd5b826020860160208301379182016020019490945296999698505050506040850135946060810135946080909101359350915050565b600060208284031215610383578081fd5b5035919050565b6bffffffffffffffffffffffff198660601b16815260008551815b818110156103c257602081890181015160148684010152016103a5565b818111156103d35782601483860101525b506014920191820194909452603481019290925260548201526074019392505050565b634e487b7160e01b600052604160045260246000fdfe6080604052670de05bc096e9c00060078190556200002690670de0b6b3a7640000620001c0565b6008553480156200003657600080fd5b50604080518082018252601881527f426174746c65204c697175696c696469747920546f6b656e00000000000000006020808301918252835180850190945260038452620424c560ec1b9084015281519192916200009791600c916200011a565b508051620000ad90600d9060208401906200011a565b5050506000620000c26200011660201b60201c565b601680546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000221565b3390565b8280546200012890620001e4565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b600082821015620001df57634e487b7160e01b81526011600452602481fd5b500390565b600181811c90821680620001f957607f821691505b602082108114156200021b57634e487b7160e01b600052602260045260246000fd5b50919050565b61447e80620002316000396000f3fe608060405234801561001057600080fd5b50600436106104805760003560e01c8063747dff4211610257578063b2016bd411610146578063e78ccc39116100c3578063f6e0c8f611610087578063f6e0c8f614610b96578063fa38601d14610ba9578063fc0afb4214610bbd578063fd3705f914610bdd578063ff5958fc14610bf057600080fd5b8063e78ccc3914610b1b578063e800bd4414610b2e578063efe8639414610b4e578063f2fde38b14610b70578063f46901ed14610b8357600080fd5b8063dd62ed3e1161010a578063dd62ed3e14610a61578063dec966e914610a9a578063e1237df014610aba578063e559195414610af5578063e5cb8d8614610b0857600080fd5b8063b2016bd4146109c2578063b4f77f71146109d5578063bc0d12c514610a00578063c29bf54914610a20578063d019abba14610a4e57600080fd5b806390a4cb9b116101d45780639c8f9f23116101985780639c8f9f2314610955578063a345d92114610968578063a457c2d714610988578063a9059cbb1461099b578063b145a5b8146109ae57600080fd5b806390a4cb9b1461091557806391a1adbe1461092857806395d89b411461093157806396eb6d0b1461093957806399b675bf1461094257600080fd5b8063858e6e891161021b578063858e6e89146108be57806388c3ffb0146108d157806389ef689d146108e45780638da5cb5b146108ed5780638e569819146108f557600080fd5b8063747dff421461080f5780637a917e541461086d5780637dc0d1d014610876578063821482e21461088957806384b12427146108a957600080fd5b80633a8bcc91116103735780634ec501b2116102f05780636f4d2b67116102b45780636f4d2b67146107ab57806370a08231146107be578063715018a6146107e7578063728313c9146107ef57806373cdc9551461080257600080fd5b80634ec501b21461073f57806351c6590a1461075257806357b622e51461076557806358a01710146107785780636386c1c71461078b57600080fd5b806341744dd41161033757806341744dd4146106c35780634484cc69146106cc5780634975dc3f146106ec5780634e5b611e146107175780634e71d92d1461073757600080fd5b80633a8bcc911461064a5780633b1f18dd1461066a5780633c45e7361461068a5780633cc1f54c1461069d57806340dd37f6146106b057600080fd5b80631bd5ff2811610401578063313ce567116103c5578063313ce567146105ed57806333eca634146105fc57806335a94b7b1461061c578063395093511461062457806339bd04301461063757600080fd5b80631bd5ff28146105655780631f38f5c614610578578063221937e01461059757806323b872dd146105aa5780632bed99a3146105bd57600080fd5b80630d12872d116104485780630d12872d1461051957806311da60b41461053957806318160ddd1461054157806319f4ff2f146105495780631bd590291461055c57600080fd5b8063017e7e581461048557806305e93c60146104b557806306fdde03146104ca57806309300a33146104df578063095ea7b3146104f6575b600080fd5b601754610498906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6104c86104c3366004613bf5565b610bf8565b005b6104d2610d1b565b6040516104ac9190613fe5565b6104e860195481565b6040519081526020016104ac565b610509610504366004613ce9565b610dad565b60405190151581526020016104ac565b6104e8610527366004613d81565b60146020526000908152604090205481565b6104c8610dc4565b600b546104e8565b6104c8610557366004613d81565b610f64565b6104e860205481565b6104c8610573366004613ba9565b610f98565b601f5461058a90610100900460ff1681565b6040516104ac9190613f93565b6104e86105a5366004613d81565b610fe9565b6105096105b8366004613cae565b611021565b6105e06105cb366004613d81565b60156020526000908152604090205460ff1681565b6040516104ac9190613f80565b604051601281526020016104ac565b6104e861060a366004613d81565b60026020526000908152604090205481565b6104d26110d2565b610509610632366004613ce9565b611160565b6104c8610645366004613d12565b611197565b6104e8610658366004613d81565b600e6020526000908152604090205481565b6104e8610678366004613d81565b60066020526000908152604090205481565b6104c8610698366004613d81565b61128e565b6104c86106ab366004613d81565b61136a565b6104e86106be366004613d81565b6113ee565b6104e860185481565b6104e86106da366004613d81565b60106020526000908152604090205481565b6104e86106fa366004613db1565b600360209081526000928352604080842090915290825290205481565b6104e8610725366004613d81565b60116020526000908152604090205481565b6104c86113fc565b6104e861074d366004613d81565b611491565b6104c8610760366004613d81565b61149f565b6104c8610773366004613d81565b61150b565b6104e8610786366004613d81565b6115e7565b61079e610799366004613ba9565b61161f565b6040516104ac9190614189565b6104e86107b9366004613d81565b61164f565b6104e86107cc366004613ba9565b6001600160a01b031660009081526009602052604090205490565b6104c861167d565b6104c86107fd366004613d81565b6116f6565b601f546105e09060ff1681565b61081761178b565b6040516104ac9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6104e860215481565b602754610498906001600160a01b031681565b6104e8610897366004613d81565b60046020526000908152604090205481565b6108b16117a3565b6040516104ac9190614111565b6104e86108cc366004613d81565b611969565b6108176108df366004613d81565b611977565b6104e860265481565b610498611a01565b6104e8610903366004613d81565b60056020526000908152604090205481565b6104e8610923366004613d81565b611a10565b6104e860225481565b6104d2611a31565b6104e860255481565b6104e8610950366004613d81565b611a40565b6104c8610963366004613d81565b611a4e565b6104e8610976366004613d81565b600f6020526000908152604090205481565b610509610996366004613ce9565b611a76565b6105096109a9366004613ce9565b611b11565b60275461050990600160a81b900460ff1681565b601c54610498906001600160a01b031681565b6104e86109e3366004613db1565b600160209081526000928352604080842090915290825290205481565b6104e8610a0e366004613d81565b60136020526000908152604090205481565b610a33610a2e366004613d81565b611b1e565b604080519384526020840192909252908201526060016104ac565b610a33610a5c366004613dd3565b611b3d565b6104e8610a6f366004613bc3565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b6104e8610aa8366004613d81565b60006020819052908152604090205481565b610acd610ac8366004613dd3565b611c16565b604080519586526020860194909452928401919091526060830152608082015260a0016104ac565b610acd610b03366004613d81565b611d2c565b6104e8610b16366004613d81565b611d52565b6104e8610b29366004613d81565b611d81565b6104e8610b3c366004613d81565b60126020526000908152604090205481565b610b61610b5c366004613ba9565b611db2565b6040516104ac939291906141f8565b6104c8610b7e366004613ba9565b611e9a565b6104c8610b91366004613ba9565b611f8a565b6104c8610ba4366004613d81565b611fdb565b60275461050990600160a01b900460ff1681565b6104e8610bcb366004613ba9565b60236020526000908152604090205481565b601b54610498906001600160a01b031681565b6104d2612006565b602754600160a01b900460ff1615610c3f5760405162461bcd60e51b81526020600482015260056024820152640696e6974360dc1b60448201526064015b60405180910390fd5b6027805460ff60a01b1916600160a01b179055601c80546001600160a01b03808a166001600160a01b031992831617909255601b8054928916929091169190911790558451610c9590601d906020880190613a35565b508351610ca990601e906020870190613a35565b50601f805484919060ff19166001836002811115610cd757634e487b7160e01b600052602160045260246000fd5b0217905550601f805483919061ff001916610100836003811115610d0b57634e487b7160e01b600052602160045260246000fd5b0217905550602055505050505050565b6060600c8054610d2a9061439e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d569061439e565b8015610da35780601f10610d7857610100808354040283529160200191610da3565b820191906000526020600020905b815481529060010190602001808311610d8657829003601f168201915b5050505050905090565b6000610dba338484612013565b5060015b92915050565b601954600090815260116020526040902054421015610e115760405162461bcd60e51b8152602060048201526009602482015268746f6f206561726c7960b81b6044820152606401610c36565b60195460009081526015602052604081205460ff166002811115610e4557634e487b7160e01b600052602160045260246000fd5b14610e7c5760405162461bcd60e51b81526020600482015260076024820152661cd95d1d1b195960ca1b6044820152606401610c36565b6027546019546000908152601160205260408082205490516359fb1e3d60e11b815291926001600160a01b03169163b3f63c7a91610ec091601e9190600401613ff8565b60206040518083038186803b158015610ed857600080fd5b505afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f109190613d99565b905080610f2f5760405162461bcd60e51b8152600401610c3690614049565b6019546000908152600f60205260409020819055610f4b612138565b6000610f556123a1565b9050610f60816124ac565b5050565b33610f6d611a01565b6001600160a01b031614610f935760405162461bcd60e51b8152600401610c369061406e565b601855565b33610fa1611a01565b6001600160a01b031614610fc75760405162461bcd60e51b8152600401610c369061406e565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602090815260408083203084528252808320548484526004909252822054829161101a919061274c565b9392505050565b600061102e84848461276e565b6001600160a01b0384166000908152600a60209081526040808320338452909152902054828110156110b35760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c36565b6110c785336110c2868561435b565b612013565b506001949350505050565b601e80546110df9061439e565b80601f016020809104026020016040519081016040528092919081815260200182805461110b9061439e565b80156111585780601f1061112d57610100808354040283529160200191611158565b820191906000526020600020905b81548152906001019060200180831161113b57829003601f168201915b505050505081565b336000818152600a602090815260408083206001600160a01b03871684529091528120549091610dba9185906110c2908690614219565b6019546001600160a01b038616600090815260246020526040902086916111be9190612934565b6111e8576019546001600160a01b03821660009081526024602052604090206111e69161294c565b505b602754600160a81b900460ff161561122b5760405162461bcd60e51b8152600401610c36906020808252600490820152631a5b9a5d60e21b604082015260600190565b60278054600161ff0160a01b0319166001600160a01b03841617600160a81b17905560218490556022839055611260856124ac565b6019546001600160a01b0387166000908152602360205260409020556112868686612958565b505050505050565b33600090815260236020526040902054156112ab576112ab6113fc565b60195433600081815260246020526040902090916112c99190612934565b6112f3576019546001600160a01b03821660009081526024602052604090206112f19161294c565b505b600061130a60185484612a2590919063ffffffff16565b9050611323601954828561131e919061435b565b612a47565b6113463330611332848761435b565b601c546001600160a01b0316929190612b66565b601754601c54611365916001600160a01b039182169133911684612b66565b505050565b3360009081526023602052604090205415611387576113876113fc565b600061139560195483612bd7565b905060006113ae60185483612a2590919063ffffffff16565b90506113d1336113be838561435b565b601c546001600160a01b03169190612c2e565b601754601c54611365916001600160a01b03918216911683612c2e565b6000610dbe60195483612c5e565b60008061140833611db2565b925050915080600014156114525760405162461bcd60e51b815260206004820152601160248201527073706561722f736869656c64207a65726f60781b6044820152606401610c36565b61145d823383612c98565b611468823383612d34565b33600081815260236020526040812055601c54610f60916001600160a01b039091169083612c2e565b6000610dbe60195483612dc3565b60195433600081815260246020526040902090916114bd9190612934565b6114e7576019546001600160a01b03821660009081526024602052604090206114e59161294c565b505b6114f360195483612df5565b601c54610f60906001600160a01b0316333085612b66565b60265433600090815260096020526040902054101561155c5760405162461bcd60e51b815260206004820152600d60248201526c06e6f7420656e6f756768206c7609c1b6044820152606401610c36565b670de0b6b3a764000081106115835760405162461bcd60e51b8152600401610c3690614049565b602181905561159a81670de0b6b3a764000061435b565b60228190556021546040805133815260208101929092528101919091527ff6b8a92f9bdaf1c98998652be215c78364778cd8decd80347d680b38b0a09bbc9060600160405180910390a150565b600081815260056020908152604080832054600483528184205460069093529083205490916116159161435b565b610dbe919061435b565b61164a6040518060800160405280606081526020016060815260200160608152602001600081525090565b919050565b600081815260016020908152604080832030845282528083205484845291839052822054610dbe919061435b565b33611686611a01565b6001600160a01b0316146116ac5760405162461bcd60e51b8152600401610c369061406e565b6016546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601680546001600160a01b0319169055565b3360009081526023602052604090205415611713576117136113fc565b60195433600081815260246020526040902090916117319190612934565b61175b576019546001600160a01b03821660009081526024602052604090206117599161294c565b505b600061177260185484612a2590919063ffffffff16565b90506113236019548285611786919061435b565b612e4e565b611793613ab9565b61179e601954611977565b905090565b6117d36040805160a081018252606080825260208201529081016000815260200160008152602001600081525090565b6040518060a00160405280601d80546117eb9061439e565b80601f01602080910402602001604051908101604052809291908181526020018280546118179061439e565b80156118645780601f1061183957610100808354040283529160200191611864565b820191906000526020600020905b81548152906001019060200180831161184757829003601f168201915b50505050508152602001601e805461187b9061439e565b80601f01602080910402602001604051908101604052809291908181526020018280546118a79061439e565b80156118f45780601f106118c9576101008083540402835291602001916118f4565b820191906000526020600020905b8154815290600101906020018083116118d757829003601f168201915b5050509183525050601f5460209091019060ff16600281111561192757634e487b7160e01b600052602160045260246000fd5b8152602001601f60019054906101000a900460ff16600381111561195b57634e487b7160e01b600052602160045260246000fd5b815260208054910152919050565b6000610dbe60195483612f2b565b61197f613ab9565b6040518060e0016040528061199384610fe9565b81526020016119a184611d81565b815260008481526012602090815260408083205482850152868352601382528083205481850152868352601482528083205460608501528683526010825280832054608085015295825260119052939093205460a0909301929092525090565b6016546001600160a01b031690565b601a8181548110611a2057600080fd5b600091825260209091200154905081565b6060600d8054610d2a9061439e565b6000610dbe60195483612f58565b6000611a5c60195483612f85565b601c54909150610f60906001600160a01b03163383612c2e565b336000908152600a602090815260408083206001600160a01b038616845290915281205482811015611af85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c36565b611b0733856110c2868561435b565b5060019392505050565b6000610dba33848461276e565b6000806000611b2f60195485611b3d565b9250925092505b9193909250565b600080600080611b4c8661164f565b90506000611b5987611d52565b90506000818311611b6a5781611b6c565b825b9050611ba6611b7a600b5490565b60008a815260066020526040902054611ba0908a90611b9a90869061435b565b90612a25565b9061274c565b9550611bd8611bb4600b5490565b60008a8152600160209081526040808320308452909152902054611ba0908a612a25565b9450611c0a611be6600b5490565b60008a8152600360209081526040808320308452909152902054611ba0908a612a25565b93505050509250925092565b600082815260056020908152604080832054600490925282205482918291829182918291611c4391614219565b600089815260046020526040902054909150611c65908290611ba0908a612a25565b600089815260056020526040902054909650611c87908290611ba0908a612a25565b6000898152600160209081526040808320308452909152902054909550611cb4908290611ba0908a612a25565b6000898152600360209081526040808320308452909152902054909450611ce1908290611ba0908a612a25565b9250611cec600b5490565b611cf857869150611d21565b600088815260066020526040902054611d1e90611ba0611d17600b5490565b8a90612a25565b91505b509295509295909350565b6000806000806000611d4060195487611c16565b939a9299509097509550909350915050565b60008181526003602090815260408083203084528252808320548484526002909252822054610dbe919061435b565b60008181526003602090815260408083203084528252808320548484526005909252822054829161101a919061274c565b6001600160a01b0381166000908152602360209081526040808320548084526015909252822054909160ff909116908215801590611df1575060195483105b15611b36576001826002811115611e1857634e487b7160e01b600052602160045260246000fd5b1415611e47575060008281526001602090815260408083206001600160a01b0387168452909152902054611b36565b6002826002811115611e6957634e487b7160e01b600052602160045260246000fd5b1415611b36575060008281526003602090815260408083206001600160a01b03871684529091529020549193909250565b33611ea3611a01565b6001600160a01b031614611ec95760405162461bcd60e51b8152600401610c369061406e565b6001600160a01b038116611f2e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c36565b6016546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601680546001600160a01b0319166001600160a01b0392909216919091179055565b33611f93611a01565b6001600160a01b031614611fb95760405162461bcd60e51b8152600401610c369061406e565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526023602052604090205415611ff857611ff86113fc565b60006113956019548361306f565b601d80546110df9061439e565b6001600160a01b0383166120755760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c36565b6001600160a01b0382166120d65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c36565b6001600160a01b038381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000601f54610100900460ff16600381111561216457634e487b7160e01b600052602160045260246000fd5b14156121fe57601954600090815260136020908152604080832054600f909252909120541015806121b15750601954600090815260146020908152604080832054600f9092529091205411155b156121db57601954600090815260156020526040902080546001919060ff191682805b0217905550565b601954600090815260156020526040902080546002919060ff19166001836121d4565b6001601f54610100900460ff16600381111561222a57634e487b7160e01b600052602160045260246000fd5b141561227557601954600090815260136020908152604080832054600f90925290912054106121db57601954600090815260156020526040902080546001919060ff191682806121d4565b6002601f54610100900460ff1660038111156122a157634e487b7160e01b600052602160045260246000fd5b14156122ec57601954600090815260146020908152604080832054600f90925290912054106121db57601954600090815260156020526040902080546001919060ff191682806121d4565b6003601f54610100900460ff16600381111561231857634e487b7160e01b600052602160045260246000fd5b141561236357601954600090815260126020908152604080832054600f90925290912054106121db57601954600090815260156020526040902080546001919060ff191682806121d4565b60405162461bcd60e51b8152602060048201526013602482015272756e6b6e6f776e20736574746c65207479706560681b6044820152606401610c36565b6000600160195460009081526015602052604090205460ff1660028111156123d957634e487b7160e01b600052602160045260246000fd5b1415612405576019546000908152602081815260408083205460069092529091205461179e919061435b565b600260195460009081526015602052604090205460ff16600281111561243b57634e487b7160e01b600052602160045260246000fd5b14156124695760195460009081526002602090815260408083205460069092529091205461179e919061435b565b60405162461bcd60e51b81526020600482015260186024820152771b9bdd0818dbdc9c9958dd081c9bdd5b99081c995cdd5b1d60421b6044820152606401610c36565b602754601f5460009182916001600160a01b039091169063962657959060ff1660028111156124eb57634e487b7160e01b600052602160045260246000fd5b6040518263ffffffff1660e01b815260040161250991815260200190565b604080518083038186803b15801561252057600080fd5b505afa158015612534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125589190613df4565b6019829055601a805460018101825560009182527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e01839055602754601f54939550919350918291829182916001600160a01b03169063d39f696490601e9060ff1660028111156125d957634e487b7160e01b600052602160045260246000fd5b601f54610100900460ff16600381111561260357634e487b7160e01b600052602160045260246000fd5b6020546040518563ffffffff1660e01b8152600401612625949392919061401a565b60806040518083038186803b15801561263d57600080fd5b505afa158015612651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126759190613e17565b935093509350935061268a60195430896130bc565b612697601954308961314b565b6126b76019546126b289602154612a2590919063ffffffff16565b6131da565b6126d76019546126d289602254612a2590919063ffffffff16565b613224565b601980546000908152600e6020908152604080832097909755825482526010815286822098909855815481526011885285812096909655805486526012875284862093909355825485526013865283852091909155815484526014855282842055548252601590925220805460ff1916905550565b600061101a826127686127616012600a614294565b8690613242565b9061324e565b6001600160a01b0383166127d25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c36565b6001600160a01b0382166128345760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c36565b6001600160a01b038316600090815260096020526040902054818110156128ac5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c36565b6128b6828261435b565b6001600160a01b0380861660009081526009602052604080822093909355908516815290812080548492906128ec908490614219565b92505081905550826001600160a01b0316846001600160a01b03166000805160206144298339815191528460405161292691815260200190565b60405180910390a350505050565b6000818152600183016020526040812054151561101a565b600061101a838361325a565b6001600160a01b0382166129ae5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c36565b80600b60008282546129c09190614219565b90915550506001600160a01b038216600090815260096020526040812080548392906129ed908490614219565b90915550506040518181526001600160a01b038316906000906000805160206144298339815191529060200160405180910390a35050565b6000612a336012600a614294565b612a3d8484613242565b61101a9190614231565b6000612a538383612f2b565b60008481526001602090815260408083203080855290835281842054888552600384528285209185529252909120546007549293509091612ab0612a97858561435b565b600088815260046020526040902054611ba09088614219565b10612b2657612ae085612ace84600754612a2590919063ffffffff16565b60009182526004602052604090912055565b612aea85856132a9565b612af6853033866132c7565b612b2185612b0f83600854612a2590919063ffffffff16565b60009182526005602052604090912055565b612b5f565b612b3085856131da565b612b3c853033866132c7565b612b5f85612b0f83612b4d89610fe9565b611b9a90670de0b6b3a764000061435b565b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612bd19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526133c6565b50505050565b6000612be38383612c5e565b6000848152600160209081526040808320308452909152902054909150612c0a8483613498565b612c16843330866134d9565b612c2784612ace83612b4d88611d81565b5092915050565b6040516001600160a01b03831660248201526044810182905261136590849063a9059cbb60e01b90606401612b9a565b60008281526003602090815260408083203084528252808320548584526005909252822054612c9090849083906135ca565b949350505050565b60008381526001602090815260408083206001600160a01b038616845290915281208054839290612cca90849061435b565b909155505060008381526020819052604081208054839290612ced90849061435b565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca90612d279060009085908590613fc6565b60405180910390a1505050565b60008381526003602090815260408083206001600160a01b038616845290915281208054839290612d6690849061435b565b909155505060008381526002602052604081208054839290612d8990849061435b565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca90612d279060019085908590613fc6565b60008281526001602090815260408083203084528252808320548584526004909252822054612c9090849083906135ca565b6000806000806000612e078787611c16565b94509450945094509450612e1b87866131da565b612e258785613224565b612e308733856130bc565b612e3b87338461314b565b612e453382612958565b50505050505050565b6000612e5a8383612f58565b60008481526001602090815260408083203080855290835281842054888552600384528285209185529252909120546007549293509091612eb7612e9e858461435b565b600088815260056020526040902054611ba09088614219565b10612f0457612ed585612b0f83600754612a2590919063ffffffff16565b612edf85856132a9565b612eeb853033866134d9565b612b2185612ace84600854612a2590919063ffffffff16565b612f0e8585613224565b612f1a853033866134d9565b612b5f85612ace83612b4d89611d81565b6000828152600460209081526040808320546001835281842030855290925282205461101a9184916135fb565b6000828152600560209081526040808320546003835281842030855290925282205461101a9184916135fb565b600080600080612f958686611b3d565b600089815260066020908152604080832054600490925282205494975092955090935091612fc99190611ba0908790612a25565b60008881526006602090815260408083205460059092528220549293509091612ff89190611ba0908890612a25565b6000898152600660205260408120549192509061302290611ba061301b8c6115e7565b8990612a25565b905061302e89846136dd565b6130388983613498565b61304289826136fb565b61304d893087612c98565b613058893086612d34565b6130623389613719565b5093979650505050505050565b60008281526003602090815260408083203084529091528120546130938484612dc3565b915061309f84836136dd565b6130ab843330866132c7565b612c2784612b0f83612b4d88610fe9565b60008381526001602090815260408083206001600160a01b0386168452909152812080548392906130ee908490614219565b909155505060008381526020819052604081208054839290613111908490614219565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f690612d279060009085908590613fc6565b60008381526003602090815260408083206001600160a01b03861684529091528120805483929061317d908490614219565b9091555050600083815260026020526040812080548392906131a0908490614219565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f690612d279060019085908590613fc6565b600082815260046020526040812080548392906131f8908490614219565b90915550506000828152600660205260408120805483929061321b908490614219565b90915550505050565b600082815260056020526040812080548392906131f8908490614219565b600061101a828461433c565b600061101a8284614231565b60008181526001830160205260408120546132a157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dbe565b506000610dbe565b6000828152600660205260408120805483929061321b908490614219565b6001600160a01b0383166132ed5760405162461bcd60e51b8152600401610c36906140a3565b6001600160a01b0382166133135760405162461bcd60e51b8152600401610c36906140da565b60008481526001602090815260408083206001600160a01b03871684529091528120805483929061334590849061435b565b909155505060008481526001602090815260408083206001600160a01b03861684529091528120805483929061337c908490614219565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b0906133b890600090869086908690613fa1565b60405180910390a150505050565b600061341b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138569092919063ffffffff16565b80519091501561136557808060200190518101906134399190613d61565b6113655760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c36565b600082815260056020526040812080548392906134b690849061435b565b90915550506000828152600660205260408120805483929061321b90849061435b565b6001600160a01b0383166134ff5760405162461bcd60e51b8152600401610c36906140a3565b6001600160a01b0382166135255760405162461bcd60e51b8152600401610c36906140da565b60008481526003602090815260408083206001600160a01b03871684529091528120805483929061355790849061435b565b909155505060008481526003602090815260408083206001600160a01b03861684529091528120805483929061358e908490614219565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b0906133b890600190869086908690613fa1565b6000806135d7858461433c565b905060006135e58686614219565b90506135f18183614231565b9695505050505050565b6000670de05bc096e9c000613610848461274c565b1061361c57508261101a565b60006136426136336127106127688661270f613242565b61363d908661433c565b613865565b9050600061366561365b61270f61276887612710613242565b61363d908761433c565b9050816136728688614219565b11156136ac57848287613685848861435b565b61368f9190614219565b613699919061435b565b6136a39190614219565b9250505061101a565b60006136b8878661433c565b905060006136c68888614219565b90506136d28183614231565b94505050505061101a565b600082815260046020526040812080548392906134b690849061435b565b6000828152600660205260408120805483929061321b90849061435b565b6001600160a01b0382166137795760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c36565b6001600160a01b038216600090815260096020526040902054818110156137ed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c36565b6137f7828261435b565b6001600160a01b038416600090815260096020526040812091909155600b805484929061382590849061435b565b90915550506040518281526000906001600160a01b038516906000805160206144298339815191529060200161212b565b6060612c9084846000856138d4565b600060038211156138c6575080600061387f600283614231565b61388a906001614219565b90505b818110156138c0579050806002816138a58186614231565b6138af9190614219565b6138b99190614231565b905061388d565b50919050565b811561164a57506001919050565b6060824710156139355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c36565b843b6139835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c36565b600080866001600160a01b0316858760405161399f9190613f64565b60006040518083038185875af1925050503d80600081146139dc576040519150601f19603f3d011682016040523d82523d6000602084013e6139e1565b606091505b50915091506139f18282866139fc565b979650505050505050565b60608315613a0b57508161101a565b825115613a1b5782518084602001fd5b8160405162461bcd60e51b8152600401610c369190613fe5565b828054613a419061439e565b90600052602060002090601f016020900481019282613a635760008555613aa9565b82601f10613a7c57805160ff1916838001178555613aa9565b82800160010185558215613aa9579182015b82811115613aa9578251825591602001919060010190613a8e565b50613ab5929150613af6565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613ab55760008155600101613af7565b80356001600160a01b038116811461164a57600080fd5b600082601f830112613b32578081fd5b813567ffffffffffffffff80821115613b4d57613b4d6143ff565b604051601f8301601f19908116603f01168101908282118183101715613b7557613b756143ff565b81604052838152866020858801011115613b8d578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215613bba578081fd5b61101a82613b0b565b60008060408385031215613bd5578081fd5b613bde83613b0b565b9150613bec60208401613b0b565b90509250929050565b600080600080600080600060e0888a031215613c0f578283fd5b613c1888613b0b565b9650613c2660208901613b0b565b9550604088013567ffffffffffffffff80821115613c42578485fd5b613c4e8b838c01613b22565b965060608a0135915080821115613c63578485fd5b50613c708a828b01613b22565b945050608088013560038110613c84578384fd5b925060a088013560048110613c97578283fd5b8092505060c0880135905092959891949750929550565b600080600060608486031215613cc2578283fd5b613ccb84613b0b565b9250613cd960208501613b0b565b9150604084013590509250925092565b60008060408385031215613cfb578182fd5b613d0483613b0b565b946020939093013593505050565b600080600080600060a08688031215613d29578081fd5b613d3286613b0b565b9450602086013593506040860135925060608601359150613d5560808701613b0b565b90509295509295909350565b600060208284031215613d72578081fd5b8151801515811461101a578182fd5b600060208284031215613d92578081fd5b5035919050565b600060208284031215613daa578081fd5b5051919050565b60008060408385031215613dc3578182fd5b82359150613bec60208401613b0b565b60008060408385031215613de5578182fd5b50508035926020909101359150565b60008060408385031215613e06578182fd5b505080516020909101519092909150565b60008060008060808587031215613e2c578384fd5b505082516020840151604085015160609095015191969095509092509050565b6000815180845260208085019450808401835b83811015613e7b57815187529582019590820190600101613e5f565b509495945050505050565b60048110613e9657613e966143e9565b9052565b60008151808452613eb2816020860160208601614372565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680613ee057607f831692505b6020808410821415613f0057634e487b7160e01b86526022600452602486fd5b83885260208801828015613f1b5760018114613f2c57613f57565b60ff19871682528282019750613f57565b60008981526020902060005b87811015613f5157815484820152908601908401613f38565b83019850505b5050505050505092915050565b60008251613f76818460208701614372565b9190910192915050565b60208101613f8d83614415565b91905290565b60208101610dbe8284613e86565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b9283526001600160a01b03919091166020830152604082015260600190565b60208152600061101a6020830184613e9a565b60408152600061400b6040830185613ec6565b90508260208301529392505050565b60808152600061402d6080830187613ec6565b6020830195909552506040810192909252606090910152919050565b6020808252600b908201526a383934b1b29032b93937b960a91b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f66726f6d2073686f756c64206e6f742062652061646472657373283029000000604082015260600190565b6020808252601b908201527f746f2073686f756c64206e6f7420626520616464726573732830290000000000604082015260600190565b602081526000825160a0602084015261412d60c0840182613e9a565b90506020840151601f1984830301604085015261414a8282613e9a565b915050604084015161415b81614415565b8060608501525060608401516141746080850182613e86565b50608084015160a08401528091505092915050565b6020815260008251608060208401526141a560a0840182613e4c565b90506020840151601f19808584030160408601526141c38383613e4c565b92506040860151915080858403016060860152506141e18282613e4c565b915050606084015160808401528091505092915050565b8381526060810161420884614415565b602082019390935260400152919050565b6000821982111561422c5761422c6143d3565b500190565b60008261424c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561428c578160001904821115614272576142726143d3565b8085161561427f57918102915b93841c9390800290614256565b509250929050565b600061101a83836000826142aa57506001610dbe565b816142b757506000610dbe565b81600181146142cd57600281146142d7576142f3565b6001915050610dbe565b60ff8411156142e8576142e86143d3565b50506001821b610dbe565b5060208310610133831016604e8410600b8410161715614316575081810a610dbe565b6143208383614251565b8060001904821115614334576143346143d3565b029392505050565b6000816000190483118215151615614356576143566143d3565b500290565b60008282101561436d5761436d6143d3565b500390565b60005b8381101561438d578181015183820152602001614375565b83811115612bd15750506000910152565b600181811c908216806143b257607f821691505b602082108114156138c057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110614425576144256143e9565b5056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212206bdbd72295eff3adbc9fda4fc7eee9ac64cdbbffca574f0c7ef67591602e339764736f6c63430008040033a264697066735822122092d7a952867dba33ff6f83a064a23e9c2f885907a71b50b81d9ca181649290de64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80638fd28afc1461003b578063ae1fec9014610071575b600080fd5b61004e61004936600461028f565b610086565b604080516001600160a01b03909316835260208301919091520160405180910390f35b61008461007f366004610372565b610145565b005b600080600087878787876040516020016100a495949392919061038a565b6040516020818303038152906040528051906020012090506000604051806020016100ce90610282565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b0319848401526bffffffffffffffffffffffff193060601b166021840152603583018690526055808401919091528151808403909101815260759092019052805191012099919850909650505050505050565b6101736000826040518060200161015b90610282565b601f1982820381018352601f90910116604052610177565b5050565b600080844710156101cf5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b825161021d5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016101c6565b8383516020850187f590506001600160a01b03811661027a5760405162461bcd60e51b8152602060048201526019602482015278437265617465323a204661696c6564206f6e206465706c6f7960381b60448201526064016101c6565b949350505050565b6146af8061040d83390190565b600080600080600060a086880312156102a6578081fd5b85356001600160a01b03811681146102bc578182fd5b9450602086013567ffffffffffffffff808211156102d8578283fd5b818801915088601f8301126102eb578283fd5b8135818111156102fd576102fd6103f6565b604051601f8201601f19908116603f01168101908382118183101715610325576103256103f6565b816040528281528b602084870101111561033d578586fd5b826020860160208301379182016020019490945296999698505050506040850135946060810135946080909101359350915050565b600060208284031215610383578081fd5b5035919050565b6bffffffffffffffffffffffff198660601b16815260008551815b818110156103c257602081890181015160148684010152016103a5565b818111156103d35782601483860101525b506014920191820194909452603481019290925260548201526074019392505050565b634e487b7160e01b600052604160045260246000fdfe6080604052670de05bc096e9c00060078190556200002690670de0b6b3a7640000620001c0565b6008553480156200003657600080fd5b50604080518082018252601881527f426174746c65204c697175696c696469747920546f6b656e00000000000000006020808301918252835180850190945260038452620424c560ec1b9084015281519192916200009791600c916200011a565b508051620000ad90600d9060208401906200011a565b5050506000620000c26200011660201b60201c565b601680546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000221565b3390565b8280546200012890620001e4565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b600082821015620001df57634e487b7160e01b81526011600452602481fd5b500390565b600181811c90821680620001f957607f821691505b602082108114156200021b57634e487b7160e01b600052602260045260246000fd5b50919050565b61447e80620002316000396000f3fe608060405234801561001057600080fd5b50600436106104805760003560e01c8063747dff4211610257578063b2016bd411610146578063e78ccc39116100c3578063f6e0c8f611610087578063f6e0c8f614610b96578063fa38601d14610ba9578063fc0afb4214610bbd578063fd3705f914610bdd578063ff5958fc14610bf057600080fd5b8063e78ccc3914610b1b578063e800bd4414610b2e578063efe8639414610b4e578063f2fde38b14610b70578063f46901ed14610b8357600080fd5b8063dd62ed3e1161010a578063dd62ed3e14610a61578063dec966e914610a9a578063e1237df014610aba578063e559195414610af5578063e5cb8d8614610b0857600080fd5b8063b2016bd4146109c2578063b4f77f71146109d5578063bc0d12c514610a00578063c29bf54914610a20578063d019abba14610a4e57600080fd5b806390a4cb9b116101d45780639c8f9f23116101985780639c8f9f2314610955578063a345d92114610968578063a457c2d714610988578063a9059cbb1461099b578063b145a5b8146109ae57600080fd5b806390a4cb9b1461091557806391a1adbe1461092857806395d89b411461093157806396eb6d0b1461093957806399b675bf1461094257600080fd5b8063858e6e891161021b578063858e6e89146108be57806388c3ffb0146108d157806389ef689d146108e45780638da5cb5b146108ed5780638e569819146108f557600080fd5b8063747dff421461080f5780637a917e541461086d5780637dc0d1d014610876578063821482e21461088957806384b12427146108a957600080fd5b80633a8bcc91116103735780634ec501b2116102f05780636f4d2b67116102b45780636f4d2b67146107ab57806370a08231146107be578063715018a6146107e7578063728313c9146107ef57806373cdc9551461080257600080fd5b80634ec501b21461073f57806351c6590a1461075257806357b622e51461076557806358a01710146107785780636386c1c71461078b57600080fd5b806341744dd41161033757806341744dd4146106c35780634484cc69146106cc5780634975dc3f146106ec5780634e5b611e146107175780634e71d92d1461073757600080fd5b80633a8bcc911461064a5780633b1f18dd1461066a5780633c45e7361461068a5780633cc1f54c1461069d57806340dd37f6146106b057600080fd5b80631bd5ff2811610401578063313ce567116103c5578063313ce567146105ed57806333eca634146105fc57806335a94b7b1461061c578063395093511461062457806339bd04301461063757600080fd5b80631bd5ff28146105655780631f38f5c614610578578063221937e01461059757806323b872dd146105aa5780632bed99a3146105bd57600080fd5b80630d12872d116104485780630d12872d1461051957806311da60b41461053957806318160ddd1461054157806319f4ff2f146105495780631bd590291461055c57600080fd5b8063017e7e581461048557806305e93c60146104b557806306fdde03146104ca57806309300a33146104df578063095ea7b3146104f6575b600080fd5b601754610498906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6104c86104c3366004613bf5565b610bf8565b005b6104d2610d1b565b6040516104ac9190613fe5565b6104e860195481565b6040519081526020016104ac565b610509610504366004613ce9565b610dad565b60405190151581526020016104ac565b6104e8610527366004613d81565b60146020526000908152604090205481565b6104c8610dc4565b600b546104e8565b6104c8610557366004613d81565b610f64565b6104e860205481565b6104c8610573366004613ba9565b610f98565b601f5461058a90610100900460ff1681565b6040516104ac9190613f93565b6104e86105a5366004613d81565b610fe9565b6105096105b8366004613cae565b611021565b6105e06105cb366004613d81565b60156020526000908152604090205460ff1681565b6040516104ac9190613f80565b604051601281526020016104ac565b6104e861060a366004613d81565b60026020526000908152604090205481565b6104d26110d2565b610509610632366004613ce9565b611160565b6104c8610645366004613d12565b611197565b6104e8610658366004613d81565b600e6020526000908152604090205481565b6104e8610678366004613d81565b60066020526000908152604090205481565b6104c8610698366004613d81565b61128e565b6104c86106ab366004613d81565b61136a565b6104e86106be366004613d81565b6113ee565b6104e860185481565b6104e86106da366004613d81565b60106020526000908152604090205481565b6104e86106fa366004613db1565b600360209081526000928352604080842090915290825290205481565b6104e8610725366004613d81565b60116020526000908152604090205481565b6104c86113fc565b6104e861074d366004613d81565b611491565b6104c8610760366004613d81565b61149f565b6104c8610773366004613d81565b61150b565b6104e8610786366004613d81565b6115e7565b61079e610799366004613ba9565b61161f565b6040516104ac9190614189565b6104e86107b9366004613d81565b61164f565b6104e86107cc366004613ba9565b6001600160a01b031660009081526009602052604090205490565b6104c861167d565b6104c86107fd366004613d81565b6116f6565b601f546105e09060ff1681565b61081761178b565b6040516104ac9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6104e860215481565b602754610498906001600160a01b031681565b6104e8610897366004613d81565b60046020526000908152604090205481565b6108b16117a3565b6040516104ac9190614111565b6104e86108cc366004613d81565b611969565b6108176108df366004613d81565b611977565b6104e860265481565b610498611a01565b6104e8610903366004613d81565b60056020526000908152604090205481565b6104e8610923366004613d81565b611a10565b6104e860225481565b6104d2611a31565b6104e860255481565b6104e8610950366004613d81565b611a40565b6104c8610963366004613d81565b611a4e565b6104e8610976366004613d81565b600f6020526000908152604090205481565b610509610996366004613ce9565b611a76565b6105096109a9366004613ce9565b611b11565b60275461050990600160a81b900460ff1681565b601c54610498906001600160a01b031681565b6104e86109e3366004613db1565b600160209081526000928352604080842090915290825290205481565b6104e8610a0e366004613d81565b60136020526000908152604090205481565b610a33610a2e366004613d81565b611b1e565b604080519384526020840192909252908201526060016104ac565b610a33610a5c366004613dd3565b611b3d565b6104e8610a6f366004613bc3565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b6104e8610aa8366004613d81565b60006020819052908152604090205481565b610acd610ac8366004613dd3565b611c16565b604080519586526020860194909452928401919091526060830152608082015260a0016104ac565b610acd610b03366004613d81565b611d2c565b6104e8610b16366004613d81565b611d52565b6104e8610b29366004613d81565b611d81565b6104e8610b3c366004613d81565b60126020526000908152604090205481565b610b61610b5c366004613ba9565b611db2565b6040516104ac939291906141f8565b6104c8610b7e366004613ba9565b611e9a565b6104c8610b91366004613ba9565b611f8a565b6104c8610ba4366004613d81565b611fdb565b60275461050990600160a01b900460ff1681565b6104e8610bcb366004613ba9565b60236020526000908152604090205481565b601b54610498906001600160a01b031681565b6104d2612006565b602754600160a01b900460ff1615610c3f5760405162461bcd60e51b81526020600482015260056024820152640696e6974360dc1b60448201526064015b60405180910390fd5b6027805460ff60a01b1916600160a01b179055601c80546001600160a01b03808a166001600160a01b031992831617909255601b8054928916929091169190911790558451610c9590601d906020880190613a35565b508351610ca990601e906020870190613a35565b50601f805484919060ff19166001836002811115610cd757634e487b7160e01b600052602160045260246000fd5b0217905550601f805483919061ff001916610100836003811115610d0b57634e487b7160e01b600052602160045260246000fd5b0217905550602055505050505050565b6060600c8054610d2a9061439e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d569061439e565b8015610da35780601f10610d7857610100808354040283529160200191610da3565b820191906000526020600020905b815481529060010190602001808311610d8657829003601f168201915b5050505050905090565b6000610dba338484612013565b5060015b92915050565b601954600090815260116020526040902054421015610e115760405162461bcd60e51b8152602060048201526009602482015268746f6f206561726c7960b81b6044820152606401610c36565b60195460009081526015602052604081205460ff166002811115610e4557634e487b7160e01b600052602160045260246000fd5b14610e7c5760405162461bcd60e51b81526020600482015260076024820152661cd95d1d1b195960ca1b6044820152606401610c36565b6027546019546000908152601160205260408082205490516359fb1e3d60e11b815291926001600160a01b03169163b3f63c7a91610ec091601e9190600401613ff8565b60206040518083038186803b158015610ed857600080fd5b505afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f109190613d99565b905080610f2f5760405162461bcd60e51b8152600401610c3690614049565b6019546000908152600f60205260409020819055610f4b612138565b6000610f556123a1565b9050610f60816124ac565b5050565b33610f6d611a01565b6001600160a01b031614610f935760405162461bcd60e51b8152600401610c369061406e565b601855565b33610fa1611a01565b6001600160a01b031614610fc75760405162461bcd60e51b8152600401610c369061406e565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602090815260408083203084528252808320548484526004909252822054829161101a919061274c565b9392505050565b600061102e84848461276e565b6001600160a01b0384166000908152600a60209081526040808320338452909152902054828110156110b35760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c36565b6110c785336110c2868561435b565b612013565b506001949350505050565b601e80546110df9061439e565b80601f016020809104026020016040519081016040528092919081815260200182805461110b9061439e565b80156111585780601f1061112d57610100808354040283529160200191611158565b820191906000526020600020905b81548152906001019060200180831161113b57829003601f168201915b505050505081565b336000818152600a602090815260408083206001600160a01b03871684529091528120549091610dba9185906110c2908690614219565b6019546001600160a01b038616600090815260246020526040902086916111be9190612934565b6111e8576019546001600160a01b03821660009081526024602052604090206111e69161294c565b505b602754600160a81b900460ff161561122b5760405162461bcd60e51b8152600401610c36906020808252600490820152631a5b9a5d60e21b604082015260600190565b60278054600161ff0160a01b0319166001600160a01b03841617600160a81b17905560218490556022839055611260856124ac565b6019546001600160a01b0387166000908152602360205260409020556112868686612958565b505050505050565b33600090815260236020526040902054156112ab576112ab6113fc565b60195433600081815260246020526040902090916112c99190612934565b6112f3576019546001600160a01b03821660009081526024602052604090206112f19161294c565b505b600061130a60185484612a2590919063ffffffff16565b9050611323601954828561131e919061435b565b612a47565b6113463330611332848761435b565b601c546001600160a01b0316929190612b66565b601754601c54611365916001600160a01b039182169133911684612b66565b505050565b3360009081526023602052604090205415611387576113876113fc565b600061139560195483612bd7565b905060006113ae60185483612a2590919063ffffffff16565b90506113d1336113be838561435b565b601c546001600160a01b03169190612c2e565b601754601c54611365916001600160a01b03918216911683612c2e565b6000610dbe60195483612c5e565b60008061140833611db2565b925050915080600014156114525760405162461bcd60e51b815260206004820152601160248201527073706561722f736869656c64207a65726f60781b6044820152606401610c36565b61145d823383612c98565b611468823383612d34565b33600081815260236020526040812055601c54610f60916001600160a01b039091169083612c2e565b6000610dbe60195483612dc3565b60195433600081815260246020526040902090916114bd9190612934565b6114e7576019546001600160a01b03821660009081526024602052604090206114e59161294c565b505b6114f360195483612df5565b601c54610f60906001600160a01b0316333085612b66565b60265433600090815260096020526040902054101561155c5760405162461bcd60e51b815260206004820152600d60248201526c06e6f7420656e6f756768206c7609c1b6044820152606401610c36565b670de0b6b3a764000081106115835760405162461bcd60e51b8152600401610c3690614049565b602181905561159a81670de0b6b3a764000061435b565b60228190556021546040805133815260208101929092528101919091527ff6b8a92f9bdaf1c98998652be215c78364778cd8decd80347d680b38b0a09bbc9060600160405180910390a150565b600081815260056020908152604080832054600483528184205460069093529083205490916116159161435b565b610dbe919061435b565b61164a6040518060800160405280606081526020016060815260200160608152602001600081525090565b919050565b600081815260016020908152604080832030845282528083205484845291839052822054610dbe919061435b565b33611686611a01565b6001600160a01b0316146116ac5760405162461bcd60e51b8152600401610c369061406e565b6016546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601680546001600160a01b0319169055565b3360009081526023602052604090205415611713576117136113fc565b60195433600081815260246020526040902090916117319190612934565b61175b576019546001600160a01b03821660009081526024602052604090206117599161294c565b505b600061177260185484612a2590919063ffffffff16565b90506113236019548285611786919061435b565b612e4e565b611793613ab9565b61179e601954611977565b905090565b6117d36040805160a081018252606080825260208201529081016000815260200160008152602001600081525090565b6040518060a00160405280601d80546117eb9061439e565b80601f01602080910402602001604051908101604052809291908181526020018280546118179061439e565b80156118645780601f1061183957610100808354040283529160200191611864565b820191906000526020600020905b81548152906001019060200180831161184757829003601f168201915b50505050508152602001601e805461187b9061439e565b80601f01602080910402602001604051908101604052809291908181526020018280546118a79061439e565b80156118f45780601f106118c9576101008083540402835291602001916118f4565b820191906000526020600020905b8154815290600101906020018083116118d757829003601f168201915b5050509183525050601f5460209091019060ff16600281111561192757634e487b7160e01b600052602160045260246000fd5b8152602001601f60019054906101000a900460ff16600381111561195b57634e487b7160e01b600052602160045260246000fd5b815260208054910152919050565b6000610dbe60195483612f2b565b61197f613ab9565b6040518060e0016040528061199384610fe9565b81526020016119a184611d81565b815260008481526012602090815260408083205482850152868352601382528083205481850152868352601482528083205460608501528683526010825280832054608085015295825260119052939093205460a0909301929092525090565b6016546001600160a01b031690565b601a8181548110611a2057600080fd5b600091825260209091200154905081565b6060600d8054610d2a9061439e565b6000610dbe60195483612f58565b6000611a5c60195483612f85565b601c54909150610f60906001600160a01b03163383612c2e565b336000908152600a602090815260408083206001600160a01b038616845290915281205482811015611af85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c36565b611b0733856110c2868561435b565b5060019392505050565b6000610dba33848461276e565b6000806000611b2f60195485611b3d565b9250925092505b9193909250565b600080600080611b4c8661164f565b90506000611b5987611d52565b90506000818311611b6a5781611b6c565b825b9050611ba6611b7a600b5490565b60008a815260066020526040902054611ba0908a90611b9a90869061435b565b90612a25565b9061274c565b9550611bd8611bb4600b5490565b60008a8152600160209081526040808320308452909152902054611ba0908a612a25565b9450611c0a611be6600b5490565b60008a8152600360209081526040808320308452909152902054611ba0908a612a25565b93505050509250925092565b600082815260056020908152604080832054600490925282205482918291829182918291611c4391614219565b600089815260046020526040902054909150611c65908290611ba0908a612a25565b600089815260056020526040902054909650611c87908290611ba0908a612a25565b6000898152600160209081526040808320308452909152902054909550611cb4908290611ba0908a612a25565b6000898152600360209081526040808320308452909152902054909450611ce1908290611ba0908a612a25565b9250611cec600b5490565b611cf857869150611d21565b600088815260066020526040902054611d1e90611ba0611d17600b5490565b8a90612a25565b91505b509295509295909350565b6000806000806000611d4060195487611c16565b939a9299509097509550909350915050565b60008181526003602090815260408083203084528252808320548484526002909252822054610dbe919061435b565b60008181526003602090815260408083203084528252808320548484526005909252822054829161101a919061274c565b6001600160a01b0381166000908152602360209081526040808320548084526015909252822054909160ff909116908215801590611df1575060195483105b15611b36576001826002811115611e1857634e487b7160e01b600052602160045260246000fd5b1415611e47575060008281526001602090815260408083206001600160a01b0387168452909152902054611b36565b6002826002811115611e6957634e487b7160e01b600052602160045260246000fd5b1415611b36575060008281526003602090815260408083206001600160a01b03871684529091529020549193909250565b33611ea3611a01565b6001600160a01b031614611ec95760405162461bcd60e51b8152600401610c369061406e565b6001600160a01b038116611f2e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c36565b6016546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601680546001600160a01b0319166001600160a01b0392909216919091179055565b33611f93611a01565b6001600160a01b031614611fb95760405162461bcd60e51b8152600401610c369061406e565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526023602052604090205415611ff857611ff86113fc565b60006113956019548361306f565b601d80546110df9061439e565b6001600160a01b0383166120755760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c36565b6001600160a01b0382166120d65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c36565b6001600160a01b038381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000601f54610100900460ff16600381111561216457634e487b7160e01b600052602160045260246000fd5b14156121fe57601954600090815260136020908152604080832054600f909252909120541015806121b15750601954600090815260146020908152604080832054600f9092529091205411155b156121db57601954600090815260156020526040902080546001919060ff191682805b0217905550565b601954600090815260156020526040902080546002919060ff19166001836121d4565b6001601f54610100900460ff16600381111561222a57634e487b7160e01b600052602160045260246000fd5b141561227557601954600090815260136020908152604080832054600f90925290912054106121db57601954600090815260156020526040902080546001919060ff191682806121d4565b6002601f54610100900460ff1660038111156122a157634e487b7160e01b600052602160045260246000fd5b14156122ec57601954600090815260146020908152604080832054600f90925290912054106121db57601954600090815260156020526040902080546001919060ff191682806121d4565b6003601f54610100900460ff16600381111561231857634e487b7160e01b600052602160045260246000fd5b141561236357601954600090815260126020908152604080832054600f90925290912054106121db57601954600090815260156020526040902080546001919060ff191682806121d4565b60405162461bcd60e51b8152602060048201526013602482015272756e6b6e6f776e20736574746c65207479706560681b6044820152606401610c36565b6000600160195460009081526015602052604090205460ff1660028111156123d957634e487b7160e01b600052602160045260246000fd5b1415612405576019546000908152602081815260408083205460069092529091205461179e919061435b565b600260195460009081526015602052604090205460ff16600281111561243b57634e487b7160e01b600052602160045260246000fd5b14156124695760195460009081526002602090815260408083205460069092529091205461179e919061435b565b60405162461bcd60e51b81526020600482015260186024820152771b9bdd0818dbdc9c9958dd081c9bdd5b99081c995cdd5b1d60421b6044820152606401610c36565b602754601f5460009182916001600160a01b039091169063962657959060ff1660028111156124eb57634e487b7160e01b600052602160045260246000fd5b6040518263ffffffff1660e01b815260040161250991815260200190565b604080518083038186803b15801561252057600080fd5b505afa158015612534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125589190613df4565b6019829055601a805460018101825560009182527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e01839055602754601f54939550919350918291829182916001600160a01b03169063d39f696490601e9060ff1660028111156125d957634e487b7160e01b600052602160045260246000fd5b601f54610100900460ff16600381111561260357634e487b7160e01b600052602160045260246000fd5b6020546040518563ffffffff1660e01b8152600401612625949392919061401a565b60806040518083038186803b15801561263d57600080fd5b505afa158015612651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126759190613e17565b935093509350935061268a60195430896130bc565b612697601954308961314b565b6126b76019546126b289602154612a2590919063ffffffff16565b6131da565b6126d76019546126d289602254612a2590919063ffffffff16565b613224565b601980546000908152600e6020908152604080832097909755825482526010815286822098909855815481526011885285812096909655805486526012875284862093909355825485526013865283852091909155815484526014855282842055548252601590925220805460ff1916905550565b600061101a826127686127616012600a614294565b8690613242565b9061324e565b6001600160a01b0383166127d25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c36565b6001600160a01b0382166128345760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c36565b6001600160a01b038316600090815260096020526040902054818110156128ac5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c36565b6128b6828261435b565b6001600160a01b0380861660009081526009602052604080822093909355908516815290812080548492906128ec908490614219565b92505081905550826001600160a01b0316846001600160a01b03166000805160206144298339815191528460405161292691815260200190565b60405180910390a350505050565b6000818152600183016020526040812054151561101a565b600061101a838361325a565b6001600160a01b0382166129ae5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c36565b80600b60008282546129c09190614219565b90915550506001600160a01b038216600090815260096020526040812080548392906129ed908490614219565b90915550506040518181526001600160a01b038316906000906000805160206144298339815191529060200160405180910390a35050565b6000612a336012600a614294565b612a3d8484613242565b61101a9190614231565b6000612a538383612f2b565b60008481526001602090815260408083203080855290835281842054888552600384528285209185529252909120546007549293509091612ab0612a97858561435b565b600088815260046020526040902054611ba09088614219565b10612b2657612ae085612ace84600754612a2590919063ffffffff16565b60009182526004602052604090912055565b612aea85856132a9565b612af6853033866132c7565b612b2185612b0f83600854612a2590919063ffffffff16565b60009182526005602052604090912055565b612b5f565b612b3085856131da565b612b3c853033866132c7565b612b5f85612b0f83612b4d89610fe9565b611b9a90670de0b6b3a764000061435b565b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612bd19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526133c6565b50505050565b6000612be38383612c5e565b6000848152600160209081526040808320308452909152902054909150612c0a8483613498565b612c16843330866134d9565b612c2784612ace83612b4d88611d81565b5092915050565b6040516001600160a01b03831660248201526044810182905261136590849063a9059cbb60e01b90606401612b9a565b60008281526003602090815260408083203084528252808320548584526005909252822054612c9090849083906135ca565b949350505050565b60008381526001602090815260408083206001600160a01b038616845290915281208054839290612cca90849061435b565b909155505060008381526020819052604081208054839290612ced90849061435b565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca90612d279060009085908590613fc6565b60405180910390a1505050565b60008381526003602090815260408083206001600160a01b038616845290915281208054839290612d6690849061435b565b909155505060008381526002602052604081208054839290612d8990849061435b565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca90612d279060019085908590613fc6565b60008281526001602090815260408083203084528252808320548584526004909252822054612c9090849083906135ca565b6000806000806000612e078787611c16565b94509450945094509450612e1b87866131da565b612e258785613224565b612e308733856130bc565b612e3b87338461314b565b612e453382612958565b50505050505050565b6000612e5a8383612f58565b60008481526001602090815260408083203080855290835281842054888552600384528285209185529252909120546007549293509091612eb7612e9e858461435b565b600088815260056020526040902054611ba09088614219565b10612f0457612ed585612b0f83600754612a2590919063ffffffff16565b612edf85856132a9565b612eeb853033866134d9565b612b2185612ace84600854612a2590919063ffffffff16565b612f0e8585613224565b612f1a853033866134d9565b612b5f85612ace83612b4d89611d81565b6000828152600460209081526040808320546001835281842030855290925282205461101a9184916135fb565b6000828152600560209081526040808320546003835281842030855290925282205461101a9184916135fb565b600080600080612f958686611b3d565b600089815260066020908152604080832054600490925282205494975092955090935091612fc99190611ba0908790612a25565b60008881526006602090815260408083205460059092528220549293509091612ff89190611ba0908890612a25565b6000898152600660205260408120549192509061302290611ba061301b8c6115e7565b8990612a25565b905061302e89846136dd565b6130388983613498565b61304289826136fb565b61304d893087612c98565b613058893086612d34565b6130623389613719565b5093979650505050505050565b60008281526003602090815260408083203084529091528120546130938484612dc3565b915061309f84836136dd565b6130ab843330866132c7565b612c2784612b0f83612b4d88610fe9565b60008381526001602090815260408083206001600160a01b0386168452909152812080548392906130ee908490614219565b909155505060008381526020819052604081208054839290613111908490614219565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f690612d279060009085908590613fc6565b60008381526003602090815260408083206001600160a01b03861684529091528120805483929061317d908490614219565b9091555050600083815260026020526040812080548392906131a0908490614219565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f690612d279060019085908590613fc6565b600082815260046020526040812080548392906131f8908490614219565b90915550506000828152600660205260408120805483929061321b908490614219565b90915550505050565b600082815260056020526040812080548392906131f8908490614219565b600061101a828461433c565b600061101a8284614231565b60008181526001830160205260408120546132a157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dbe565b506000610dbe565b6000828152600660205260408120805483929061321b908490614219565b6001600160a01b0383166132ed5760405162461bcd60e51b8152600401610c36906140a3565b6001600160a01b0382166133135760405162461bcd60e51b8152600401610c36906140da565b60008481526001602090815260408083206001600160a01b03871684529091528120805483929061334590849061435b565b909155505060008481526001602090815260408083206001600160a01b03861684529091528120805483929061337c908490614219565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b0906133b890600090869086908690613fa1565b60405180910390a150505050565b600061341b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138569092919063ffffffff16565b80519091501561136557808060200190518101906134399190613d61565b6113655760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c36565b600082815260056020526040812080548392906134b690849061435b565b90915550506000828152600660205260408120805483929061321b90849061435b565b6001600160a01b0383166134ff5760405162461bcd60e51b8152600401610c36906140a3565b6001600160a01b0382166135255760405162461bcd60e51b8152600401610c36906140da565b60008481526003602090815260408083206001600160a01b03871684529091528120805483929061355790849061435b565b909155505060008481526003602090815260408083206001600160a01b03861684529091528120805483929061358e908490614219565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b0906133b890600190869086908690613fa1565b6000806135d7858461433c565b905060006135e58686614219565b90506135f18183614231565b9695505050505050565b6000670de05bc096e9c000613610848461274c565b1061361c57508261101a565b60006136426136336127106127688661270f613242565b61363d908661433c565b613865565b9050600061366561365b61270f61276887612710613242565b61363d908761433c565b9050816136728688614219565b11156136ac57848287613685848861435b565b61368f9190614219565b613699919061435b565b6136a39190614219565b9250505061101a565b60006136b8878661433c565b905060006136c68888614219565b90506136d28183614231565b94505050505061101a565b600082815260046020526040812080548392906134b690849061435b565b6000828152600660205260408120805483929061321b90849061435b565b6001600160a01b0382166137795760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c36565b6001600160a01b038216600090815260096020526040902054818110156137ed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c36565b6137f7828261435b565b6001600160a01b038416600090815260096020526040812091909155600b805484929061382590849061435b565b90915550506040518281526000906001600160a01b038516906000805160206144298339815191529060200161212b565b6060612c9084846000856138d4565b600060038211156138c6575080600061387f600283614231565b61388a906001614219565b90505b818110156138c0579050806002816138a58186614231565b6138af9190614219565b6138b99190614231565b905061388d565b50919050565b811561164a57506001919050565b6060824710156139355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c36565b843b6139835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c36565b600080866001600160a01b0316858760405161399f9190613f64565b60006040518083038185875af1925050503d80600081146139dc576040519150601f19603f3d011682016040523d82523d6000602084013e6139e1565b606091505b50915091506139f18282866139fc565b979650505050505050565b60608315613a0b57508161101a565b825115613a1b5782518084602001fd5b8160405162461bcd60e51b8152600401610c369190613fe5565b828054613a419061439e565b90600052602060002090601f016020900481019282613a635760008555613aa9565b82601f10613a7c57805160ff1916838001178555613aa9565b82800160010185558215613aa9579182015b82811115613aa9578251825591602001919060010190613a8e565b50613ab5929150613af6565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613ab55760008155600101613af7565b80356001600160a01b038116811461164a57600080fd5b600082601f830112613b32578081fd5b813567ffffffffffffffff80821115613b4d57613b4d6143ff565b604051601f8301601f19908116603f01168101908282118183101715613b7557613b756143ff565b81604052838152866020858801011115613b8d578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215613bba578081fd5b61101a82613b0b565b60008060408385031215613bd5578081fd5b613bde83613b0b565b9150613bec60208401613b0b565b90509250929050565b600080600080600080600060e0888a031215613c0f578283fd5b613c1888613b0b565b9650613c2660208901613b0b565b9550604088013567ffffffffffffffff80821115613c42578485fd5b613c4e8b838c01613b22565b965060608a0135915080821115613c63578485fd5b50613c708a828b01613b22565b945050608088013560038110613c84578384fd5b925060a088013560048110613c97578283fd5b8092505060c0880135905092959891949750929550565b600080600060608486031215613cc2578283fd5b613ccb84613b0b565b9250613cd960208501613b0b565b9150604084013590509250925092565b60008060408385031215613cfb578182fd5b613d0483613b0b565b946020939093013593505050565b600080600080600060a08688031215613d29578081fd5b613d3286613b0b565b9450602086013593506040860135925060608601359150613d5560808701613b0b565b90509295509295909350565b600060208284031215613d72578081fd5b8151801515811461101a578182fd5b600060208284031215613d92578081fd5b5035919050565b600060208284031215613daa578081fd5b5051919050565b60008060408385031215613dc3578182fd5b82359150613bec60208401613b0b565b60008060408385031215613de5578182fd5b50508035926020909101359150565b60008060408385031215613e06578182fd5b505080516020909101519092909150565b60008060008060808587031215613e2c578384fd5b505082516020840151604085015160609095015191969095509092509050565b6000815180845260208085019450808401835b83811015613e7b57815187529582019590820190600101613e5f565b509495945050505050565b60048110613e9657613e966143e9565b9052565b60008151808452613eb2816020860160208601614372565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680613ee057607f831692505b6020808410821415613f0057634e487b7160e01b86526022600452602486fd5b83885260208801828015613f1b5760018114613f2c57613f57565b60ff19871682528282019750613f57565b60008981526020902060005b87811015613f5157815484820152908601908401613f38565b83019850505b5050505050505092915050565b60008251613f76818460208701614372565b9190910192915050565b60208101613f8d83614415565b91905290565b60208101610dbe8284613e86565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b9283526001600160a01b03919091166020830152604082015260600190565b60208152600061101a6020830184613e9a565b60408152600061400b6040830185613ec6565b90508260208301529392505050565b60808152600061402d6080830187613ec6565b6020830195909552506040810192909252606090910152919050565b6020808252600b908201526a383934b1b29032b93937b960a91b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f66726f6d2073686f756c64206e6f742062652061646472657373283029000000604082015260600190565b6020808252601b908201527f746f2073686f756c64206e6f7420626520616464726573732830290000000000604082015260600190565b602081526000825160a0602084015261412d60c0840182613e9a565b90506020840151601f1984830301604085015261414a8282613e9a565b915050604084015161415b81614415565b8060608501525060608401516141746080850182613e86565b50608084015160a08401528091505092915050565b6020815260008251608060208401526141a560a0840182613e4c565b90506020840151601f19808584030160408601526141c38383613e4c565b92506040860151915080858403016060860152506141e18282613e4c565b915050606084015160808401528091505092915050565b8381526060810161420884614415565b602082019390935260400152919050565b6000821982111561422c5761422c6143d3565b500190565b60008261424c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561428c578160001904821115614272576142726143d3565b8085161561427f57918102915b93841c9390800290614256565b509250929050565b600061101a83836000826142aa57506001610dbe565b816142b757506000610dbe565b81600181146142cd57600281146142d7576142f3565b6001915050610dbe565b60ff8411156142e8576142e86143d3565b50506001821b610dbe565b5060208310610133831016604e8410600b8410161715614316575081810a610dbe565b6143208383614251565b8060001904821115614334576143346143d3565b029392505050565b6000816000190483118215151615614356576143566143d3565b500290565b60008282101561436d5761436d6143d3565b500390565b60005b8381101561438d578181015183820152602001614375565b83811115612bd15750506000910152565b600181811c908216806143b257607f821691505b602082108114156138c057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110614425576144256143e9565b5056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212206bdbd72295eff3adbc9fda4fc7eee9ac64cdbbffca574f0c7ef67591602e339764736f6c63430008040033a264697066735822122092d7a952867dba33ff6f83a064a23e9c2f885907a71b50b81d9ca181649290de64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}