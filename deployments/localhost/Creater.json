{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "createBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_trackName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_peroidType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settleType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settleValue",
          "type": "uint256"
        }
      ],
      "name": "getBattleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00524f4ad119ff7b2e14eec3e55c6627261eecb67c1cc4061a7a2c6ccb485627",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4577806",
    "logsBloom": "0x
    "blockHash": "0x057a421dc12c823831a1d17b2ccaf4feca736238c0f7d4c9990188ab2cea84e9",
    "transactionHash": "0x00524f4ad119ff7b2e14eec3e55c6627261eecb67c1cc4061a7a2c6ccb485627",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "4577806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "01a9835b1e8366a37cd227b8895365de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_trackName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_peroidType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleValue\",\"type\":\"uint256\"}],\"name\":\"getBattleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Creater.sol\":\"Creater\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xf35335925904418fa03f87f35feddc196c7fd2b4d6397a1c45c427085cee3707\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BattleReady.sol\\\";\\nimport \\\"./interfaces/IArena.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./structs/SettleType.sol\\\";\\nimport \\\"./structs/PeroidType.sol\\\";\\nimport \\\"./structs/RoundResult.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./structs/RoundInfo.sol\\\";\\nimport \\\"./structs/BattleInfo.sol\\\";\\nimport \\\"./structs/UserInfo.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./lib/DMath.sol\\\";\\n\\ncontract Battle is BattleReady, Ownable {\\n    using SafeDecimalMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    address public feeTo;\\n    uint public feeRatio;\\n\\n    uint256 public cri;\\n    uint256[] public roundIds;\\n\\n\\n    IArena public arena;\\n    IERC20 public collateralToken;\\n\\n    string public underlying;\\n\\n    PeroidType public peroidType;\\n    SettleType public settleType;\\n    uint256 public settleValue;\\n\\n    uint256 public spearStartPrice;\\n    uint256 public shieldStartPrice;\\n\\n    mapping(address => uint256) public enterRoundId;\\n    mapping(address => EnumerableSet.UintSet) internal userRoundIds;\\n\\n    uint public nextRoundSpearPrice;\\n    uint public preLPAmount;\\n\\n    IOracle public oracle;\\n    bool public isInit0;\\n    bool public isInit;\\n\\n    mapping(uint=>mapping(address=>uint)) public removeAppointment;\\n    mapping(uint=>uint) public totalRemoveAppointment;\\n    mapping(uint=>uint) public aCols; // appointmentCollateral\\n    // mapping(address=>uint[]) public userAppoint;\\n    mapping(address => EnumerableSet.UintSet) internal userAppoint;\\n\\n    function init0(\\n        address _collateral,\\n        address _arena,\\n        string memory _underlying,\\n        PeroidType _peroidType,\\n        SettleType _settleType,\\n        uint256 _settleValue\\n    ) public {\\n        require(isInit0 == false, \\\"init0\\\");\\n        isInit0 = true;\\n        collateralToken = IERC20(_collateral);\\n        arena = IArena(_arena);\\n        underlying = _underlying;\\n        peroidType = _peroidType;\\n        settleType = _settleType;\\n        settleValue = _settleValue;\\n    }\\n\\n    function init(\\n        address creater,\\n        uint256 cAmount,\\n        uint256 _spearPrice,\\n        uint256 _shieldPrice,\\n        address _oracle\\n    ) public addUserRoundId(creater) {\\n        require(isInit==false, \\\"init\\\");\\n        oracle = IOracle(_oracle);\\n        isInit = true;\\n        spearStartPrice = _spearPrice;\\n        shieldStartPrice = _shieldPrice;\\n        initNewRound(cAmount);\\n        enterRoundId[creater] = cri;\\n        _mint(creater, cAmount);\\n    }\\n\\n    function roundIdsLen() external view returns(uint l) {\\n        l = roundIds.length;\\n    } \\n\\n    function setArena(address _arena) public onlyOwner {\\n        arena = IArena(_arena);\\n    }\\n\\n    function setFeeTo(address _feeTo) public onlyOwner {\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeRatio(uint _feeRatio) public onlyOwner {\\n        feeRatio = _feeRatio;\\n    }\\n\\n    function setNextRoundSpearPrice(uint price) public {\\n        require(balanceOf(msg.sender) >= preLPAmount, \\\"not enough lp\\\");\\n        require(price < 1e18, \\\"price error\\\");\\n        spearStartPrice = price;\\n        shieldStartPrice = 1e18 - price;\\n        emit SetVPrice(msg.sender, spearStartPrice, shieldStartPrice);\\n    }\\n\\n    function tryBuySpear(uint cDeltaAmount) public view returns(uint) {\\n        return tryBuySpear(cri, cDeltaAmount);\\n    }\\n\\n    function buySpear(uint256 cDeltaAmount) public handleHistoryVirtual addUserRoundId(msg.sender){\\n        uint fee = cDeltaAmount.multiplyDecimal(feeRatio);\\n        buySpear(cri, cDeltaAmount-fee);\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            cDeltaAmount-fee\\n        );\\n        collateralToken.safeTransferFrom(msg.sender, feeTo, fee);\\n    }\\n\\n    function trySellSpear(uint vDeltaAmount) public view returns(uint) {\\n        return trySellSpear(cri, vDeltaAmount);\\n    }\\n\\n    function sellSpear(uint256 vDeltaAmount) public handleHistoryVirtual{\\n        uint256 out = sellSpear(cri, vDeltaAmount);\\n        uint fee = out.multiplyDecimal(feeRatio);\\n        collateralToken.safeTransfer(msg.sender, out-fee);\\n        collateralToken.safeTransfer(feeTo, fee);\\n    }\\n    function tryBuyShield(uint cDeltaAmount) public view returns(uint){\\n        return tryBuyShield(cri, cDeltaAmount);\\n    }\\n\\n    function buyShield(uint cDeltaAmount) public handleHistoryVirtual addUserRoundId(msg.sender) {\\n        uint fee = cDeltaAmount.multiplyDecimal(feeRatio);\\n        buyShield(cri, cDeltaAmount-fee);\\n        collateralToken.safeTransferFrom(msg.sender, address(this), cDeltaAmount-fee); \\n        collateralToken.safeTransferFrom(msg.sender, feeTo, fee);\\n    }\\n\\n    function trySellShield(uint vDeltaAmount) public view returns(uint) {\\n        return trySellShield(cri, vDeltaAmount);\\n    }\\n\\n    function sellShield(uint vDeltaAmount) public handleHistoryVirtual {\\n        uint out = sellShield(cri, vDeltaAmount);\\n        uint fee = out.multiplyDecimal(feeRatio);\\n        collateralToken.safeTransfer(msg.sender, out-fee);\\n        collateralToken.safeTransfer(feeTo, fee);\\n    }\\n\\n    function tryAddLiquidity(uint cDeltaAmount) public view returns(uint cDeltaSpear, uint cDeltaShield, uint deltaSpear, uint deltaShield, uint lpDelta) {\\n        return tryAddLiquidity(cri, cDeltaAmount);\\n    }\\n\\n    function addLiquidity(uint256 cDeltaAmount) public addUserRoundId(msg.sender){\\n        addLiquidity(cri, cDeltaAmount);\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            cDeltaAmount\\n        );\\n    }\\n\\n    function tryRemoveLiquidity(uint lpDeltaAmount) public view returns(uint cDelta, uint deltaSpear, uint deltaShield) {\\n        return tryRemoveLiquidity(cri, lpDeltaAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lpDeltaAmount) public {\\n        uint256 cDelta = removeLiquidity(cri, lpDeltaAmount);\\n        collateralToken.safeTransfer(msg.sender, cDelta);\\n    }\\n\\n    function removeLiquidityFuture(uint256 lpDeltaAmount) external {\\n        uint bal = balanceOf(msg.sender);\\n        require(bal >= lpDeltaAmount, \\\"Not Enough LP\\\");\\n        // (uint start, ) = oracle.getNextRoundTS(uint(peroidType));\\n        removeAppointment[cri][msg.sender] += bal;\\n        totalRemoveAppointment[cri] += bal;\\n        if (!userAppoint[msg.sender].contains(cri)) {\\n            userAppoint[msg.sender].add(cri);\\n        }\\n        transferFrom(msg.sender, address(this), lpDeltaAmount);\\n    }\\n\\n    function withdrawLiquidityHistory() public {\\n        uint totalC;\\n        uint len = userAppoint[msg.sender].length(); \\n        require( len != 0, \\\"Not Appointment\\\");\\n        for (uint i; i < len; i++) {\\n            uint ri = userAppoint[msg.sender].at(i);\\n            totalC += aCols[ri].multiplyDecimal(removeAppointment[ri][msg.sender]).divideDecimal(totalRemoveAppointment[ri]);\\n        }\\n        collateralToken.safeTransfer(msg.sender, totalC);\\n    }\\n\\n    function settle() public {\\n        require(block.timestamp >= endTS[cri], \\\"too early\\\");\\n        require(roundResult[cri] == RoundResult.Non, \\\"settled\\\");\\n        uint256 price = oracle.historyPrice(underlying, endTS[cri]);\\n        require(price != 0, \\\"price error\\\");\\n        endPrice[cri] = price;\\n        updateRoundResult();\\n        // handle collateral\\n        (uint256 cRemain, uint aCol) = getCRemain();\\n        _burn(address(this), totalRemoveAppointment[cri]);\\n        aCols[cri] = aCol;\\n        initNewRound(cRemain);\\n    }\\n\\n    // uri => userRoundId\\n    // rr => roundResult\\n    function tryClaim(address user) public view returns(uint uri, RoundResult rr, uint amount) {\\n        uri = enterRoundId[user];\\n        rr = roundResult[uri];\\n        if (uri != 0 && uri < cri) {\\n            if (rr == RoundResult.SpearWin) {\\n                amount = spearBalance[uri][user];\\n            } else if (rr == RoundResult.ShieldWin) {\\n                amount = shieldBalance[uri][user];\\n            }\\n        }\\n    }\\n\\n    function claim() public {\\n        (uint uri, , uint amount) = tryClaim(msg.sender);\\n        require(amount != 0, \\\"spear/shield zero\\\");\\n        burnSpear(uri, msg.sender, amount);\\n        burnShield(uri, msg.sender, amount);\\n        delete enterRoundId[msg.sender];\\n        collateralToken.safeTransfer(msg.sender, amount);\\n    }\\n\\n    \\n\\n    function updateRoundResult() internal {\\n        if (settleType == SettleType.TwoWay) {\\n            if (\\n                endPrice[cri] >= strikePriceOver[cri] ||\\n                endPrice[cri] <= strikePriceUnder[cri]\\n            ) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else if (settleType == SettleType.Positive) {\\n            if (endPrice[cri] >= strikePriceOver[cri]) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else if (settleType == SettleType.Negative) {\\n            if (endPrice[cri] >= strikePriceUnder[cri]) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else if (settleType == SettleType.Specific) {\\n            if (endPrice[cri] >= strikePrice[cri]) {\\n                roundResult[cri] = RoundResult.SpearWin;\\n            } else {\\n                roundResult[cri] = RoundResult.ShieldWin;\\n            }\\n        } else {\\n            revert(\\\"unknown settle type\\\");\\n        }\\n    }\\n\\n    function getCRemain() internal view returns (uint256 cRemain, uint aCol) {\\n        // (uint start, ) = oracle.getNextRoundTS(uint(peroidType));\\n        if (roundResult[cri] == RoundResult.SpearWin) {\\n            cRemain = collateral[cri] - spearSold(cri);\\n        } else if (roundResult[cri] == RoundResult.ShieldWin) {\\n            cRemain = collateral[cri] - shieldSold(cri);\\n        } else {\\n            revert(\\\"not correct round result\\\");\\n        }\\n        aCol = cRemain.multiplyDecimal(totalRemoveAppointment[cri]).divideDecimal(totalSupply());\\n        cRemain -= aCol;\\n    }\\n\\n    function initNewRound(uint256 cAmount) internal {\\n        (uint256 _startTS, uint256 _endTS) = oracle.getRoundTS(uint(peroidType));\\n        cri = _startTS;\\n        roundIds.push(_startTS);\\n        (\\n            uint256 _startPrice,\\n            uint256 _strikePrice,\\n            uint256 _strikePriceOver,\\n            uint256 _strikePriceUnder\\n        ) =\\n            oracle.getStrikePrice(\\n                underlying,\\n                uint(peroidType),\\n                uint(settleType),\\n                settleValue\\n            );\\n        mintSpear(cri, address(this), cAmount);\\n        mintShield(cri, address(this), cAmount);\\n        addCSpear(cri, spearStartPrice.multiplyDecimal(cAmount));\\n        addCShield(cri, shieldStartPrice.multiplyDecimal(cAmount));\\n        // startPrice endPrice\\n        startPrice[cri] = _startPrice;\\n        startTS[cri] = _startTS;\\n        endTS[cri] = _endTS;\\n        strikePrice[cri] = _strikePrice;\\n        strikePriceOver[cri] = _strikePriceOver;\\n        strikePriceUnder[cri] = _strikePriceUnder;\\n        roundResult[cri] = RoundResult.Non;\\n    }\\n\\n\\n    function getBattleInfo() public view returns(BattleInfo memory) {\\n        return BattleInfo({\\n            underlying: underlying ,\\n            collateral: address(collateralToken),\\n            peroidType: peroidType,\\n            settleType: settleType,\\n            settleValue: settleValue,\\n            feeRatio: feeRatio\\n        });\\n    }\\n\\n    function getCurrentRoundInfo() public view returns(RoundInfo memory) {\\n        return getRoundInfo(cri);\\n    }\\n\\n    function getRoundInfo(uint ri) public view returns(RoundInfo memory) {\\n        return RoundInfo({\\n            spearPrice: spearPrice(ri),\\n            shieldPrice: shieldPrice(ri),\\n            strikePrice: strikePrice[ri],\\n            strikePriceOver: strikePriceOver[ri],\\n            strikePriceUnder: strikePriceUnder[ri],\\n            startTS: startTS[ri],\\n            endTS: endTS[ri]\\n        });\\n    }\\n\\n    function getRoundInfoMulti(uint[] memory ris) external view returns(RoundInfo[] memory roundInfos) {\\n        for (uint i; i < ris.length; i++) {\\n            RoundInfo memory roundInfo = getRoundInfo(ris[i]);\\n            roundInfos[i] = roundInfo;\\n        }\\n    }\\n\\n    function getUserInfo(address user, uint ri) public view returns(UserInfo memory) {\\n        return UserInfo({\\n            roundId: ri,\\n            spearBalance: spearBalance[ri][user],\\n            shieldBalance: shieldBalance[ri][user]\\n        });\\n    }\\n\\n    function getUserInfoMulti(address user, uint[] memory ris) public view returns(UserInfo[] memory uis) {\\n        for (uint i; i < ris.length; i++) {\\n            UserInfo memory ui = getUserInfo(user, ris[i]); \\n            uis[i] = ui;\\n        }\\n    }\\n\\n    function getUserInfoAll(address user) public view returns(UserInfo[] memory uis) {\\n        for (uint i; i < userRoundIds[user].length(); i++ ) {\\n            UserInfo memory ui = getUserInfo(user, userRoundIds[user].at(i)); \\n            uis[i] = ui;\\n        }\\n    }\\n\\n    modifier addUserRoundId(address user) {\\n        if(!userRoundIds[user].contains(cri)) {\\n            userRoundIds[user].add(cri);\\n        }\\n        _;\\n    }\\n\\n    modifier handleHistoryVirtual() {\\n        if (enterRoundId[msg.sender] != 0) {\\n            claim();\\n        }\\n        _;\\n    }\\n\\n    event SetVPrice(address acc, uint spearPrice, uint shieldPrice);\\n\\n}\\n\",\"keccak256\":\"0x9e2acfbb5314db4cebc97d8316fc98c228dcb8475ab0943bd08e1195007a2632\",\"license\":\"MIT\"},\"contracts/BattleReady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BondingCurve.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./structs/RoundResult.sol\\\";\\n\\ncontract BattleReady is BondingCurve, ERC20 {\\n\\n    using SafeDecimalMath for uint;\\n\\n    mapping(uint=>uint) public startPrice;\\n    mapping(uint=>uint) public endPrice;\\n\\n    mapping(uint=>uint) public startTS;\\n    mapping(uint=>uint) public endTS;\\n\\n    mapping(uint=>uint) public strikePrice;\\n    mapping(uint=>uint) public strikePriceOver;\\n    mapping(uint=>uint) public strikePriceUnder;\\n\\n    mapping(uint=>RoundResult) public roundResult;\\n\\n    constructor() ERC20(\\\"Battle Liquilidity Token\\\", \\\"BLP\\\") {\\n\\n    }\\n\\n    function tryAddLiquidity(uint ri, uint cDeltaAmount) public view returns(uint cDeltaSpear, uint cDeltaShield, uint deltaSpear, uint deltaShield, uint lpDelta) {\\n        uint cVirtual = cSpear[ri] + cShield[ri];\\n        cDeltaSpear = cSpear[ri].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        cDeltaShield = cShield[ri].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        deltaSpear = spearBalance[ri][address(this)].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        deltaShield = shieldBalance[ri][address(this)].multiplyDecimal(cDeltaAmount).divideDecimal(cVirtual);\\n        if(totalSupply() == 0) {\\n            lpDelta = cDeltaAmount;\\n        } else {\\n            lpDelta = cDeltaAmount.multiplyDecimal(totalSupply()).divideDecimal(collateral[ri]);\\n        }\\n    }\\n\\n    function addLiquidity(uint ri, uint cDeltaAmount) internal {\\n        (uint cDeltaSpear, uint cDeltaShield, uint deltaSpear, uint deltaShield, uint lpDelta) = tryAddLiquidity(ri, cDeltaAmount);\\n        addCSpear(ri, cDeltaSpear);\\n        addCShield(ri, cDeltaShield);\\n        mintSpear(ri, msg.sender, deltaSpear);\\n        mintShield(ri, msg.sender, deltaShield);\\n        // mint lp\\n        _mint(msg.sender, lpDelta);\\n    }\\n\\n    function tryRemoveLiquidity(uint ri, uint lpDeltaAmount) public view returns(uint cDelta, uint deltaSpear, uint deltaShield){\\n        uint spSold = spearSold(ri);\\n        uint shSold = shieldSold(ri);\\n        uint maxSold = spSold > shSold ? spSold:shSold;\\n        cDelta = (collateral[ri] - maxSold).multiplyDecimal(lpDeltaAmount).divideDecimal(totalSupply());\\n        cDelta = cDelta.multiplyDecimal(1e18-pRatio(ri));\\n        deltaSpear = spearBalance[ri][address(this)].multiplyDecimal(lpDeltaAmount).divideDecimal(totalSupply());\\n        deltaShield = shieldBalance[ri][address(this)].multiplyDecimal(lpDeltaAmount).divideDecimal(totalSupply());\\n    }\\n\\n    function removeLiquidity(uint ri, uint lpDeltaAmount) internal returns(uint) {\\n        (uint cDelta, uint deltaSpear, uint deltaShield) = tryRemoveLiquidity(ri, lpDeltaAmount);\\n        uint cDeltaSpear = cDelta.multiplyDecimal(cSpear[ri]).divideDecimal(collateral[ri]);\\n        uint cDeltaShield = cDelta.multiplyDecimal(cShield[ri]).divideDecimal(collateral[ri]);\\n        uint cDeltaSurplus = cDelta.multiplyDecimal(cSurplus(ri)).divideDecimal(collateral[ri]);\\n        subCSpear(ri, cDeltaSpear);\\n        subCShield(ri, cDeltaShield);\\n        subCSurplus(ri, cDeltaSurplus);\\n        burnSpear(ri, address(this), deltaSpear);\\n        burnShield(ri, address(this), deltaShield);\\n        _burn(msg.sender, lpDeltaAmount);\\n        return cDelta;\\n    }\\n\\n    // penalty ratio\\n    function pRatio(uint ri) public view returns (uint){\\n        uint s = 1e18 - (endTS[ri]-block.timestamp).divideDecimal(endTS[ri]-startTS[ri]);\\n        return 1e16 * DMath.sqrt(s);\\n    }\\n\\n    function _afterAddLiquidity(uint ri, uint cDeltaAmount) internal virtual {}\\n    function _afterRemoveLiquidity(uint ri, uint lpDeltaAmount) internal virtual {}\\n\\n}\",\"keccak256\":\"0x55ac66fac6cc6ff71cf67173db63fcfc42ef97e58b77a62088915d305d4c1792\",\"license\":\"MIT\"},\"contracts/BondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VirtualToken.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./algo/Pricing.sol\\\";\\n\\ncontract BondingCurve is VirtualToken {\\n\\n    using SafeDecimalMath for uint;\\n\\n    uint maxPrice = 0.9999 * 1e18;\\n    uint minPrice = 1e18 - maxPrice;\\n\\n    function spearPrice(uint roundId) public view returns(uint) {\\n        uint spPrice = cSpear[roundId].divideDecimal(spearBalance[roundId][address(this)]);\\n        return spPrice;\\n    }\\n\\n    function shieldPrice(uint roundId) public view returns(uint) {\\n        uint shPrice = cShield[roundId].divideDecimal(shieldBalance[roundId][address(this)]);\\n        return shPrice;\\n    }\\n\\n    function buySpear(uint roundId, uint cDeltaAmount) internal {\\n        uint out = tryBuySpear(roundId, cDeltaAmount);\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        if ((cDeltaAmount + cSpear[roundId]).divideDecimal(spearInContract-out) >= maxPrice) {\\n            setCSpear(roundId, maxPrice.multiplyDecimal(spearInContract));\\n            addCollateral(roundId, cDeltaAmount);\\n            // handle shield\\n            transferSpear(roundId, address(this), msg.sender, out);\\n            setCShield(roundId, minPrice.multiplyDecimal(shieldInContract));\\n        } else {\\n            addCSpear(roundId, cDeltaAmount);\\n            transferSpear(roundId, address(this), msg.sender, out);\\n            setCShield(roundId, (1e18 - spearPrice(roundId)).multiplyDecimal(shieldInContract));\\n        }\\n    }\\n\\n    function tryBuySpear(uint roundId, uint cDeltaAmount) internal view returns(uint out){\\n        out = Pricing.getVirtualOut(cDeltaAmount, cSpear[roundId], spearBalance[roundId][address(this)]);\\n    }\\n\\n    function tryBuyShield(uint roundId, uint cDeltaAmount) internal view returns(uint out) {\\n        out = Pricing.getVirtualOut(cDeltaAmount, cShield[roundId], shieldBalance[roundId][address(this)]);\\n    }\\n\\n\\n    function buyShield(uint roundId, uint cDeltaAmount) internal {\\n        uint out = tryBuyShield(roundId, cDeltaAmount);\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        if ((cDeltaAmount + cShield[roundId]).divideDecimal(shieldInContract-out) >= maxPrice) {\\n            setCShield(roundId, maxPrice.multiplyDecimal(shieldInContract));\\n            addCollateral(roundId, cDeltaAmount);\\n            // handle shield\\n            transferShield(roundId, address(this), msg.sender, out);\\n            setCSpear(roundId, minPrice.multiplyDecimal(spearInContract));\\n        } else {\\n            addCShield(roundId, cDeltaAmount);\\n            transferShield(roundId, address(this), msg.sender, out);\\n            setCSpear(roundId, (1e18 - shieldPrice(roundId)).multiplyDecimal(shieldInContract));\\n        }\\n    }\\n\\n   \\n\\n    function sellSpear(uint roundId, uint vDeltaAmount) internal returns(uint out) {\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        out = trySellSpear(roundId, vDeltaAmount);\\n        subCSpear(roundId, out);\\n        transferSpear(roundId, msg.sender, address(this), vDeltaAmount);\\n        setCShield(roundId, (1e18 - spearPrice(roundId)).multiplyDecimal(shieldInContract));\\n    }\\n\\n    function trySellSpear(uint roundId, uint vDeltaAmount) internal view returns(uint out) {\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        out = Pricing.getCollateralOut(vDeltaAmount, spearInContract, cSpear[roundId]);\\n    }\\n\\n     function trySellShield(uint roundId, uint vDeltaAmount) internal view returns(uint out) {\\n        uint shieldInContract = shieldBalance[roundId][address(this)];\\n        out = Pricing.getCollateralOut(vDeltaAmount, shieldInContract, cShield[roundId]);\\n    }\\n\\n    function sellShield(uint roundId, uint vDeltaAmount) internal returns(uint out) {\\n        out = trySellShield(roundId, vDeltaAmount);\\n        uint spearInContract = spearBalance[roundId][address(this)];\\n        subCShield(roundId, out);\\n        transferShield(roundId, msg.sender, address(this), vDeltaAmount);\\n        setCSpear(roundId, (1e18 - shieldPrice(roundId)).multiplyDecimal(spearInContract));\\n    }\\n\\n    function _afterBuySpear(uint roundId, uint cDeltaAmount) internal virtual {}\\n    function _afterSellSpear(uint roundId, uint vDeltaAmount) internal virtual {}\\n    function _afterBuyShield(uint roundId, uint cDeltaAmount) internal virtual {}\\n    function _afterSellShield(uint roundId, uint vDeltaAmount) internal virtual {}\\n\\n}\",\"keccak256\":\"0xdc768bef2a24c483443a5f3867ff783fb78c1a1a47d09f4f4ad7ff9d0137bb5a\",\"license\":\"MIT\"},\"contracts/Creater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Battle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\ncontract Creater {\\n    \\n    function getBattleAddress(\\n        address _collateral,\\n        string memory _trackName,\\n        uint _peroidType,\\n        uint _settleType,\\n        uint256 _settleValue\\n    ) public view returns(address, bytes32){\\n         bytes32 salt =\\n            keccak256(\\n                abi.encodePacked(\\n                    _collateral,\\n                    _trackName,\\n                    _peroidType,\\n                    _settleType,\\n                    _settleValue\\n                )\\n            );\\n        bytes32 bytecodeHash = keccak256(type(Battle).creationCode);\\n        address battleAddr = Create2.computeAddress(salt, bytecodeHash);\\n        return (battleAddr, salt);\\n    }\\n\\n    function createBattle(bytes32 salt) public {\\n        Create2.deploy(0, salt, type(Battle).creationCode);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x05b5d67479c6d3c46cad203bcfeb91823578adc7dd603ceeb89ec61585b1ec1a\",\"license\":\"MIT\"},\"contracts/VirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract VirtualToken {\\n    mapping (uint=>uint) public spearTotal;\\n    mapping(uint => mapping(address=>uint)) public spearBalance;\\n\\n\\n    mapping (uint=>uint) public shieldTotal;\\n    mapping(uint => mapping(address=>uint)) public shieldBalance;\\n\\n\\n    mapping(uint=>uint) public cSpear;\\n    mapping(uint=>uint) public cShield;\\n    mapping(uint=>uint) public collateral;\\n\\n    // 0 => spear; 1 => shield\\n    event Transfer(uint spearOrShield, address from, address to, uint amount);\\n    event Mint(uint spearOrShield, address to, uint amount);\\n    event Burn(uint spearOrShield, address from, uint amount);\\n\\n    // view\\n    function spearSold(uint roundId) public view returns(uint){\\n        return spearTotal[roundId] - spearBalance[roundId][address(this)];\\n    }\\n\\n    function shieldSold(uint roundId) public view returns(uint) {\\n        return shieldTotal[roundId] - shieldBalance[roundId][address(this)];\\n    }\\n\\n    function cSurplus(uint roundId) public view returns(uint amount) {\\n        amount = collateral[roundId] - cSpear[roundId] - cShield[roundId];\\n    }\\n\\n    // mut\\n    function addCSpear(uint roundId, uint amount) internal {\\n        cSpear[roundId] += amount;\\n        collateral[roundId] += amount;\\n    }\\n\\n    function addCShield(uint roundId, uint amount) internal {\\n        cShield[roundId] += amount;\\n        collateral[roundId] += amount;\\n    }\\n\\n    function subCSpear(uint roundId, uint amount) internal {\\n        cSpear[roundId] -= amount;\\n        collateral[roundId] -= amount;\\n    }\\n\\n    function subCShield(uint roundId, uint amount) internal {\\n        cShield[roundId] -= amount;\\n        collateral[roundId] -= amount;\\n    }\\n\\n    function subCSurplus(uint roundId, uint amount) internal {\\n        collateral[roundId] -= amount;\\n    }\\n\\n    function setCSpear(uint roundId, uint amount) internal {\\n        cSpear[roundId] = amount;\\n    }\\n\\n    function setCShield(uint roundId, uint amount) internal {\\n        cShield[roundId] = amount;\\n    }\\n\\n    function addCollateral(uint roundId, uint amount) internal {\\n        collateral[roundId] += amount;\\n    }\\n\\n    function transferSpear(uint roundId, address from, address to, uint amount) internal {\\n        require(from != address(0), \\\"from should not be address(0)\\\");\\n        require(to != address(0), \\\"to should not be address(0)\\\");\\n        spearBalance[roundId][from] -= amount;\\n        spearBalance[roundId][to] += amount;\\n        emit Transfer(0, from, to, amount);\\n    }\\n\\n    function transferShield(uint roundId, address from, address to, uint amount) internal {\\n        require(from != address(0), \\\"from should not be address(0)\\\");\\n        require(to != address(0), \\\"to should not be address(0)\\\");\\n        shieldBalance[roundId][from] -= amount;\\n        shieldBalance[roundId][to] += amount;\\n        emit Transfer(1, from, to, amount);\\n    }\\n\\n    function burnSpear(uint roundId, address acc, uint amount) internal {\\n        spearBalance[roundId][acc] -= amount;\\n        spearTotal[roundId] -= amount;\\n        emit Burn(0, acc, amount);\\n    }\\n\\n    function burnShield(uint roundId, address acc, uint amount) internal {\\n        shieldBalance[roundId][acc] -= amount;\\n        shieldTotal[roundId] -= amount;\\n        emit Burn(1, acc, amount);\\n    }\\n\\n    function mintSpear(uint roundId, address acc, uint amount) internal {\\n        spearBalance[roundId][acc] += amount;\\n        spearTotal[roundId] += amount;\\n        emit Mint(0, acc, amount);\\n    }\\n\\n    function mintShield(uint roundId, address acc, uint amount) internal {\\n        shieldBalance[roundId][acc] += amount;\\n        shieldTotal[roundId] += amount;\\n        emit Mint(1, acc, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x857c4c204c585bd1084629481db601ccadf3a2ec9ff800190dc087bb7e0bbc0d\",\"license\":\"MIT\"},\"contracts/algo/Pricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/DMath.sol\\\";\\nimport \\\"../lib/SafeDecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Pricing {\\n    \\n    using SafeMath for uint;\\n    using SafeDecimalMath for uint;\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint _pre_k) internal pure returns(uint amountOut, bool e, uint pre_k) {\\n        require(amountIn > 0, 'Battle: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'Battle: INSUFFICIENT_LIQUIDITY');\\n        if (reserveIn >= reserveOut.mul(99).div(100)) {\\n            amountOut = amountIn;\\n            e = true;\\n            return (amountOut, e, _pre_k);\\n        }\\n        // if amountIn > sqrt(reserveIn)\\n        uint maxAmount = DMath.sqrt(reserveIn*reserveOut.mul(100).div(99));\\n        pre_k = maxAmount;\\n        // console.log(\\\"maxAmount %s and amountIn %s, reserveIn %s, reserveOut %s\\\", maxAmount, amountIn, reserveIn);\\n        if (amountIn.add(reserveIn) > maxAmount) {\\n            uint maxAmountIn = maxAmount.sub(reserveIn);\\n            uint amountInWithFee = maxAmountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n            amountOut = amountOut.add(amountIn.sub(maxAmountIn));\\n            e = true;\\n        } else {\\n            uint amountInWithFee = amountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n        }\\n    }\\n\\n    function getVirtualOut(uint cDeltaAmount, uint cAmount, uint vAmount) internal pure returns(uint) {\\n        if (cAmount.divideDecimal(vAmount) >= 0.9999 * 1e18) {\\n            return cDeltaAmount;\\n        }\\n        uint cLimitAmount = DMath.sqrt(cAmount*vAmount.mul(9999).div(10000));\\n        uint vLimitAmount = DMath.sqrt(cAmount*vAmount.mul(10000).div(9999));\\n        if (cDeltaAmount + cAmount > cLimitAmount) {\\n            return vAmount - vLimitAmount + cDeltaAmount - cLimitAmount + cAmount;\\n        } else {\\n            uint numerator = vAmount * cDeltaAmount;\\n            uint denominator = cAmount + cDeltaAmount;\\n            return numerator / denominator;\\n        }\\n    }\\n\\n    function getCollateralOut(uint vDeltaAmount, uint vAmount, uint cAmount) internal pure returns(uint) {\\n        uint numerator = cAmount * vDeltaAmount;\\n        uint denominator = vAmount + vDeltaAmount;\\n        return numerator / denominator;\\n    }\\n\\n}\",\"keccak256\":\"0x62e03e5c2c84164d098a0390a795ea7aecb79d4c597236c78162fc8529060709\",\"license\":\"MIT\"},\"contracts/interfaces/IArena.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../structs/PeroidType.sol\\\";\\nimport \\\"../structs/SettleType.sol\\\";\\n\\ninterface IArena {\\n//     function getPeroidTS(PeroidType peroidType)\\n//         external\\n//         view\\n//         returns (uint256, uint256);\\n\\n//     function getSpacePrice(uint256 oraclePrice, uint256 rawPrice)\\n//         external\\n//         pure\\n//         returns (uint256 price);\\n\\n//     function getStrikePrice(\\n//         string memory symbol,\\n//         PeroidType _peroidType,\\n//         SettleType _settleType,\\n//         uint256 _settleValue\\n//     )\\n//         external\\n//         returns (\\n//             uint256 startPrice,\\n//             uint256 strikePrice,\\n//             uint256 strikePriceOver,\\n//             uint256 strikePriceUnder\\n//         );\\n\\n//    function getPriceByTS(string memory symbol, uint ts) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xf9503c56a33efbad25379286eff4d64cd60923dc00129f42c5eb96e06a2cc0c3\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n   function price(string memory symbol) external view returns(uint); \\n   function historyPrice(string memory symbol, uint ts) external view returns(uint); \\n   function getStrikePrice(string memory symbol, uint _peroidType, uint _settleType, uint256 _settleValue\\n    ) external  view returns (\\n            uint256 startPrice,\\n            uint256 strikePrice,\\n            uint256 strikePriceOver,\\n            uint256 strikePriceUnder\\n        );\\n   function getRoundTS(uint peroidType) external view returns(uint start, uint end);\\n   function getNextRoundTS(uint peroidType) external view returns(uint start, uint end);\\n}\",\"keccak256\":\"0xd20ce2f3a1bc74a0bf468f55b332d4a7b94899d06db86929ad0874fbce855978\",\"license\":\"MIT\"},\"contracts/lib/DMath.sol\":{\"content\":\"  \\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary DMath {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xeba8d542c16ae7aae9aec097f98cba4c54ad14a8a4e4471527ce0b0af60b4f98\",\"license\":\"GPL-3.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/structs/BattleInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PeroidType.sol\\\";\\nimport \\\"./SettleType.sol\\\";\\n\\nstruct BattleInfo {\\n    string underlying;\\n    address collateral;\\n    PeroidType peroidType;\\n    SettleType settleType;\\n    uint settleValue;\\n    uint feeRatio;\\n}\",\"keccak256\":\"0xca767919ee7db02b73e535dc4319e707c5d67bf5e76569dafc135d063aa31b80\",\"license\":\"MIT\"},\"contracts/structs/PeroidType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum PeroidType {\\n    Day, // 0 \\n    Week, // 1\\n    Month // 2\\n}\",\"keccak256\":\"0xf7b8924060950854146e0ad3134c9bc07545eda6b011bf65cc333357fcf6d431\",\"license\":\"MIT\"},\"contracts/structs/RoundInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PeroidType.sol\\\";\\nimport \\\"./SettleType.sol\\\";\\n\\nstruct RoundInfo {\\n    uint spearPrice;\\n    uint shieldPrice;\\n    uint strikePrice;\\n    uint strikePriceOver;\\n    uint strikePriceUnder;\\n    uint startTS;\\n    uint endTS;\\n}\",\"keccak256\":\"0x0a964b0bfe53f6c32f14973905a8589bcd88ffa290de6deb13f52c0aaa256be7\",\"license\":\"MIT\"},\"contracts/structs/RoundResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RoundResult {\\n    Non, // 0\\n    SpearWin, // 1\\n    ShieldWin //2\\n}\\n\",\"keccak256\":\"0xf89bd082ca4090e4330b4042ae03d23d713d00cba8aee98d2ef80606bbcfc5f7\",\"license\":\"MIT\"},\"contracts/structs/SettleType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum SettleType {\\n    TwoWay, // 0\\n    Positive, // 1\\n    Negative, // 2\\n    Specific // 3\\n\\n}\\n\",\"keccak256\":\"0x5615575d747f742885a44b9a2260145cf34c87dbef9eb9aea42f5084f82a8214\",\"license\":\"MIT\"},\"contracts/structs/UserInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nstruct UserInfo {\\n    uint roundId;\\n    uint spearBalance;\\n    uint shieldBalance;\\n}\",\"keccak256\":\"0xa4e898b08ae65016f9c01c386816e15cdbbddac17908287daaa8eabbac5959a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151d8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638fd28afc1461003b578063ae1fec9014610071575b600080fd5b61004e61004936600461028f565b610086565b604080516001600160a01b03909316835260208301919091520160405180910390f35b61008461007f366004610372565b610145565b005b600080600087878787876040516020016100a495949392919061038a565b6040516020818303038152906040528051906020012090506000604051806020016100ce90610282565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b0319848401526bffffffffffffffffffffffff193060601b166021840152603583018690526055808401919091528151808403909101815260759092019052805191012099919850909650505050505050565b6101736000826040518060200161015b90610282565b601f1982820381018352601f90910116604052610177565b5050565b600080844710156101cf5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b825161021d5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016101c6565b8383516020850187f590506001600160a01b03811661027a5760405162461bcd60e51b8152602060048201526019602482015278437265617465323a204661696c6564206f6e206465706c6f7960381b60448201526064016101c6565b949350505050565b614d968061040d83390190565b600080600080600060a086880312156102a6578081fd5b85356001600160a01b03811681146102bc578182fd5b9450602086013567ffffffffffffffff808211156102d8578283fd5b818801915088601f8301126102eb578283fd5b8135818111156102fd576102fd6103f6565b604051601f8201601f19908116603f01168101908382118183101715610325576103256103f6565b816040528281528b602084870101111561033d578586fd5b826020860160208301379182016020019490945296999698505050506040850135946060810135946080909101359350915050565b600060208284031215610383578081fd5b5035919050565b6bffffffffffffffffffffffff198660601b16815260008551815b818110156103c257602081890181015160148684010152016103a5565b818111156103d35782601483860101525b506014920191820194909452603481019290925260548201526074019392505050565b634e487b7160e01b600052604160045260246000fdfe6080604052670de05bc096e9c00060078190556200002690670de0b6b3a7640000620001c0565b6008553480156200003657600080fd5b50604080518082018252601881527f426174746c65204c697175696c696469747920546f6b656e00000000000000006020808301918252835180850190945260038452620424c560ec1b9084015281519192916200009791600c916200011a565b508051620000ad90600d9060208401906200011a565b5050506000620000c26200011660201b60201c565b601680546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000221565b3390565b8280546200012890620001e4565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b600082821015620001df57634e487b7160e01b81526011600452602481fd5b500390565b600181811c90821680620001f957607f821691505b602082108114156200021b57634e487b7160e01b600052602260045260246000fd5b50919050565b614b6580620002316000396000f3fe608060405234801561001057600080fd5b50600436106104e35760003560e01c806373cdc9551161028e578063b145a5b811610167578063e5591954116100d9578063f2fde38b11610092578063f2fde38b14610c68578063f46901ed14610c7b578063f6e0c8f614610c8e578063fa38601d14610ca1578063fc0afb4214610cb5578063fd3705f914610cd557600080fd5b8063e559195414610bc2578063e5cb8d8614610bd5578063e78ccc3914610be8578063e800bd4414610bfb578063ee0075e014610c1b578063efe8639414610c4657600080fd5b8063d019abba1161012b578063d019abba14610ae8578063d3bb6d6314610afb578063d923455b14610b0e578063dd62ed3e14610b2e578063dec966e914610b67578063e1237df014610b8757600080fd5b8063b145a5b814610a48578063b2016bd414610a5c578063b4f77f7114610a6f578063bc0d12c514610a9a578063c29bf54914610aba57600080fd5b80638da5cb5b1161020057806396eb6d0b116101c457806396eb6d0b146109d357806399b675bf146109dc5780639c8f9f23146109ef578063a345d92114610a02578063a457c2d714610a22578063a9059cbb14610a3557600080fd5b80638da5cb5b146109875780638e5698191461098f57806390a4cb9b146109af57806391a1adbe146109c257806395d89b41146109cb57600080fd5b80637fc65b96116102525780637fc65b9614610910578063821482e21461092357806384b1242714610943578063858e6e891461095857806388c3ffb01461096b57806389ef689d1461097e57600080fd5b806373cdc955146108b2578063747dff42146108bf57806376e8424f146108d45780637a917e54146108f45780637dc0d1d0146108fd57600080fd5b80633b1f18dd116103c057806351c6590a116103325780636db70830116102f65780636db70830146108565780636f307dc3146108695780636f4d2b671461087157806370a0823114610884578063715018a614610897578063728313c91461089f57600080fd5b806351c6590a146107f557806355756a1d1461080857806357b622e51461081057806358a01710146108235780635b2c44af1461083657600080fd5b806341744dd41161038457806341744dd4146107665780634484cc691461076f5780634975dc3f1461078f5780634e5b611e146107ba5780634e71d92d146107da5780634ec501b2146107e257600080fd5b80633b1f18dd146106ed5780633b6050471461070d5780633c45e7361461072d5780633cc1f54c1461074057806340dd37f61461075357600080fd5b80631f26255611610459578063313ce5671161041d578063313ce567146106705780633203ba771461067f57806333eca6341461068757806339509351146106a757806339bd0430146106ba5780633a8bcc91146106cd57600080fd5b80631f262556146105db5780631f38f5c6146105fb578063221937e01461061a57806323b872dd1461062d5780632bed99a31461064057600080fd5b80630d12872d116104ab5780630d12872d1461057c57806311da60b41461059c57806318160ddd146105a457806319f4ff2f146105ac5780631bd59029146105bf5780631bd5ff28146105c857600080fd5b8063017e7e58146104e857806306fdde031461051857806309300a331461052d578063095ea7b3146105445780630c7461d614610567575b600080fd5b6017546104fb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610520610ce8565b60405161050f91906146c2565b61053660195481565b60405190815260200161050f565b6105576105523660046142e5565b610d7a565b604051901515815260200161050f565b61057a610575366004614186565b610d91565b005b61053661058a3660046143b0565b60146020526000908152604090205481565b61057a610e9f565b600b54610536565b61057a6105ba3660046143b0565b611076565b610536601f5481565b61057a6105d636600461413a565b6110aa565b6105366105e93660046143b0565b60296020526000908152604090205481565b601e5461060d90610100900460ff1681565b60405161050f9190614670565b6105366106283660046143b0565b6110fb565b61055761063b36600461425e565b611133565b61066361064e3660046143b0565b60156020526000908152604090205460ff1681565b60405161050f919061465d565b6040516012815260200161050f565b601a54610536565b6105366106953660046143b0565b60026020526000908152604090205481565b6105576106b53660046142e5565b6111e4565b61057a6106c836600461430e565b61121b565b6105366106db3660046143b0565b600e6020526000908152604090205481565b6105366106fb3660046143b0565b60066020526000908152604090205481565b61072061071b36600461413a565b611312565b60405161050f9190614607565b61057a61073b3660046143b0565b6113af565b61057a61074e3660046143b0565b611486565b6105366107613660046143b0565b61150a565b61053660185481565b61053661077d3660046143b0565b60106020526000908152604090205481565b61053661079d3660046143e0565b600360209081526000928352604080842090915290825290205481565b6105366107c83660046143b0565b60116020526000908152604090205481565b61057a611518565b6105366107f03660046143b0565b6115b1565b61057a6108033660046143b0565b6115bf565b61057a61162b565b61057a61081e3660046143b0565b611725565b6105366108313660046143b0565b6117fa565b6105366108443660046143b0565b60286020526000908152604090205481565b610720610864366004614299565b611832565b6105206118bc565b61053661087f3660046143b0565b61194a565b61053661089236600461413a565b611978565b61057a611993565b61057a6108ad3660046143b0565b611a0c565b601e546106639060ff1681565b6108c7611aa1565b60405161050f9190614864565b6108e76108e23660046142e5565b611ab9565b60405161050f9190614872565b61053660205481565b6026546104fb906001600160a01b031681565b61053661091e3660046143b0565b611b32565b6105366109313660046143b0565b60046020526000908152604090205481565b61094b611ba4565b60405161050f91906147ee565b6105366109663660046143b0565b611cff565b6108c76109793660046143b0565b611d0d565b61053660255481565b6104fb611d97565b61053661099d3660046143b0565b60056020526000908152604090205481565b6105366109bd3660046143b0565b611da6565b61053660215481565b610520611dc7565b61053660245481565b6105366109ea3660046143b0565b611dd6565b61057a6109fd3660046143b0565b611de4565b610536610a103660046143b0565b600f6020526000908152604090205481565b610557610a303660046142e5565b611e0c565b610557610a433660046142e5565b611ea7565b60265461055790600160a81b900460ff1681565b601c546104fb906001600160a01b031681565b610536610a7d3660046143e0565b600160209081526000928352604080842090915290825290205481565b610536610aa83660046143b0565b60136020526000908152604090205481565b610acd610ac83660046143b0565b611eb4565b6040805193845260208401929092529082015260600161050f565b610acd610af6366004614402565b611ed3565b61057a610b093660046143b0565b611fcd565b610b21610b1c36600461435d565b6120b8565b60405161050f91906145b9565b610536610b3c366004614154565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b610536610b753660046143b0565b60006020819052908152604090205481565b610b9a610b95366004614402565b61213a565b604080519586526020860194909452928401919091526060830152608082015260a00161050f565b610b9a610bd03660046143b0565b612250565b610536610be33660046143b0565b612276565b610536610bf63660046143b0565b6122a5565b610536610c093660046143b0565b60126020526000908152604090205481565b610536610c293660046143e0565b602760209081526000928352604080842090915290825290205481565b610c59610c5436600461413a565b6122d6565b60405161050f93929190614893565b61057a610c7636600461413a565b6123be565b61057a610c8936600461413a565b6124ae565b61057a610c9c3660046143b0565b6124ff565b60265461055790600160a01b900460ff1681565b610536610cc336600461413a565b60226020526000908152604090205481565b601b546104fb906001600160a01b031681565b6060600c8054610cf790614a6a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2390614a6a565b8015610d705780601f10610d4557610100808354040283529160200191610d70565b820191906000526020600020905b815481529060010190602001808311610d5357829003601f168201915b5050505050905090565b6000610d8733848461252a565b5060015b92915050565b602654600160a01b900460ff1615610dd85760405162461bcd60e51b81526020600482015260056024820152640696e6974360dc1b60448201526064015b60405180910390fd5b6026805460ff60a01b1916600160a01b179055601c80546001600160a01b038089166001600160a01b031992831617909255601b8054928816929091169190911790558351610e2e90601d906020870190613fac565b50601e805484919060ff19166001836002811115610e5c57634e487b7160e01b600052602160045260246000fd5b0217905550601e805483919061ff001916610100836003811115610e9057634e487b7160e01b600052602160045260246000fd5b0217905550601f555050505050565b601954600090815260116020526040902054421015610eec5760405162461bcd60e51b8152602060048201526009602482015268746f6f206561726c7960b81b6044820152606401610dcf565b60195460009081526015602052604081205460ff166002811115610f2057634e487b7160e01b600052602160045260246000fd5b14610f575760405162461bcd60e51b81526020600482015260076024820152661cd95d1d1b195960ca1b6044820152606401610dcf565b6026546019546000908152601160205260408082205490516359fb1e3d60e11b815291926001600160a01b03169163b3f63c7a91610f9b91601d91906004016146d5565b60206040518083038186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb91906143c8565b90508061100a5760405162461bcd60e51b8152600401610dcf90614726565b6019546000908152600f6020526040902081905561102661264f565b6000806110316128b8565b9150915061105430602860006019548152602001908152602001600020546129ea565b601954600090815260296020526040902081905561107182612b27565b505050565b3361107f611d97565b6001600160a01b0316146110a55760405162461bcd60e51b8152600401610dcf9061474b565b601855565b336110b3611d97565b6001600160a01b0316146110d95760405162461bcd60e51b8152600401610dcf9061474b565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602090815260408083203084528252808320548484526004909252822054829161112c9190612dc7565b9392505050565b6000611140848484612de9565b6001600160a01b0384166000908152600a60209081526040808320338452909152902054828110156111c55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610dcf565b6111d985336111d48685614a27565b61252a565b506001949350505050565b336000818152600a602090815260408083206001600160a01b03871684529091528120549091610d879185906111d49086906148e5565b6019546001600160a01b038616600090815260236020526040902086916112429190612faf565b61126c576019546001600160a01b038216600090815260236020526040902061126a91612fc7565b505b602654600160a81b900460ff16156112af5760405162461bcd60e51b8152600401610dcf906020808252600490820152631a5b9a5d60e21b604082015260600190565b60268054600161ff0160a01b0319166001600160a01b03841617600160a81b179055602084905560218390556112e485612b27565b6019546001600160a01b03871660009081526022602052604090205561130a8686612fd3565b505050505050565b606060005b6001600160a01b0383166000908152602360205260409020611338906130a0565b8110156113a9576001600160a01b03831660009081526023602052604081206113679085906108e290856130aa565b90508083838151811061138a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806113a190614a9f565b915050611317565b50919050565b33600090815260226020526040902054156113cc576113cc611518565b60195433600081815260236020526040902090916113ea9190612faf565b611414576019546001600160a01b038216600090815260236020526040902061141291612fc7565b505b600061142b601854846130b690919063ffffffff16565b9050611444601954828561143f9190614a27565b6130d8565b61146733306114538487614a27565b601c546001600160a01b03169291906131f7565b601754601c54611071916001600160a01b0391821691339116846131f7565b33600090815260226020526040902054156114a3576114a3611518565b60006114b160195483613268565b905060006114ca601854836130b690919063ffffffff16565b90506114ed336114da8385614a27565b601c546001600160a01b031691906132b8565b601754601c54611071916001600160a01b039182169116836132b8565b6000610d8b601954836132e8565b600080611524336122d6565b9250509150806000141561156e5760405162461bcd60e51b815260206004820152601160248201527073706561722f736869656c64207a65726f60781b6044820152606401610dcf565b611579823383613322565b6115848233836133be565b33600081815260226020526040812055601c546115ad916001600160a01b0390911690836132b8565b5050565b6000610d8b6019548361344d565b60195433600081815260236020526040902090916115dd9190612faf565b611607576019546001600160a01b038216600090815260236020526040902061160591612fc7565b505b6116136019548361347f565b601c546115ad906001600160a01b03163330856131f7565b336000908152602a602052604081208190611645906130a0565b9050806116865760405162461bcd60e51b815260206004820152600f60248201526e139bdd08105c1c1bda5b9d1b595b9d608a1b6044820152606401610dcf565b60005b8181101561170d57336000908152602a602052604081206116aa90836130aa565b6000818152602860209081526040808320546027835281842033855283528184205485855260299093529220549293506116ed926116e7916130b6565b90612dc7565b6116f790856148e5565b935050808061170590614a9f565b915050611689565b50601c546115ad906001600160a01b031633846132b8565b60255461173133611978565b101561176f5760405162461bcd60e51b815260206004820152600d60248201526c06e6f7420656e6f756768206c7609c1b6044820152606401610dcf565b670de0b6b3a764000081106117965760405162461bcd60e51b8152600401610dcf90614726565b60208190556117ad81670de0b6b3a7640000614a27565b60218190556020805460408051338152928301919091528101919091527ff6b8a92f9bdaf1c98998652be215c78364778cd8decd80347d680b38b0a09bbc9060600160405180910390a150565b6000818152600560209081526040808320546004835281842054600690935290832054909161182891614a27565b610d8b9190614a27565b606060005b82518110156118b55760006118738585848151811061186657634e487b7160e01b600052603260045260246000fd5b6020026020010151611ab9565b90508083838151811061189657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806118ad90614a9f565b915050611837565b5092915050565b601d80546118c990614a6a565b80601f01602080910402602001604051908101604052809291908181526020018280546118f590614a6a565b80156119425780601f1061191757610100808354040283529160200191611942565b820191906000526020600020905b81548152906001019060200180831161192557829003601f168201915b505050505081565b600081815260016020908152604080832030845282528083205484845291839052822054610d8b9190614a27565b6001600160a01b031660009081526009602052604090205490565b3361199c611d97565b6001600160a01b0316146119c25760405162461bcd60e51b8152600401610dcf9061474b565b6016546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601680546001600160a01b0319169055565b3360009081526022602052604090205415611a2957611a29611518565b6019543360008181526023602052604090209091611a479190612faf565b611a71576019546001600160a01b0382166000908152602360205260409020611a6f91612fc7565b505b6000611a88601854846130b690919063ffffffff16565b90506114446019548285611a9c9190614a27565b6134d8565b611aa9614030565b611ab4601954611d0d565b905090565b611add60405180606001604052806000815260200160008152602001600081525090565b50604080516060810182528281526000838152600160209081528382206001600160a01b0387168084529082528483205482850152858352600382528483209083529052829020549181019190915292915050565b60008181526010602090815260408083205460119092528220548291611b7691611b5c9190614a27565b6000858152601160205260409020546116e7904290614a27565b611b8890670de0b6b3a7640000614a27565b9050611b93816135b5565b61112c90662386f26fc10000614a08565b611bde6040805160c08101825260608152600060208201819052909182019081526020016000815260200160008152602001600081525090565b6040518060c00160405280601d8054611bf690614a6a565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2290614a6a565b8015611c6f5780601f10611c4457610100808354040283529160200191611c6f565b820191906000526020600020905b815481529060010190602001808311611c5257829003601f168201915b5050509183525050601c546001600160a01b03166020820152601e5460409091019060ff166002811115611cb357634e487b7160e01b600052602160045260246000fd5b8152602001601e60019054906101000a900460ff166003811115611ce757634e487b7160e01b600052602160045260246000fd5b8152602001601f548152602001601854815250905090565b6000610d8b6019548361361f565b611d15614030565b6040518060e00160405280611d29846110fb565b8152602001611d37846122a5565b815260008481526012602090815260408083205482850152868352601382528083205481850152868352601482528083205460608501528683526010825280832054608085015295825260119052939093205460a0909301929092525090565b6016546001600160a01b031690565b601a8181548110611db657600080fd5b600091825260209091200154905081565b6060600d8054610cf790614a6a565b6000610d8b6019548361364c565b6000611df260195483613679565b601c549091506115ad906001600160a01b031633836132b8565b336000908152600a602090815260408083206001600160a01b038616845290915281205482811015611e8e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610dcf565b611e9d33856111d48685614a27565b5060019392505050565b6000610d87338484612de9565b6000806000611ec560195485611ed3565b9250925092505b9193909250565b600080600080611ee28661194a565b90506000611eef87612276565b90506000818311611f005781611f02565b825b9050611f36611f10600b5490565b60008a8152600660205260409020546116e7908a90611f30908690614a27565b906130b6565b9550611f5d611f4489611b32565b611f5690670de0b6b3a7640000614a27565b87906130b6565b9550611f8f611f6b600b5490565b60008a81526001602090815260408083203084529091529020546116e7908a6130b6565b9450611fc1611f9d600b5490565b60008a81526003602090815260408083203084529091529020546116e7908a6130b6565b93505050509250925092565b6000611fd833611978565b90508181101561201a5760405162461bcd60e51b815260206004820152600d60248201526c04e6f7420456e6f756768204c5609c1b6044820152606401610dcf565b6019546000908152602760209081526040808320338452909152812080548392906120469084906148e5565b90915550506019546000908152602860205260408120805483929061206c9084906148e5565b9091555050601954336000908152602a6020526040902061208c91612faf565b6120ad57601954336000908152602a602052604090206120ab91612fc7565b505b611071333084611133565b606060005b82518110156113a95760006120f88483815181106120eb57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d0d565b90508083838151811061211b57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061213290614a9f565b9150506120bd565b600082815260056020908152604080832054600490925282205482918291829182918291612167916148e5565b6000898152600460205260409020549091506121899082906116e7908a6130b6565b6000898152600560205260409020549096506121ab9082906116e7908a6130b6565b60008981526001602090815260408083203084529091529020549095506121d89082906116e7908a6130b6565b60008981526003602090815260408083203084529091529020549094506122059082906116e7908a6130b6565b9250612210600b5490565b61221c57869150612245565b600088815260066020526040902054612242906116e761223b600b5490565b8a906130b6565b91505b509295509295909350565b60008060008060006122646019548761213a565b939a9299509097509550909350915050565b60008181526003602090815260408083203084528252808320548484526002909252822054610d8b9190614a27565b60008181526003602090815260408083203084528252808320548484526005909252822054829161112c9190612dc7565b6001600160a01b0381166000908152602260209081526040808320548084526015909252822054909160ff909116908215801590612315575060195483105b15611ecc57600182600281111561233c57634e487b7160e01b600052602160045260246000fd5b141561236b575060008281526001602090815260408083206001600160a01b0387168452909152902054611ecc565b600282600281111561238d57634e487b7160e01b600052602160045260246000fd5b1415611ecc575060008281526003602090815260408083206001600160a01b03871684529091529020549193909250565b336123c7611d97565b6001600160a01b0316146123ed5760405162461bcd60e51b8152600401610dcf9061474b565b6001600160a01b0381166124525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dcf565b6016546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601680546001600160a01b0319166001600160a01b0392909216919091179055565b336124b7611d97565b6001600160a01b0316146124dd5760405162461bcd60e51b8152600401610dcf9061474b565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152602260205260409020541561251c5761251c611518565b60006114b160195483613763565b6001600160a01b03831661258c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610dcf565b6001600160a01b0382166125ed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610dcf565b6001600160a01b038381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000601e54610100900460ff16600381111561267b57634e487b7160e01b600052602160045260246000fd5b141561271557601954600090815260136020908152604080832054600f909252909120541015806126c85750601954600090815260146020908152604080832054600f9092529091205411155b156126f257601954600090815260156020526040902080546001919060ff191682805b0217905550565b601954600090815260156020526040902080546002919060ff19166001836126eb565b6001601e54610100900460ff16600381111561274157634e487b7160e01b600052602160045260246000fd5b141561278c57601954600090815260136020908152604080832054600f90925290912054106126f257601954600090815260156020526040902080546001919060ff191682806126eb565b6002601e54610100900460ff1660038111156127b857634e487b7160e01b600052602160045260246000fd5b141561280357601954600090815260146020908152604080832054600f90925290912054106126f257601954600090815260156020526040902080546001919060ff191682806126eb565b6003601e54610100900460ff16600381111561282f57634e487b7160e01b600052602160045260246000fd5b141561287a57601954600090815260126020908152604080832054600f90925290912054106126f257601954600090815260156020526040902080546001919060ff191682806126eb565b60405162461bcd60e51b8152602060048201526013602482015272756e6b6e6f776e20736574746c65207479706560681b6044820152606401610dcf565b600080600160195460009081526015602052604090205460ff1660028111156128f157634e487b7160e01b600052602160045260246000fd5b14156129255761290260195461194a565b60195460009081526006602052604090205461291e9190614a27565b91506129af565b600260195460009081526015602052604090205460ff16600281111561295b57634e487b7160e01b600052602160045260246000fd5b141561296c57612902601954612276565b60405162461bcd60e51b81526020600482015260186024820152771b9bdd0818dbdc9c9958dd081c9bdd5b99081c995cdd5b1d60421b6044820152606401610dcf565b6129d86129bb600b5490565b6019546000908152602860205260409020546116e79085906130b6565b90506129e48183614a27565b91509091565b6001600160a01b038216612a4a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610dcf565b6001600160a01b03821660009081526009602052604090205481811015612abe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610dcf565b612ac88282614a27565b6001600160a01b038416600090815260096020526040812091909155600b8054849290612af6908490614a27565b90915550506040518281526000906001600160a01b03851690600080516020614b1083398151915290602001612642565b602654601e5460009182916001600160a01b039091169063f3c9f8f79060ff166002811115612b6657634e487b7160e01b600052602160045260246000fd5b6040518263ffffffff1660e01b8152600401612b8491815260200190565b604080518083038186803b158015612b9b57600080fd5b505afa158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd39190614423565b6019829055601a805460018101825560009182527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e01839055602654601e54939550919350918291829182916001600160a01b03169063d39f696490601d9060ff166002811115612c5457634e487b7160e01b600052602160045260246000fd5b601e54610100900460ff166003811115612c7e57634e487b7160e01b600052602160045260246000fd5b601f546040518563ffffffff1660e01b8152600401612ca094939291906146f7565b60806040518083038186803b158015612cb857600080fd5b505afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190614446565b9350935093509350612d0560195430896137b0565b612d12601954308961383f565b612d32601954612d2d896020546130b690919063ffffffff16565b6138ce565b612d52601954612d4d896021546130b690919063ffffffff16565b613918565b601980546000908152600e6020908152604080832097909755825482526010815286822098909855815481526011885285812096909655805486526012875284862093909355825485526013865283852091909155815484526014855282842055548252601590925220805460ff1916905550565b600061112c82612de3612ddc6012600a614960565b8690613936565b90613942565b6001600160a01b038316612e4d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610dcf565b6001600160a01b038216612eaf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610dcf565b6001600160a01b03831660009081526009602052604090205481811015612f275760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610dcf565b612f318282614a27565b6001600160a01b038086166000908152600960205260408082209390935590851681529081208054849290612f679084906148e5565b92505081905550826001600160a01b0316846001600160a01b0316600080516020614b1083398151915284604051612fa191815260200190565b60405180910390a350505050565b6000818152600183016020526040812054151561112c565b600061112c838361394e565b6001600160a01b0382166130295760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610dcf565b80600b600082825461303b91906148e5565b90915550506001600160a01b038216600090815260096020526040812080548392906130689084906148e5565b90915550506040518181526001600160a01b03831690600090600080516020614b108339815191529060200160405180910390a35050565b6000610d8b825490565b600061112c838361399d565b60006130c46012600a614960565b6130ce8484613936565b61112c91906148fd565b60006130e4838361361f565b600084815260016020908152604080832030808552908352818420548885526003845282852091855292529091205460075492935090916131416131288585614a27565b6000888152600460205260409020546116e790886148e5565b106131b7576131718561315f846007546130b690919063ffffffff16565b60009182526004602052604090912055565b61317b8585613a31565b61318785303386613a4f565b6131b2856131a0836008546130b690919063ffffffff16565b60009182526005602052604090912055565b6131f0565b6131c185856138ce565b6131cd85303386613a4f565b6131f0856131a0836131de896110fb565b611f3090670de0b6b3a7640000614a27565b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526132629085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613b4e565b50505050565b600061327483836132e8565b600084815260016020908152604080832030845290915290205490915061329b8483613c20565b6132a784333086613c61565b6118b58461315f836131de886122a5565b6040516001600160a01b03831660248201526044810182905261107190849063a9059cbb60e01b9060640161322b565b6000828152600360209081526040808320308452825280832054858452600590925282205461331a9084908390613d52565b949350505050565b60008381526001602090815260408083206001600160a01b038616845290915281208054839290613354908490614a27565b909155505060008381526020819052604081208054839290613377908490614a27565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca906133b190600090859085906146a3565b60405180910390a1505050565b60008381526003602090815260408083206001600160a01b0386168452909152812080548392906133f0908490614a27565b909155505060008381526002602052604081208054839290613413908490614a27565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca906133b190600190859085906146a3565b6000828152600160209081526040808320308452825280832054858452600490925282205461331a9084908390613d52565b6000806000806000613491878761213a565b945094509450945094506134a587866138ce565b6134af8785613918565b6134ba8733856137b0565b6134c587338461383f565b6134cf3382612fd3565b50505050505050565b60006134e4838361364c565b600084815260016020908152604080832030808552908352818420548885526003845282852091855292529091205460075492935090916135416135288584614a27565b6000888152600560205260409020546116e790886148e5565b1061358e5761355f856131a0836007546130b690919063ffffffff16565b6135698585613a31565b61357585303386613c61565b6131b28561315f846008546130b690919063ffffffff16565b6135988585613918565b6135a485303386613c61565b6131f08561315f836131de896122a5565b6000600382111561361057508060006135cf6002836148fd565b6135da9060016148e5565b90505b818110156113a9579050806002816135f581866148fd565b6135ff91906148e5565b61360991906148fd565b90506135dd565b811561361a575060015b919050565b6000828152600460209081526040808320546001835281842030855290925282205461112c918491613d83565b6000828152600560209081526040808320546003835281842030855290925282205461112c918491613d83565b6000806000806136898686611ed3565b6000898152600660209081526040808320546004909252822054949750929550909350916136bd91906116e79087906130b6565b600088815260066020908152604080832054600590925282205492935090916136ec91906116e79088906130b6565b60008981526006602052604081205491925090613716906116e761370f8c6117fa565b89906130b6565b90506137228984613e65565b61372c8983613c20565b6137368982613e83565b613741893087613322565b61374c8930866133be565b61375633896129ea565b5093979650505050505050565b6000828152600360209081526040808320308452909152812054613787848461344d565b91506137938483613e65565b61379f84333086613a4f565b6118b5846131a0836131de886110fb565b60008381526001602090815260408083206001600160a01b0386168452909152812080548392906137e29084906148e5565b9091555050600083815260208190526040812080548392906138059084906148e5565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6906133b190600090859085906146a3565b60008381526003602090815260408083206001600160a01b0386168452909152812080548392906138719084906148e5565b9091555050600083815260026020526040812080548392906138949084906148e5565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6906133b190600190859085906146a3565b600082815260046020526040812080548392906138ec9084906148e5565b90915550506000828152600660205260408120805483929061390f9084906148e5565b90915550505050565b600082815260056020526040812080548392906138ec9084906148e5565b600061112c8284614a08565b600061112c82846148fd565b600081815260018301602052604081205461399557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d8b565b506000610d8b565b815460009082106139fb5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610dcf565b826000018281548110613a1e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000828152600660205260408120805483929061390f9084906148e5565b6001600160a01b038316613a755760405162461bcd60e51b8152600401610dcf90614780565b6001600160a01b038216613a9b5760405162461bcd60e51b8152600401610dcf906147b7565b60008481526001602090815260408083206001600160a01b038716845290915281208054839290613acd908490614a27565b909155505060008481526001602090815260408083206001600160a01b038616845290915281208054839290613b049084906148e5565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b090613b409060009086908690869061467e565b60405180910390a150505050565b6000613ba3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ea19092919063ffffffff16565b8051909150156110715780806020019051810190613bc19190614390565b6110715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610dcf565b60008281526005602052604081208054839290613c3e908490614a27565b90915550506000828152600660205260408120805483929061390f908490614a27565b6001600160a01b038316613c875760405162461bcd60e51b8152600401610dcf90614780565b6001600160a01b038216613cad5760405162461bcd60e51b8152600401610dcf906147b7565b60008481526003602090815260408083206001600160a01b038716845290915281208054839290613cdf908490614a27565b909155505060008481526003602090815260408083206001600160a01b038616845290915281208054839290613d169084906148e5565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b090613b409060019086908690869061467e565b600080613d5f8584614a08565b90506000613d6d86866148e5565b9050613d7981836148fd565b9695505050505050565b6000670de05bc096e9c000613d988484612dc7565b10613da457508261112c565b6000613dca613dbb612710612de38661270f613936565b613dc59086614a08565b6135b5565b90506000613ded613de361270f612de387612710613936565b613dc59087614a08565b905081613dfa86886148e5565b1115613e3457848287613e0d8488614a27565b613e1791906148e5565b613e219190614a27565b613e2b91906148e5565b9250505061112c565b6000613e408786614a08565b90506000613e4e88886148e5565b9050613e5a81836148fd565b94505050505061112c565b60008281526004602052604081208054839290613c3e908490614a27565b6000828152600660205260408120805483929061390f908490614a27565b606061331a848460008585843b613efa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610dcf565b600080866001600160a01b03168587604051613f16919061459d565b60006040518083038185875af1925050503d8060008114613f53576040519150601f19603f3d011682016040523d82523d6000602084013e613f58565b606091505b5091509150613f68828286613f73565b979650505050505050565b60608315613f8257508161112c565b825115613f925782518084602001fd5b8160405162461bcd60e51b8152600401610dcf91906146c2565b828054613fb890614a6a565b90600052602060002090601f016020900481019282613fda5760008555614020565b82601f10613ff357805160ff1916838001178555614020565b82800160010185558215614020579182015b82811115614020578251825591602001919060010190614005565b5061402c92915061406d565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b8082111561402c576000815560010161406e565b80356001600160a01b038116811461361a57600080fd5b600082601f8301126140a9578081fd5b8135602067ffffffffffffffff8211156140c5576140c5614ae6565b8160051b6140d48282016148b4565b8381528281019086840183880185018910156140ee578687fd5b8693505b858410156141105780358352600193909301929184019184016140f2565b50979650505050505050565b80356003811061361a57600080fd5b80356004811061361a57600080fd5b60006020828403121561414b578081fd5b61112c82614082565b60008060408385031215614166578081fd5b61416f83614082565b915061417d60208401614082565b90509250929050565b60008060008060008060c0878903121561419e578182fd5b6141a787614082565b955060206141b6818901614082565b9550604088013567ffffffffffffffff808211156141d2578485fd5b818a0191508a601f8301126141e5578485fd5b8135818111156141f7576141f7614ae6565b614209601f8201601f191685016148b4565b91508082528b8482850101111561421e578586fd5b8084840185840137810190920184905250935061423d6060880161411c565b925061424b6080880161412b565b915060a087013590509295509295509295565b600080600060608486031215614272578283fd5b61427b84614082565b925061428960208501614082565b9150604084013590509250925092565b600080604083850312156142ab578182fd5b6142b483614082565b9150602083013567ffffffffffffffff8111156142cf578182fd5b6142db85828601614099565b9150509250929050565b600080604083850312156142f7578182fd5b61430083614082565b946020939093013593505050565b600080600080600060a08688031215614325578081fd5b61432e86614082565b945060208601359350604086013592506060860135915061435160808701614082565b90509295509295909350565b60006020828403121561436e578081fd5b813567ffffffffffffffff811115614384578182fd5b61331a84828501614099565b6000602082840312156143a1578081fd5b8151801515811461112c578182fd5b6000602082840312156143c1578081fd5b5035919050565b6000602082840312156143d9578081fd5b5051919050565b600080604083850312156143f2578182fd5b8235915061417d60208401614082565b60008060408385031215614414578182fd5b50508035926020909101359150565b60008060408385031215614435578182fd5b505080516020909101519092909150565b6000806000806080858703121561445b578182fd5b505082516020840151604085015160609095015191969095509092509050565b6004811061448b5761448b614ad0565b9052565b600081518084526144a7816020860160208601614a3e565b601f01601f19169290920160200192915050565b8054600090600181811c90808316806144d557607f831692505b60208084108214156144f557634e487b7160e01b86526022600452602486fd5b8388526020880182801561451057600181146145215761454c565b60ff1987168252828201975061454c565b60008981526020902060005b878110156145465781548482015290860190840161452d565b83019850505b5050505050505092915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b600082516145af818460208701614a3e565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156145fb576145e8838551614559565b9284019260e092909201916001016145d5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156145fb5761464a8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101614623565b6020810161466a83614afc565b91905290565b60208101610d8b828461447b565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b9283526001600160a01b03919091166020830152604082015260600190565b60208152600061112c602083018461448f565b6040815260006146e860408301856144bb565b90508260208301529392505050565b60808152600061470a60808301876144bb565b6020830195909552506040810192909252606090910152919050565b6020808252600b908201526a383934b1b29032b93937b960a91b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f66726f6d2073686f756c64206e6f742062652061646472657373283029000000604082015260600190565b6020808252601b908201527f746f2073686f756c64206e6f7420626520616464726573732830290000000000604082015260600190565b602081526000825160c0602084015261480a60e084018261448f565b905060018060a01b036020850151166040840152604084015161482c81614afc565b806060850152506060840151614845608085018261447b565b50608084015160a084015260a084015160c08401528091505092915050565b60e08101610d8b8284614559565b81518152602080830151908201526040808301519082015260608101610d8b565b838152606081016148a384614afc565b602082019390935260400152919050565b604051601f8201601f1916810167ffffffffffffffff811182821017156148dd576148dd614ae6565b604052919050565b600082198211156148f8576148f8614aba565b500190565b60008261491857634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561495857816000190482111561493e5761493e614aba565b8085161561494b57918102915b93841c9390800290614922565b509250929050565b600061112c838360008261497657506001610d8b565b8161498357506000610d8b565b816001811461499957600281146149a3576149bf565b6001915050610d8b565b60ff8411156149b4576149b4614aba565b50506001821b610d8b565b5060208310610133831016604e8410600b84101617156149e2575081810a610d8b565b6149ec838361491d565b8060001904821115614a0057614a00614aba565b029392505050565b6000816000190483118215151615614a2257614a22614aba565b500290565b600082821015614a3957614a39614aba565b500390565b60005b83811015614a59578181015183820152602001614a41565b838111156132625750506000910152565b600181811c90821680614a7e57607f821691505b602082108114156113a957634e487b7160e01b600052602260045260246000fd5b6000600019821415614ab357614ab3614aba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110614b0c57614b0c614ad0565b5056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202bf86c9ca4a0729e7247dd0e31234f35dba417299fec070eeed87b558881f4a964736f6c63430008040033a2646970667358221220e9aef23d2f4bf7755a3f41e6efc70e8cb5d1489031ba690c2fee990d7f20dd8064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80638fd28afc1461003b578063ae1fec9014610071575b600080fd5b61004e61004936600461028f565b610086565b604080516001600160a01b03909316835260208301919091520160405180910390f35b61008461007f366004610372565b610145565b005b600080600087878787876040516020016100a495949392919061038a565b6040516020818303038152906040528051906020012090506000604051806020016100ce90610282565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b0319848401526bffffffffffffffffffffffff193060601b166021840152603583018690526055808401919091528151808403909101815260759092019052805191012099919850909650505050505050565b6101736000826040518060200161015b90610282565b601f1982820381018352601f90910116604052610177565b5050565b600080844710156101cf5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b825161021d5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016101c6565b8383516020850187f590506001600160a01b03811661027a5760405162461bcd60e51b8152602060048201526019602482015278437265617465323a204661696c6564206f6e206465706c6f7960381b60448201526064016101c6565b949350505050565b614d968061040d83390190565b600080600080600060a086880312156102a6578081fd5b85356001600160a01b03811681146102bc578182fd5b9450602086013567ffffffffffffffff808211156102d8578283fd5b818801915088601f8301126102eb578283fd5b8135818111156102fd576102fd6103f6565b604051601f8201601f19908116603f01168101908382118183101715610325576103256103f6565b816040528281528b602084870101111561033d578586fd5b826020860160208301379182016020019490945296999698505050506040850135946060810135946080909101359350915050565b600060208284031215610383578081fd5b5035919050565b6bffffffffffffffffffffffff198660601b16815260008551815b818110156103c257602081890181015160148684010152016103a5565b818111156103d35782601483860101525b506014920191820194909452603481019290925260548201526074019392505050565b634e487b7160e01b600052604160045260246000fdfe6080604052670de05bc096e9c00060078190556200002690670de0b6b3a7640000620001c0565b6008553480156200003657600080fd5b50604080518082018252601881527f426174746c65204c697175696c696469747920546f6b656e00000000000000006020808301918252835180850190945260038452620424c560ec1b9084015281519192916200009791600c916200011a565b508051620000ad90600d9060208401906200011a565b5050506000620000c26200011660201b60201c565b601680546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000221565b3390565b8280546200012890620001e4565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b600082821015620001df57634e487b7160e01b81526011600452602481fd5b500390565b600181811c90821680620001f957607f821691505b602082108114156200021b57634e487b7160e01b600052602260045260246000fd5b50919050565b614b6580620002316000396000f3fe608060405234801561001057600080fd5b50600436106104e35760003560e01c806373cdc9551161028e578063b145a5b811610167578063e5591954116100d9578063f2fde38b11610092578063f2fde38b14610c68578063f46901ed14610c7b578063f6e0c8f614610c8e578063fa38601d14610ca1578063fc0afb4214610cb5578063fd3705f914610cd557600080fd5b8063e559195414610bc2578063e5cb8d8614610bd5578063e78ccc3914610be8578063e800bd4414610bfb578063ee0075e014610c1b578063efe8639414610c4657600080fd5b8063d019abba1161012b578063d019abba14610ae8578063d3bb6d6314610afb578063d923455b14610b0e578063dd62ed3e14610b2e578063dec966e914610b67578063e1237df014610b8757600080fd5b8063b145a5b814610a48578063b2016bd414610a5c578063b4f77f7114610a6f578063bc0d12c514610a9a578063c29bf54914610aba57600080fd5b80638da5cb5b1161020057806396eb6d0b116101c457806396eb6d0b146109d357806399b675bf146109dc5780639c8f9f23146109ef578063a345d92114610a02578063a457c2d714610a22578063a9059cbb14610a3557600080fd5b80638da5cb5b146109875780638e5698191461098f57806390a4cb9b146109af57806391a1adbe146109c257806395d89b41146109cb57600080fd5b80637fc65b96116102525780637fc65b9614610910578063821482e21461092357806384b1242714610943578063858e6e891461095857806388c3ffb01461096b57806389ef689d1461097e57600080fd5b806373cdc955146108b2578063747dff42146108bf57806376e8424f146108d45780637a917e54146108f45780637dc0d1d0146108fd57600080fd5b80633b1f18dd116103c057806351c6590a116103325780636db70830116102f65780636db70830146108565780636f307dc3146108695780636f4d2b671461087157806370a0823114610884578063715018a614610897578063728313c91461089f57600080fd5b806351c6590a146107f557806355756a1d1461080857806357b622e51461081057806358a01710146108235780635b2c44af1461083657600080fd5b806341744dd41161038457806341744dd4146107665780634484cc691461076f5780634975dc3f1461078f5780634e5b611e146107ba5780634e71d92d146107da5780634ec501b2146107e257600080fd5b80633b1f18dd146106ed5780633b6050471461070d5780633c45e7361461072d5780633cc1f54c1461074057806340dd37f61461075357600080fd5b80631f26255611610459578063313ce5671161041d578063313ce567146106705780633203ba771461067f57806333eca6341461068757806339509351146106a757806339bd0430146106ba5780633a8bcc91146106cd57600080fd5b80631f262556146105db5780631f38f5c6146105fb578063221937e01461061a57806323b872dd1461062d5780632bed99a31461064057600080fd5b80630d12872d116104ab5780630d12872d1461057c57806311da60b41461059c57806318160ddd146105a457806319f4ff2f146105ac5780631bd59029146105bf5780631bd5ff28146105c857600080fd5b8063017e7e58146104e857806306fdde031461051857806309300a331461052d578063095ea7b3146105445780630c7461d614610567575b600080fd5b6017546104fb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610520610ce8565b60405161050f91906146c2565b61053660195481565b60405190815260200161050f565b6105576105523660046142e5565b610d7a565b604051901515815260200161050f565b61057a610575366004614186565b610d91565b005b61053661058a3660046143b0565b60146020526000908152604090205481565b61057a610e9f565b600b54610536565b61057a6105ba3660046143b0565b611076565b610536601f5481565b61057a6105d636600461413a565b6110aa565b6105366105e93660046143b0565b60296020526000908152604090205481565b601e5461060d90610100900460ff1681565b60405161050f9190614670565b6105366106283660046143b0565b6110fb565b61055761063b36600461425e565b611133565b61066361064e3660046143b0565b60156020526000908152604090205460ff1681565b60405161050f919061465d565b6040516012815260200161050f565b601a54610536565b6105366106953660046143b0565b60026020526000908152604090205481565b6105576106b53660046142e5565b6111e4565b61057a6106c836600461430e565b61121b565b6105366106db3660046143b0565b600e6020526000908152604090205481565b6105366106fb3660046143b0565b60066020526000908152604090205481565b61072061071b36600461413a565b611312565b60405161050f9190614607565b61057a61073b3660046143b0565b6113af565b61057a61074e3660046143b0565b611486565b6105366107613660046143b0565b61150a565b61053660185481565b61053661077d3660046143b0565b60106020526000908152604090205481565b61053661079d3660046143e0565b600360209081526000928352604080842090915290825290205481565b6105366107c83660046143b0565b60116020526000908152604090205481565b61057a611518565b6105366107f03660046143b0565b6115b1565b61057a6108033660046143b0565b6115bf565b61057a61162b565b61057a61081e3660046143b0565b611725565b6105366108313660046143b0565b6117fa565b6105366108443660046143b0565b60286020526000908152604090205481565b610720610864366004614299565b611832565b6105206118bc565b61053661087f3660046143b0565b61194a565b61053661089236600461413a565b611978565b61057a611993565b61057a6108ad3660046143b0565b611a0c565b601e546106639060ff1681565b6108c7611aa1565b60405161050f9190614864565b6108e76108e23660046142e5565b611ab9565b60405161050f9190614872565b61053660205481565b6026546104fb906001600160a01b031681565b61053661091e3660046143b0565b611b32565b6105366109313660046143b0565b60046020526000908152604090205481565b61094b611ba4565b60405161050f91906147ee565b6105366109663660046143b0565b611cff565b6108c76109793660046143b0565b611d0d565b61053660255481565b6104fb611d97565b61053661099d3660046143b0565b60056020526000908152604090205481565b6105366109bd3660046143b0565b611da6565b61053660215481565b610520611dc7565b61053660245481565b6105366109ea3660046143b0565b611dd6565b61057a6109fd3660046143b0565b611de4565b610536610a103660046143b0565b600f6020526000908152604090205481565b610557610a303660046142e5565b611e0c565b610557610a433660046142e5565b611ea7565b60265461055790600160a81b900460ff1681565b601c546104fb906001600160a01b031681565b610536610a7d3660046143e0565b600160209081526000928352604080842090915290825290205481565b610536610aa83660046143b0565b60136020526000908152604090205481565b610acd610ac83660046143b0565b611eb4565b6040805193845260208401929092529082015260600161050f565b610acd610af6366004614402565b611ed3565b61057a610b093660046143b0565b611fcd565b610b21610b1c36600461435d565b6120b8565b60405161050f91906145b9565b610536610b3c366004614154565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b610536610b753660046143b0565b60006020819052908152604090205481565b610b9a610b95366004614402565b61213a565b604080519586526020860194909452928401919091526060830152608082015260a00161050f565b610b9a610bd03660046143b0565b612250565b610536610be33660046143b0565b612276565b610536610bf63660046143b0565b6122a5565b610536610c093660046143b0565b60126020526000908152604090205481565b610536610c293660046143e0565b602760209081526000928352604080842090915290825290205481565b610c59610c5436600461413a565b6122d6565b60405161050f93929190614893565b61057a610c7636600461413a565b6123be565b61057a610c8936600461413a565b6124ae565b61057a610c9c3660046143b0565b6124ff565b60265461055790600160a01b900460ff1681565b610536610cc336600461413a565b60226020526000908152604090205481565b601b546104fb906001600160a01b031681565b6060600c8054610cf790614a6a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2390614a6a565b8015610d705780601f10610d4557610100808354040283529160200191610d70565b820191906000526020600020905b815481529060010190602001808311610d5357829003601f168201915b5050505050905090565b6000610d8733848461252a565b5060015b92915050565b602654600160a01b900460ff1615610dd85760405162461bcd60e51b81526020600482015260056024820152640696e6974360dc1b60448201526064015b60405180910390fd5b6026805460ff60a01b1916600160a01b179055601c80546001600160a01b038089166001600160a01b031992831617909255601b8054928816929091169190911790558351610e2e90601d906020870190613fac565b50601e805484919060ff19166001836002811115610e5c57634e487b7160e01b600052602160045260246000fd5b0217905550601e805483919061ff001916610100836003811115610e9057634e487b7160e01b600052602160045260246000fd5b0217905550601f555050505050565b601954600090815260116020526040902054421015610eec5760405162461bcd60e51b8152602060048201526009602482015268746f6f206561726c7960b81b6044820152606401610dcf565b60195460009081526015602052604081205460ff166002811115610f2057634e487b7160e01b600052602160045260246000fd5b14610f575760405162461bcd60e51b81526020600482015260076024820152661cd95d1d1b195960ca1b6044820152606401610dcf565b6026546019546000908152601160205260408082205490516359fb1e3d60e11b815291926001600160a01b03169163b3f63c7a91610f9b91601d91906004016146d5565b60206040518083038186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb91906143c8565b90508061100a5760405162461bcd60e51b8152600401610dcf90614726565b6019546000908152600f6020526040902081905561102661264f565b6000806110316128b8565b9150915061105430602860006019548152602001908152602001600020546129ea565b601954600090815260296020526040902081905561107182612b27565b505050565b3361107f611d97565b6001600160a01b0316146110a55760405162461bcd60e51b8152600401610dcf9061474b565b601855565b336110b3611d97565b6001600160a01b0316146110d95760405162461bcd60e51b8152600401610dcf9061474b565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602090815260408083203084528252808320548484526004909252822054829161112c9190612dc7565b9392505050565b6000611140848484612de9565b6001600160a01b0384166000908152600a60209081526040808320338452909152902054828110156111c55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610dcf565b6111d985336111d48685614a27565b61252a565b506001949350505050565b336000818152600a602090815260408083206001600160a01b03871684529091528120549091610d879185906111d49086906148e5565b6019546001600160a01b038616600090815260236020526040902086916112429190612faf565b61126c576019546001600160a01b038216600090815260236020526040902061126a91612fc7565b505b602654600160a81b900460ff16156112af5760405162461bcd60e51b8152600401610dcf906020808252600490820152631a5b9a5d60e21b604082015260600190565b60268054600161ff0160a01b0319166001600160a01b03841617600160a81b179055602084905560218390556112e485612b27565b6019546001600160a01b03871660009081526022602052604090205561130a8686612fd3565b505050505050565b606060005b6001600160a01b0383166000908152602360205260409020611338906130a0565b8110156113a9576001600160a01b03831660009081526023602052604081206113679085906108e290856130aa565b90508083838151811061138a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806113a190614a9f565b915050611317565b50919050565b33600090815260226020526040902054156113cc576113cc611518565b60195433600081815260236020526040902090916113ea9190612faf565b611414576019546001600160a01b038216600090815260236020526040902061141291612fc7565b505b600061142b601854846130b690919063ffffffff16565b9050611444601954828561143f9190614a27565b6130d8565b61146733306114538487614a27565b601c546001600160a01b03169291906131f7565b601754601c54611071916001600160a01b0391821691339116846131f7565b33600090815260226020526040902054156114a3576114a3611518565b60006114b160195483613268565b905060006114ca601854836130b690919063ffffffff16565b90506114ed336114da8385614a27565b601c546001600160a01b031691906132b8565b601754601c54611071916001600160a01b039182169116836132b8565b6000610d8b601954836132e8565b600080611524336122d6565b9250509150806000141561156e5760405162461bcd60e51b815260206004820152601160248201527073706561722f736869656c64207a65726f60781b6044820152606401610dcf565b611579823383613322565b6115848233836133be565b33600081815260226020526040812055601c546115ad916001600160a01b0390911690836132b8565b5050565b6000610d8b6019548361344d565b60195433600081815260236020526040902090916115dd9190612faf565b611607576019546001600160a01b038216600090815260236020526040902061160591612fc7565b505b6116136019548361347f565b601c546115ad906001600160a01b03163330856131f7565b336000908152602a602052604081208190611645906130a0565b9050806116865760405162461bcd60e51b815260206004820152600f60248201526e139bdd08105c1c1bda5b9d1b595b9d608a1b6044820152606401610dcf565b60005b8181101561170d57336000908152602a602052604081206116aa90836130aa565b6000818152602860209081526040808320546027835281842033855283528184205485855260299093529220549293506116ed926116e7916130b6565b90612dc7565b6116f790856148e5565b935050808061170590614a9f565b915050611689565b50601c546115ad906001600160a01b031633846132b8565b60255461173133611978565b101561176f5760405162461bcd60e51b815260206004820152600d60248201526c06e6f7420656e6f756768206c7609c1b6044820152606401610dcf565b670de0b6b3a764000081106117965760405162461bcd60e51b8152600401610dcf90614726565b60208190556117ad81670de0b6b3a7640000614a27565b60218190556020805460408051338152928301919091528101919091527ff6b8a92f9bdaf1c98998652be215c78364778cd8decd80347d680b38b0a09bbc9060600160405180910390a150565b6000818152600560209081526040808320546004835281842054600690935290832054909161182891614a27565b610d8b9190614a27565b606060005b82518110156118b55760006118738585848151811061186657634e487b7160e01b600052603260045260246000fd5b6020026020010151611ab9565b90508083838151811061189657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806118ad90614a9f565b915050611837565b5092915050565b601d80546118c990614a6a565b80601f01602080910402602001604051908101604052809291908181526020018280546118f590614a6a565b80156119425780601f1061191757610100808354040283529160200191611942565b820191906000526020600020905b81548152906001019060200180831161192557829003601f168201915b505050505081565b600081815260016020908152604080832030845282528083205484845291839052822054610d8b9190614a27565b6001600160a01b031660009081526009602052604090205490565b3361199c611d97565b6001600160a01b0316146119c25760405162461bcd60e51b8152600401610dcf9061474b565b6016546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601680546001600160a01b0319169055565b3360009081526022602052604090205415611a2957611a29611518565b6019543360008181526023602052604090209091611a479190612faf565b611a71576019546001600160a01b0382166000908152602360205260409020611a6f91612fc7565b505b6000611a88601854846130b690919063ffffffff16565b90506114446019548285611a9c9190614a27565b6134d8565b611aa9614030565b611ab4601954611d0d565b905090565b611add60405180606001604052806000815260200160008152602001600081525090565b50604080516060810182528281526000838152600160209081528382206001600160a01b0387168084529082528483205482850152858352600382528483209083529052829020549181019190915292915050565b60008181526010602090815260408083205460119092528220548291611b7691611b5c9190614a27565b6000858152601160205260409020546116e7904290614a27565b611b8890670de0b6b3a7640000614a27565b9050611b93816135b5565b61112c90662386f26fc10000614a08565b611bde6040805160c08101825260608152600060208201819052909182019081526020016000815260200160008152602001600081525090565b6040518060c00160405280601d8054611bf690614a6a565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2290614a6a565b8015611c6f5780601f10611c4457610100808354040283529160200191611c6f565b820191906000526020600020905b815481529060010190602001808311611c5257829003601f168201915b5050509183525050601c546001600160a01b03166020820152601e5460409091019060ff166002811115611cb357634e487b7160e01b600052602160045260246000fd5b8152602001601e60019054906101000a900460ff166003811115611ce757634e487b7160e01b600052602160045260246000fd5b8152602001601f548152602001601854815250905090565b6000610d8b6019548361361f565b611d15614030565b6040518060e00160405280611d29846110fb565b8152602001611d37846122a5565b815260008481526012602090815260408083205482850152868352601382528083205481850152868352601482528083205460608501528683526010825280832054608085015295825260119052939093205460a0909301929092525090565b6016546001600160a01b031690565b601a8181548110611db657600080fd5b600091825260209091200154905081565b6060600d8054610cf790614a6a565b6000610d8b6019548361364c565b6000611df260195483613679565b601c549091506115ad906001600160a01b031633836132b8565b336000908152600a602090815260408083206001600160a01b038616845290915281205482811015611e8e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610dcf565b611e9d33856111d48685614a27565b5060019392505050565b6000610d87338484612de9565b6000806000611ec560195485611ed3565b9250925092505b9193909250565b600080600080611ee28661194a565b90506000611eef87612276565b90506000818311611f005781611f02565b825b9050611f36611f10600b5490565b60008a8152600660205260409020546116e7908a90611f30908690614a27565b906130b6565b9550611f5d611f4489611b32565b611f5690670de0b6b3a7640000614a27565b87906130b6565b9550611f8f611f6b600b5490565b60008a81526001602090815260408083203084529091529020546116e7908a6130b6565b9450611fc1611f9d600b5490565b60008a81526003602090815260408083203084529091529020546116e7908a6130b6565b93505050509250925092565b6000611fd833611978565b90508181101561201a5760405162461bcd60e51b815260206004820152600d60248201526c04e6f7420456e6f756768204c5609c1b6044820152606401610dcf565b6019546000908152602760209081526040808320338452909152812080548392906120469084906148e5565b90915550506019546000908152602860205260408120805483929061206c9084906148e5565b9091555050601954336000908152602a6020526040902061208c91612faf565b6120ad57601954336000908152602a602052604090206120ab91612fc7565b505b611071333084611133565b606060005b82518110156113a95760006120f88483815181106120eb57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d0d565b90508083838151811061211b57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061213290614a9f565b9150506120bd565b600082815260056020908152604080832054600490925282205482918291829182918291612167916148e5565b6000898152600460205260409020549091506121899082906116e7908a6130b6565b6000898152600560205260409020549096506121ab9082906116e7908a6130b6565b60008981526001602090815260408083203084529091529020549095506121d89082906116e7908a6130b6565b60008981526003602090815260408083203084529091529020549094506122059082906116e7908a6130b6565b9250612210600b5490565b61221c57869150612245565b600088815260066020526040902054612242906116e761223b600b5490565b8a906130b6565b91505b509295509295909350565b60008060008060006122646019548761213a565b939a9299509097509550909350915050565b60008181526003602090815260408083203084528252808320548484526002909252822054610d8b9190614a27565b60008181526003602090815260408083203084528252808320548484526005909252822054829161112c9190612dc7565b6001600160a01b0381166000908152602260209081526040808320548084526015909252822054909160ff909116908215801590612315575060195483105b15611ecc57600182600281111561233c57634e487b7160e01b600052602160045260246000fd5b141561236b575060008281526001602090815260408083206001600160a01b0387168452909152902054611ecc565b600282600281111561238d57634e487b7160e01b600052602160045260246000fd5b1415611ecc575060008281526003602090815260408083206001600160a01b03871684529091529020549193909250565b336123c7611d97565b6001600160a01b0316146123ed5760405162461bcd60e51b8152600401610dcf9061474b565b6001600160a01b0381166124525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dcf565b6016546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601680546001600160a01b0319166001600160a01b0392909216919091179055565b336124b7611d97565b6001600160a01b0316146124dd5760405162461bcd60e51b8152600401610dcf9061474b565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152602260205260409020541561251c5761251c611518565b60006114b160195483613763565b6001600160a01b03831661258c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610dcf565b6001600160a01b0382166125ed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610dcf565b6001600160a01b038381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000601e54610100900460ff16600381111561267b57634e487b7160e01b600052602160045260246000fd5b141561271557601954600090815260136020908152604080832054600f909252909120541015806126c85750601954600090815260146020908152604080832054600f9092529091205411155b156126f257601954600090815260156020526040902080546001919060ff191682805b0217905550565b601954600090815260156020526040902080546002919060ff19166001836126eb565b6001601e54610100900460ff16600381111561274157634e487b7160e01b600052602160045260246000fd5b141561278c57601954600090815260136020908152604080832054600f90925290912054106126f257601954600090815260156020526040902080546001919060ff191682806126eb565b6002601e54610100900460ff1660038111156127b857634e487b7160e01b600052602160045260246000fd5b141561280357601954600090815260146020908152604080832054600f90925290912054106126f257601954600090815260156020526040902080546001919060ff191682806126eb565b6003601e54610100900460ff16600381111561282f57634e487b7160e01b600052602160045260246000fd5b141561287a57601954600090815260126020908152604080832054600f90925290912054106126f257601954600090815260156020526040902080546001919060ff191682806126eb565b60405162461bcd60e51b8152602060048201526013602482015272756e6b6e6f776e20736574746c65207479706560681b6044820152606401610dcf565b600080600160195460009081526015602052604090205460ff1660028111156128f157634e487b7160e01b600052602160045260246000fd5b14156129255761290260195461194a565b60195460009081526006602052604090205461291e9190614a27565b91506129af565b600260195460009081526015602052604090205460ff16600281111561295b57634e487b7160e01b600052602160045260246000fd5b141561296c57612902601954612276565b60405162461bcd60e51b81526020600482015260186024820152771b9bdd0818dbdc9c9958dd081c9bdd5b99081c995cdd5b1d60421b6044820152606401610dcf565b6129d86129bb600b5490565b6019546000908152602860205260409020546116e79085906130b6565b90506129e48183614a27565b91509091565b6001600160a01b038216612a4a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610dcf565b6001600160a01b03821660009081526009602052604090205481811015612abe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610dcf565b612ac88282614a27565b6001600160a01b038416600090815260096020526040812091909155600b8054849290612af6908490614a27565b90915550506040518281526000906001600160a01b03851690600080516020614b1083398151915290602001612642565b602654601e5460009182916001600160a01b039091169063f3c9f8f79060ff166002811115612b6657634e487b7160e01b600052602160045260246000fd5b6040518263ffffffff1660e01b8152600401612b8491815260200190565b604080518083038186803b158015612b9b57600080fd5b505afa158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd39190614423565b6019829055601a805460018101825560009182527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e01839055602654601e54939550919350918291829182916001600160a01b03169063d39f696490601d9060ff166002811115612c5457634e487b7160e01b600052602160045260246000fd5b601e54610100900460ff166003811115612c7e57634e487b7160e01b600052602160045260246000fd5b601f546040518563ffffffff1660e01b8152600401612ca094939291906146f7565b60806040518083038186803b158015612cb857600080fd5b505afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190614446565b9350935093509350612d0560195430896137b0565b612d12601954308961383f565b612d32601954612d2d896020546130b690919063ffffffff16565b6138ce565b612d52601954612d4d896021546130b690919063ffffffff16565b613918565b601980546000908152600e6020908152604080832097909755825482526010815286822098909855815481526011885285812096909655805486526012875284862093909355825485526013865283852091909155815484526014855282842055548252601590925220805460ff1916905550565b600061112c82612de3612ddc6012600a614960565b8690613936565b90613942565b6001600160a01b038316612e4d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610dcf565b6001600160a01b038216612eaf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610dcf565b6001600160a01b03831660009081526009602052604090205481811015612f275760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610dcf565b612f318282614a27565b6001600160a01b038086166000908152600960205260408082209390935590851681529081208054849290612f679084906148e5565b92505081905550826001600160a01b0316846001600160a01b0316600080516020614b1083398151915284604051612fa191815260200190565b60405180910390a350505050565b6000818152600183016020526040812054151561112c565b600061112c838361394e565b6001600160a01b0382166130295760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610dcf565b80600b600082825461303b91906148e5565b90915550506001600160a01b038216600090815260096020526040812080548392906130689084906148e5565b90915550506040518181526001600160a01b03831690600090600080516020614b108339815191529060200160405180910390a35050565b6000610d8b825490565b600061112c838361399d565b60006130c46012600a614960565b6130ce8484613936565b61112c91906148fd565b60006130e4838361361f565b600084815260016020908152604080832030808552908352818420548885526003845282852091855292529091205460075492935090916131416131288585614a27565b6000888152600460205260409020546116e790886148e5565b106131b7576131718561315f846007546130b690919063ffffffff16565b60009182526004602052604090912055565b61317b8585613a31565b61318785303386613a4f565b6131b2856131a0836008546130b690919063ffffffff16565b60009182526005602052604090912055565b6131f0565b6131c185856138ce565b6131cd85303386613a4f565b6131f0856131a0836131de896110fb565b611f3090670de0b6b3a7640000614a27565b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526132629085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613b4e565b50505050565b600061327483836132e8565b600084815260016020908152604080832030845290915290205490915061329b8483613c20565b6132a784333086613c61565b6118b58461315f836131de886122a5565b6040516001600160a01b03831660248201526044810182905261107190849063a9059cbb60e01b9060640161322b565b6000828152600360209081526040808320308452825280832054858452600590925282205461331a9084908390613d52565b949350505050565b60008381526001602090815260408083206001600160a01b038616845290915281208054839290613354908490614a27565b909155505060008381526020819052604081208054839290613377908490614a27565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca906133b190600090859085906146a3565b60405180910390a1505050565b60008381526003602090815260408083206001600160a01b0386168452909152812080548392906133f0908490614a27565b909155505060008381526002602052604081208054839290613413908490614a27565b90915550506040517fe1b6e34006e9871307436c226f232f9c5e7690c1d2c4f4adda4f607a75a9beca906133b190600190859085906146a3565b6000828152600160209081526040808320308452825280832054858452600490925282205461331a9084908390613d52565b6000806000806000613491878761213a565b945094509450945094506134a587866138ce565b6134af8785613918565b6134ba8733856137b0565b6134c587338461383f565b6134cf3382612fd3565b50505050505050565b60006134e4838361364c565b600084815260016020908152604080832030808552908352818420548885526003845282852091855292529091205460075492935090916135416135288584614a27565b6000888152600560205260409020546116e790886148e5565b1061358e5761355f856131a0836007546130b690919063ffffffff16565b6135698585613a31565b61357585303386613c61565b6131b28561315f846008546130b690919063ffffffff16565b6135988585613918565b6135a485303386613c61565b6131f08561315f836131de896122a5565b6000600382111561361057508060006135cf6002836148fd565b6135da9060016148e5565b90505b818110156113a9579050806002816135f581866148fd565b6135ff91906148e5565b61360991906148fd565b90506135dd565b811561361a575060015b919050565b6000828152600460209081526040808320546001835281842030855290925282205461112c918491613d83565b6000828152600560209081526040808320546003835281842030855290925282205461112c918491613d83565b6000806000806136898686611ed3565b6000898152600660209081526040808320546004909252822054949750929550909350916136bd91906116e79087906130b6565b600088815260066020908152604080832054600590925282205492935090916136ec91906116e79088906130b6565b60008981526006602052604081205491925090613716906116e761370f8c6117fa565b89906130b6565b90506137228984613e65565b61372c8983613c20565b6137368982613e83565b613741893087613322565b61374c8930866133be565b61375633896129ea565b5093979650505050505050565b6000828152600360209081526040808320308452909152812054613787848461344d565b91506137938483613e65565b61379f84333086613a4f565b6118b5846131a0836131de886110fb565b60008381526001602090815260408083206001600160a01b0386168452909152812080548392906137e29084906148e5565b9091555050600083815260208190526040812080548392906138059084906148e5565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6906133b190600090859085906146a3565b60008381526003602090815260408083206001600160a01b0386168452909152812080548392906138719084906148e5565b9091555050600083815260026020526040812080548392906138949084906148e5565b90915550506040517f4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6906133b190600190859085906146a3565b600082815260046020526040812080548392906138ec9084906148e5565b90915550506000828152600660205260408120805483929061390f9084906148e5565b90915550505050565b600082815260056020526040812080548392906138ec9084906148e5565b600061112c8284614a08565b600061112c82846148fd565b600081815260018301602052604081205461399557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d8b565b506000610d8b565b815460009082106139fb5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610dcf565b826000018281548110613a1e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000828152600660205260408120805483929061390f9084906148e5565b6001600160a01b038316613a755760405162461bcd60e51b8152600401610dcf90614780565b6001600160a01b038216613a9b5760405162461bcd60e51b8152600401610dcf906147b7565b60008481526001602090815260408083206001600160a01b038716845290915281208054839290613acd908490614a27565b909155505060008481526001602090815260408083206001600160a01b038616845290915281208054839290613b049084906148e5565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b090613b409060009086908690869061467e565b60405180910390a150505050565b6000613ba3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ea19092919063ffffffff16565b8051909150156110715780806020019051810190613bc19190614390565b6110715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610dcf565b60008281526005602052604081208054839290613c3e908490614a27565b90915550506000828152600660205260408120805483929061390f908490614a27565b6001600160a01b038316613c875760405162461bcd60e51b8152600401610dcf90614780565b6001600160a01b038216613cad5760405162461bcd60e51b8152600401610dcf906147b7565b60008481526003602090815260408083206001600160a01b038716845290915281208054839290613cdf908490614a27565b909155505060008481526003602090815260408083206001600160a01b038616845290915281208054839290613d169084906148e5565b90915550506040517ff2dbd98d79f00f7aff338b824931d607bfcc63d47307162470f25a055102d3b090613b409060019086908690869061467e565b600080613d5f8584614a08565b90506000613d6d86866148e5565b9050613d7981836148fd565b9695505050505050565b6000670de05bc096e9c000613d988484612dc7565b10613da457508261112c565b6000613dca613dbb612710612de38661270f613936565b613dc59086614a08565b6135b5565b90506000613ded613de361270f612de387612710613936565b613dc59087614a08565b905081613dfa86886148e5565b1115613e3457848287613e0d8488614a27565b613e1791906148e5565b613e219190614a27565b613e2b91906148e5565b9250505061112c565b6000613e408786614a08565b90506000613e4e88886148e5565b9050613e5a81836148fd565b94505050505061112c565b60008281526004602052604081208054839290613c3e908490614a27565b6000828152600660205260408120805483929061390f908490614a27565b606061331a848460008585843b613efa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610dcf565b600080866001600160a01b03168587604051613f16919061459d565b60006040518083038185875af1925050503d8060008114613f53576040519150601f19603f3d011682016040523d82523d6000602084013e613f58565b606091505b5091509150613f68828286613f73565b979650505050505050565b60608315613f8257508161112c565b825115613f925782518084602001fd5b8160405162461bcd60e51b8152600401610dcf91906146c2565b828054613fb890614a6a565b90600052602060002090601f016020900481019282613fda5760008555614020565b82601f10613ff357805160ff1916838001178555614020565b82800160010185558215614020579182015b82811115614020578251825591602001919060010190614005565b5061402c92915061406d565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b8082111561402c576000815560010161406e565b80356001600160a01b038116811461361a57600080fd5b600082601f8301126140a9578081fd5b8135602067ffffffffffffffff8211156140c5576140c5614ae6565b8160051b6140d48282016148b4565b8381528281019086840183880185018910156140ee578687fd5b8693505b858410156141105780358352600193909301929184019184016140f2565b50979650505050505050565b80356003811061361a57600080fd5b80356004811061361a57600080fd5b60006020828403121561414b578081fd5b61112c82614082565b60008060408385031215614166578081fd5b61416f83614082565b915061417d60208401614082565b90509250929050565b60008060008060008060c0878903121561419e578182fd5b6141a787614082565b955060206141b6818901614082565b9550604088013567ffffffffffffffff808211156141d2578485fd5b818a0191508a601f8301126141e5578485fd5b8135818111156141f7576141f7614ae6565b614209601f8201601f191685016148b4565b91508082528b8482850101111561421e578586fd5b8084840185840137810190920184905250935061423d6060880161411c565b925061424b6080880161412b565b915060a087013590509295509295509295565b600080600060608486031215614272578283fd5b61427b84614082565b925061428960208501614082565b9150604084013590509250925092565b600080604083850312156142ab578182fd5b6142b483614082565b9150602083013567ffffffffffffffff8111156142cf578182fd5b6142db85828601614099565b9150509250929050565b600080604083850312156142f7578182fd5b61430083614082565b946020939093013593505050565b600080600080600060a08688031215614325578081fd5b61432e86614082565b945060208601359350604086013592506060860135915061435160808701614082565b90509295509295909350565b60006020828403121561436e578081fd5b813567ffffffffffffffff811115614384578182fd5b61331a84828501614099565b6000602082840312156143a1578081fd5b8151801515811461112c578182fd5b6000602082840312156143c1578081fd5b5035919050565b6000602082840312156143d9578081fd5b5051919050565b600080604083850312156143f2578182fd5b8235915061417d60208401614082565b60008060408385031215614414578182fd5b50508035926020909101359150565b60008060408385031215614435578182fd5b505080516020909101519092909150565b6000806000806080858703121561445b578182fd5b505082516020840151604085015160609095015191969095509092509050565b6004811061448b5761448b614ad0565b9052565b600081518084526144a7816020860160208601614a3e565b601f01601f19169290920160200192915050565b8054600090600181811c90808316806144d557607f831692505b60208084108214156144f557634e487b7160e01b86526022600452602486fd5b8388526020880182801561451057600181146145215761454c565b60ff1987168252828201975061454c565b60008981526020902060005b878110156145465781548482015290860190840161452d565b83019850505b5050505050505092915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b600082516145af818460208701614a3e565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156145fb576145e8838551614559565b9284019260e092909201916001016145d5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156145fb5761464a8385518051825260208082015190830152604090810151910152565b9284019260609290920191600101614623565b6020810161466a83614afc565b91905290565b60208101610d8b828461447b565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b9283526001600160a01b03919091166020830152604082015260600190565b60208152600061112c602083018461448f565b6040815260006146e860408301856144bb565b90508260208301529392505050565b60808152600061470a60808301876144bb565b6020830195909552506040810192909252606090910152919050565b6020808252600b908201526a383934b1b29032b93937b960a91b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f66726f6d2073686f756c64206e6f742062652061646472657373283029000000604082015260600190565b6020808252601b908201527f746f2073686f756c64206e6f7420626520616464726573732830290000000000604082015260600190565b602081526000825160c0602084015261480a60e084018261448f565b905060018060a01b036020850151166040840152604084015161482c81614afc565b806060850152506060840151614845608085018261447b565b50608084015160a084015260a084015160c08401528091505092915050565b60e08101610d8b8284614559565b81518152602080830151908201526040808301519082015260608101610d8b565b838152606081016148a384614afc565b602082019390935260400152919050565b604051601f8201601f1916810167ffffffffffffffff811182821017156148dd576148dd614ae6565b604052919050565b600082198211156148f8576148f8614aba565b500190565b60008261491857634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561495857816000190482111561493e5761493e614aba565b8085161561494b57918102915b93841c9390800290614922565b509250929050565b600061112c838360008261497657506001610d8b565b8161498357506000610d8b565b816001811461499957600281146149a3576149bf565b6001915050610d8b565b60ff8411156149b4576149b4614aba565b50506001821b610d8b565b5060208310610133831016604e8410600b84101617156149e2575081810a610d8b565b6149ec838361491d565b8060001904821115614a0057614a00614aba565b029392505050565b6000816000190483118215151615614a2257614a22614aba565b500290565b600082821015614a3957614a39614aba565b500390565b60005b83811015614a59578181015183820152602001614a41565b838111156132625750506000910152565b600181811c90821680614a7e57607f821691505b602082108114156113a957634e487b7160e01b600052602260045260246000fd5b6000600019821415614ab357614ab3614aba565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110614b0c57614b0c614ad0565b5056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202bf86c9ca4a0729e7247dd0e31234f35dba417299fec070eeed87b558881f4a964736f6c63430008040033a2646970667358221220e9aef23d2f4bf7755a3f41e6efc70e8cb5d1489031ba690c2fee990d7f20dd8064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}