{
  "address": "0x4768e53c53377F84d092aCd3127Ea3D227914d99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "addBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "containBattle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_trackName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_priceName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_spearPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shieldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_range",
          "type": "uint256"
        },
        {
          "internalType": "enum RangeType",
          "name": "_ry",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "durType",
          "type": "uint256"
        }
      ],
      "name": "createBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBattle",
      "outputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleDur",
          "type": "uint256"
        }
      ],
      "name": "getDurationTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "removeBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb532f986751604b0ab6c4deef2068c6bbbd0b5607d3ed54aee8c924baa416e2",
  "receipt": {
    "to": null,
    "from": "0x77Bec02085C22d64e3c9D8022B2aE1B648563d3d",
    "contractAddress": "0x4768e53c53377F84d092aCd3127Ea3D227914d99",
    "transactionIndex": 10,
    "gasUsed": "4466439",
    "logsBloom": "0x
    "blockHash": "0xaa7e9073298dafb22de991fd323dcf0c67c623269f91c6285eb1f50016668ba6",
    "transactionHash": "0xcb532f986751604b0ab6c4deef2068c6bbbd0b5607d3ed54aee8c924baa416e2",
    "logs": [],
    "blockNumber": 10191702,
    "cumulativeGasUsed": "5354313",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "03aa00df5a92d1f58af372b6b585d82c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"addBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"containBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_priceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spearPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shieldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"},{\"internalType\":\"enum RangeType\",\"name\":\"_ry\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"durType\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBattle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleDur\",\"type\":\"uint256\"}],\"name\":\"getDurationTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"removeBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBattle(address,address,string,string,uint256,uint256,uint256,uint256,uint8,uint256)\":{\"params\":{\"_collateral\":\"collateral token address, eg. DAI\",\"_oracle\":\"oracle contract address\",\"_priceName\":\"eg. BTC\",\"_range\":\"price range, eg. 5%=>5*10**16;if _ry is 3, then will a price\",\"_ry\":\"range type, 0=>TwoWay, 1=>Positive, 2=>negative, 3=> Number\",\"_shieldPrice\":\"init price of shield, eg. 0.5*10**18\",\"_spearPrice\":\"init price of spear, eg. 0.5*10**18\",\"_trackName\":\"battle's track name, eg. WBTC-DAI\",\"amount\":\"collateral's amount\",\"durType\":\"0=> day, 1=> week, 2=> month\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arena.sol\":\"Arena\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc28d9f2ac7088d478d86ec6c0e1dadd48af1b2d0c1f6d497f9b652339e3002ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xfc0ee08ded0c86b74739af77f6281bf6a0427318f1e9bd6c4f74eedd03356c26\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23ebf6e219f634c3cc7445147368066dbfb5c1278fc4c48edbb9e0bd38aa4151\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x21d8a5dd396bee41e4a039d150af08b66b6d09eef416daf8e5edf13ef219084e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Arena.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./Battle.sol\\\";\\nimport \\\"./structs/RangeType.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract Arena {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    EnumerableSetUpgradeable.AddressSet private battleSet;\\n\\n    function battleLength() public view returns (uint256 len) {\\n\\n        len = battleSet.length();\\n    }\\n\\n    function addBattle(address _battle) public {\\n        battleSet.add(_battle);\\n    }\\n\\n    function getBattle(uint index) public view returns(address _battle) {\\n        _battle = battleSet.at(index);\\n    } \\n\\n    function removeBattle(address _battle) public {\\n        battleSet.remove(_battle);\\n    }\\n\\n    function containBattle(address _battle) public view returns(bool){\\n        return battleSet.contains(_battle);\\n    }\\n    /** \\n     * @param _collateral collateral token address, eg. DAI\\n     * @param _oracle oracle contract address\\n     * @param _trackName battle's track name, eg. WBTC-DAI\\n     * @param _priceName eg. BTC\\n     * @param amount collateral's amount\\n     * @param _spearPrice init price of spear, eg. 0.5*10**18\\n     * @param _shieldPrice init price of shield, eg. 0.5*10**18\\n     * @param _range price range, eg. 5%=>5*10**16;if _ry is 3, then will a price\\n     * @param _ry range type, 0=>TwoWay, 1=>Positive, 2=>negative, 3=> Number\\n     * @param durType 0=> day, 1=> week, 2=> month\\n     */\\n    function createBattle(\\n        address  _collateral,\\n        IOracle _oracle,\\n        string memory _trackName,\\n        string memory _priceName,\\n        uint256 amount,\\n        uint256 _spearPrice,\\n        uint256 _shieldPrice,\\n        uint256 _range,\\n        RangeType _ry,\\n        uint durType\\n    ) public {\\n        IERC20Upgradeable(_collateral).safeTransferFrom(msg.sender, address(this), amount);\\n        // bytes32 salt = keccak256(abi.encodePacked(_collateral, _trackName, block.timestamp));\\n        // address battle =\\n        //     Create2Upgradeable.deploy(\\n        //         0,\\n        //         salt,\\n        //         type(Battle).creationCode\\n        //     );\\n        Battle battle = new Battle(_collateral, _oracle, _trackName, _priceName);\\n        IERC20Upgradeable(_collateral).safeTransfer(address(this), amount);\\n        battle.init(msg.sender, amount, _spearPrice, _shieldPrice, _range, _ry, durType);\\n        battleSet.add(address(battle));\\n    }\\n\\n    function getDurationTs(uint battleDur)\\n        public\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        if (battleDur == 0) {\\n            start = block.timestamp - (block.timestamp % 86400);\\n            end = start + 86400;\\n        } else if (battleDur == 1) {\\n            start = block.timestamp - ((block.timestamp + 259200) % 604800);\\n            end = start + 604800;\\n        } else if (battleDur == 2) {\\n\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc6a4f527af2ce56fba485df02fe3a01baed1c22f46e4cf3d1af446b3983fb3c2\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBattle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./lib/DMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./structs/RoundInfo.sol\\\";\\nimport \\\"./algo/Pricing.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**@title Battle contains multi-round */\\ncontract Battle is Ownable, Initializable, ERC20{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeDecimalMath for uint256;\\n    using DMath for uint256;\\n\\n    IOracle public oracle;\\n\\n    /// @dev user's spear balance per round\\n    mapping(uint256 => mapping(address => uint256)) public spearBalanceOf;\\n    mapping(uint256 => uint256) public totalSpear;\\n    /// @dev user's shield balance per round\\n    mapping(uint256 => mapping(address => uint256)) public shieldBalanceOf;\\n    mapping(uint256 => uint256) public totalShield;\\n    /// @dev collateral token belong to spear side\\n    mapping(uint256 => uint256) public collateralSpear;\\n    /// @dev collateral token belong to shield side\\n    mapping(uint256 => uint256) public collateralShield;\\n    /// @dev collateral token belong to non-spear and non-shield\\n    mapping(uint256 => uint256) public collateralSurplus;\\n    /// @dev spear amount belong to the battle contract per round\\n    // mapping(uint => uint) public spearNum;\\n    /// @dev shield amount belong to the battle contract per round\\n    // mapping(uint => uint) public shieldNum;\\n    mapping(uint256 => uint256) public spearPrice;\\n    mapping(uint256 => uint256) public shieldPrice;\\n    mapping(address => uint256) public userStartRoundSS;\\n    mapping(address => uint256) public userStartRoundLP;\\n\\n    mapping(uint => uint) public collateral;\\n\\n    string public trackName;\\n    string public priceName;\\n\\n    uint256 public currentRoundId;\\n    uint256[] public roundIds;\\n    mapping(uint256 => RoundInfo) public rounds;\\n\\n    IERC20 public collateralToken;\\n\\n    mapping(uint256 => uint256) public sqrt_k_spear;\\n    mapping(uint256 => uint256) public sqrt_k_shield;\\n\\n    bool public isFirst = true;\\n    uint256 public battleDur;\\n\\n    function roundIdsLen() public view returns (uint256) {\\n        return roundIds.length;\\n    }\\n\\n    constructor(\\n        address _collateral,\\n        IOracle _oracle,\\n        string memory _trackName,\\n        string memory _priceName\\n    ) ERC20(\\\"Battle Liquilidity Token\\\", \\\"blp\\\") {\\n        collateralToken = IERC20(_collateral);\\n        oracle = _oracle;\\n        trackName = _trackName;\\n        priceName = _priceName;\\n    }\\n\\n    /// @dev init the battle and set the first round's params\\n    /// this function will become the start point\\n    /// @param amount The amount of collateral, the collateral can be any ERC20 token contract, such as dai\\n    /// @param _spearPrice Init price of spear\\n    /// @param _shieldPrice Init price of shield\\n    /// @param _range The positive and negative range of price changes\\n    function init(\\n        address creater,\\n        uint256 amount,\\n        uint256 _spearPrice,\\n        uint256 _shieldPrice,\\n        uint256 _range,\\n        RangeType _ry,\\n        uint256 _battleDur\\n    ) external {\\n        require(isFirst, \\\"not first init\\\");\\n        require(\\n            _battleDur == 0 || _battleDur == 1 || _battleDur == 2,\\n            \\\"Not support battle duration\\\"\\n        );\\n        battleDur = _battleDur;\\n        isFirst = false;\\n        require(\\n            _spearPrice.add(_shieldPrice) == 1e18,\\n            \\\"Battle::init:spear + shield should 1\\\"\\n        );\\n        // require(block.timestamp <= _startTS, \\\"Battle::_startTS should in future\\\");\\n        (uint256 _startTS, uint256 _endTS) = getDurationTs();\\n        currentRoundId = _startTS;\\n        roundIds.push(_startTS);\\n        uint256 price = oracle.price(priceName);\\n        // uint priceUnder = price.multiplyDecimal(uint(1e18).sub(_range));\\n        // uint priceSuper = price.multiplyDecimal(uint(1e18).add(_range));\\n        rounds[_startTS] = RoundInfo({\\n            spearPrice: _spearPrice,\\n            shieldPrice: _shieldPrice, // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: _startTS,\\n            endTS: _endTS,\\n            range: _range,\\n            ry: _ry, // targetPriceUnder: priceUnder,\\n            targetPriceUnder: price.multiplyDecimal(uint256(1e18).sub(_range)), // targetPriceSuper: priceSuper,\\n            targetPriceSuper: price.multiplyDecimal(uint256(1e18).add(_range)),\\n            roundResult: RoundResult.NonResult\\n        });\\n\\n        spearBalanceOf[currentRoundId][address(this)] = amount;\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = amount;\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(amount);\\n        collateralSpear[currentRoundId] = _spearPrice.multiplyDecimal(amount);\\n        collateralShield[currentRoundId] = _shieldPrice.multiplyDecimal(amount);\\n        spearPrice[currentRoundId] = _spearPrice;\\n        shieldPrice[currentRoundId] = _shieldPrice;\\n        // lpBalanceOf[currentRoundId][creater] = amount;\\n        _mint(creater, amount);\\n        userStartRoundLP[creater] = currentRoundId;\\n        // lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(\\n        //     amount\\n        // );\\n\\n        // collateralToken.safeTransferFrom(creater, address(this), amount);\\n    }\\n\\n    /// @dev The price of spear will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of collateral token, collateral token should a ERC20 token\\n    /// @dev user has three status: has spear before this round, first this round , not first for this round\\n    function buySpear(uint256 amount) external {\\n        if (userStartRoundSS[msg.sender] < currentRoundId) {\\n            claim();\\n        }\\n        userStartRoundSS[msg.sender] = currentRoundId;\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint256 spearOut, bool isBigger, uint256 pre_k) =\\n            getAmountOut(\\n                amount,\\n                collateralSpear[currentRoundId],\\n                spearBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_spear[currentRoundId]\\n            );\\n        sqrt_k_spear[currentRoundId] = pre_k;\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(\\n            amount\\n        );\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(spearOut);\\n        spearBalanceOf[currentRoundId][msg.sender] = spearBalanceOf[\\n            currentRoundId\\n        ][msg.sender]\\n            .add(spearOut);\\n        if (isBigger) {\\n            collateralShield[currentRoundId] = shieldBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .div(100);\\n        } else {\\n            collateralShield[currentRoundId] = spearBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .sub(collateralSpear[currentRoundId])\\n                .multiplyDecimal(shieldBalanceOf[currentRoundId][address(this)])\\n                .divideDecimal(spearBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function _setPrice() internal {\\n        uint256 spearPriceNow =\\n            collateralSpear[currentRoundId].divideDecimal(\\n                spearBalanceOf[currentRoundId][address(this)]\\n            );\\n        uint256 shieldPriceNow =\\n            collateralShield[currentRoundId].divideDecimal(\\n                shieldBalanceOf[currentRoundId][address(this)]\\n            );\\n        if (spearPriceNow >= 99e16 || shieldPriceNow >= 99e16) {\\n            if (spearPriceNow >= 99e16) {\\n                spearPrice[currentRoundId] = 99e16;\\n                shieldPrice[currentRoundId] = 1e16;\\n            } else {\\n                spearPrice[currentRoundId] = 1e16;\\n                shieldPrice[currentRoundId] = 99e16;\\n            }\\n        } else {\\n            spearPrice[currentRoundId] = spearPriceNow;\\n            shieldPrice[currentRoundId] = shieldPriceNow;\\n        }\\n    }\\n\\n    function spearSold(uint256 _roundId) public view returns (uint256) {\\n        return\\n            totalSpear[_roundId].sub(spearBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function buySpearOut(uint256 amount) public view returns (uint256) {\\n        (uint256 spearOut, , ) =\\n            getAmountOut(\\n                amount,\\n                collateralSpear[currentRoundId],\\n                spearBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_spear[currentRoundId]\\n            );\\n        return spearOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    /// @param amount amount of spear to sell\\n    function sellSpear(uint256 amount) external {\\n        uint256 userSpearAmount = spearBalanceOf[currentRoundId][msg.sender];\\n        require(\\n            userSpearAmount >= amount,\\n            \\\"sellSpear::msg.sender has not enough spear to sell\\\"\\n        );\\n        uint256 amountOut = sellSpearOut(amount);\\n        spearBalanceOf[currentRoundId][msg.sender] = userSpearAmount.sub(\\n            amount\\n        );\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function shieldSold(uint256 _roundId) public view returns (uint256) {\\n        return\\n            totalShield[_roundId].sub(shieldBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function sellSpearOut(uint256 amount)\\n        public\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        // todo\\n        if (\\n            collateralSpear[currentRoundId] >=\\n            spearBalanceOf[currentRoundId][address(this)].mul(99).div(100)\\n        ) {\\n            amountOut = sellAmount(\\n                amount,\\n                sqrt_k_spear[currentRoundId],\\n                sqrt_k_spear[currentRoundId]\\n            );\\n        } else {\\n            amountOut = sellAmount(\\n                amount,\\n                spearBalanceOf[currentRoundId][address(this)],\\n                collateralSpear[currentRoundId]\\n            );\\n        }\\n    }\\n\\n    /// @dev The price of shield will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of energy token, energy token should a ERC20 token\\n    function buyShield(uint256 amount) external {\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint256 shieldOut, bool isBigger, uint256 pre_k) =\\n            getAmountOut(\\n                amount,\\n                collateralShield[currentRoundId],\\n                shieldBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_shield[currentRoundId]\\n            );\\n        sqrt_k_shield[currentRoundId] = pre_k;\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(\\n            amount\\n        );\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(shieldOut);\\n        shieldBalanceOf[currentRoundId][msg.sender] = shieldBalanceOf[\\n            currentRoundId\\n        ][msg.sender]\\n            .add(shieldOut);\\n        if (isBigger) {\\n            collateralSpear[currentRoundId] = spearBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .div(100);\\n        } else {\\n            collateralSpear[currentRoundId] = shieldBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .sub(collateralShield[currentRoundId])\\n                .multiplyDecimal(spearBalanceOf[currentRoundId][address(this)])\\n                .divideDecimal(shieldBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function buyShieldOut(uint256 amount) public view returns (uint256) {\\n        //todo\\n        (uint256 shieldOut, , ) =\\n            getAmountOut(\\n                amount,\\n                collateralShield[currentRoundId],\\n                shieldBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_shield[currentRoundId]\\n            );\\n        return shieldOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    function sellShield(uint256 amount) external {\\n        uint256 userShieldAmount = shieldBalanceOf[currentRoundId][msg.sender];\\n        require(\\n            userShieldAmount >= amount,\\n            \\\"sellShield::msg.sender has not enough shield to sell\\\"\\n        );\\n        uint256 amountOut = sellShieldOut(amount);\\n        shieldBalanceOf[currentRoundId][msg.sender] = userShieldAmount.sub(\\n            amount\\n        );\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function sellShieldOut(uint256 amount)\\n        public\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        //todo\\n        if (\\n            collateralShield[currentRoundId] >=\\n            shieldBalanceOf[currentRoundId][address(this)].mul(99).div(100)\\n        ) {\\n            amountOut = sellAmount(\\n                amount,\\n                sqrt_k_shield[currentRoundId],\\n                sqrt_k_shield[currentRoundId]\\n            );\\n        } else {\\n            amountOut = sellAmount(\\n                amount,\\n                shieldBalanceOf[currentRoundId][address(this)],\\n                collateralShield[currentRoundId]\\n            );\\n        }\\n    }\\n\\n    function getDurationTs()\\n        internal\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        if (battleDur == 0) {\\n            start = block.timestamp - (block.timestamp % 86400);\\n            end = start + 86400;\\n        } else if (battleDur == 1) {\\n            start = block.timestamp - ((block.timestamp + 259200) % 604800);\\n            end = start + 604800;\\n        } else if (battleDur == 2) {}\\n    }\\n\\n    /// @dev Announce the results of this round\\n    /// The final price will be provided by an external third party Oracle\\n    function settle() external {\\n        require(\\n            block.timestamp >= rounds[currentRoundId].endTS,\\n            \\\"too early to settle\\\"\\n        );\\n        require(\\n            rounds[currentRoundId].roundResult == RoundResult.NonResult,\\n            \\\"round had settled\\\"\\n        );\\n        uint256 price = oracle.price(priceName);\\n        rounds[currentRoundId].endPrice = price;\\n        uint256 _range = rounds[currentRoundId].range;\\n        uint256 priceUnder = price.multiplyDecimal(uint256(1e18).sub(_range));\\n        uint256 priceSuper = price.multiplyDecimal(uint256(1e18).add(_range));\\n        (uint256 start_ts, uint256 end_ts) = getDurationTs();\\n        rounds[block.timestamp] = RoundInfo({\\n            spearPrice: rounds[roundIds[0]].spearPrice,\\n            shieldPrice: rounds[roundIds[0]].shieldPrice, // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: start_ts,\\n            endTS: end_ts,\\n            range: _range,\\n            ry: rounds[currentRoundId].ry,\\n            targetPriceUnder: priceUnder,\\n            targetPriceSuper: priceSuper,\\n            roundResult: RoundResult.NonResult\\n        });\\n\\n        // new round\\n        uint256 collateralAmount;\\n        if (rounds[currentRoundId].ry == RangeType.TwoWay) {\\n            if (\\n                price <= rounds[currentRoundId].targetPriceUnder ||\\n                price >= rounds[currentRoundId].targetPriceSuper\\n            ) {\\n                // spear win\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else if (rounds[currentRoundId].ry == RangeType.Positive) {\\n            if (price >= rounds[currentRoundId].targetPriceSuper) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else {\\n            if (price <= rounds[currentRoundId].targetPriceUnder) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        }\\n        uint collateralRound = collateralSpear[currentRoundId] + collateralShield[currentRoundId] + collateralSurplus[currentRoundId];\\n        if (rounds[currentRoundId].roundResult == RoundResult.SpearWin) {\\n            spearBalanceOf[block.timestamp][address(this)] = spearBalanceOf[\\n                currentRoundId\\n            ][address(this)];\\n            collateralAmount = collateralRound - spearBalanceOf[currentRoundId][address(this)];\\n        } else {\\n            shieldBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[\\n                currentRoundId\\n            ][address(this)];\\n            collateralAmount = collateralRound - shieldBalanceOf[currentRoundId][address(this)];\\n        }\\n        spearPrice[block.timestamp] = spearPrice[currentRoundId];\\n        shieldPrice[block.timestamp] = shieldPrice[currentRoundId];\\n        collateralSpear[block.timestamp] = spearPrice[block.timestamp]\\n            .multiplyDecimal(collateralAmount);\\n        collateralShield[block.timestamp] = shieldPrice[block.timestamp]\\n            .multiplyDecimal(collateralAmount);\\n        currentRoundId = block.timestamp;\\n        roundIds.push(block.timestamp);\\n    }\\n\\n\\n    /// @dev The user adds energy token by calling this function, as well as the corresponding number of spear and shield\\n    /// @param amount of energy token transfer to battle contract\\n    function addLiquility(uint256 amount) external {\\n        if (userStartRoundLP[msg.sender] < currentRoundId) {\\n            removeLiquility(0);\\n        }\\n        // new\\n        uint256 collateralSS =\\n            collateralSpear[currentRoundId].add(\\n                collateralShield[currentRoundId]\\n            );\\n        uint256 deltaCollateralSpear =\\n            collateralSpear[currentRoundId]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaCollateralShield =\\n            collateralShield[currentRoundId]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaSpear =\\n            spearBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaShield =\\n            shieldBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(\\n            deltaCollateralSpear\\n        );\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(\\n            deltaCollateralShield\\n        );\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(deltaShield);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(\\n            deltaShield\\n        );\\n\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        // lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(\\n        //     amount\\n        // );\\n        // lpBalanceOf[currentRoundId][msg.sender] = lpBalanceOf[currentRoundId][\\n        //     msg.sender\\n        // ]\\n        //     .add(amount);\\n        _mint(msg.sender, amount);\\n    }\\n\\n    function addLiquilityIn(uint256 amount)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 collateralSS =\\n            collateralSpear[currentRoundId].add(\\n                collateralShield[currentRoundId]\\n            );\\n        uint256 deltaSpear =\\n            spearBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaShield =\\n            shieldBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        return (deltaSpear, deltaShield);\\n    }\\n\\n    function removeLiquilityOut(uint256 amount) public view returns (uint256) {\\n        uint256 spearSoldAmount = spearSold(currentRoundId);\\n        uint256 shieldSoldAmount = shieldSold(currentRoundId);\\n        uint256 maxSold =\\n            spearSoldAmount > shieldSoldAmount\\n                ? spearSoldAmount\\n                : shieldSoldAmount;\\n        uint256 deltaCollateral =\\n            totalSupply()\\n                .sub(maxSold)\\n                .multiplyDecimal(amount)\\n                .divideDecimal(totalSupply());\\n        return deltaCollateral;\\n    }\\n\\n    /// @dev The user retrieves the energy token\\n    /// @param amount of energy token to msg.sender, if msg.sender don't have enought spear and shield, the transaction\\n    /// will failed\\n    function removeLiquility(uint256 amount) public {\\n        // require(userStartRoundLP[msg.sender] !=0, \\\"user dont have liquility\\\");\\n        if (userStartRoundLP[msg.sender] == 0) {\\n            return;\\n        }\\n        uint256 lpAmount;\\n        if (userStartRoundLP[msg.sender] == currentRoundId) {\\n            // dont have history\\n            // lpAmount = lpBalanceOf[currentRoundId][msg.sender];\\n            lpAmount = balanceOf(msg.sender);\\n        } else {\\n            // history handle\\n            lpAmount = pendingLP(msg.sender);\\n        }\\n        require(lpAmount >= amount, \\\"not enough lp to burn\\\");\\n        uint256 spearSoldAmount = spearSold(currentRoundId);\\n        uint256 shieldSoldAmount = shieldSold(currentRoundId);\\n        uint256 maxSold =\\n            spearSoldAmount > shieldSoldAmount\\n                ? spearSoldAmount\\n                : shieldSoldAmount;\\n        uint256 deltaCollateral =\\n            // lpTotalSupply[currentRoundId]\\n            totalSupply()\\n                .sub(maxSold)\\n                .multiplyDecimal(amount)\\n                .divideDecimal(totalSupply());\\n        uint256 deltaSpear =\\n            deltaCollateral\\n                .multiplyDecimal(collateralSpear[currentRoundId])\\n                .divideDecimal(totalSupply());\\n        uint256 deltaShield =\\n            deltaCollateral\\n                .multiplyDecimal(collateralShield[currentRoundId])\\n                .divideDecimal(totalSupply());\\n        uint256 deltaCollateralSpear =\\n            collateralSpear[currentRoundId]\\n                .multiplyDecimal(deltaCollateral)\\n                .divideDecimal(totalSupply());\\n        uint256 deltaCollateralShield =\\n            collateralShield[currentRoundId]\\n                .multiplyDecimal(deltaCollateral)\\n                .divideDecimal(totalSupply());\\n        uint256 deltaCollateralSurplus =\\n            collateralSurplus[currentRoundId]\\n                .multiplyDecimal(deltaCollateral)\\n                .divideDecimal(totalSupply());\\n\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(deltaShield);\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].sub(\\n            deltaCollateralSpear\\n        );\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].sub(\\n            deltaCollateralShield\\n        );\\n        collateralSurplus[currentRoundId] = collateralSurplus[currentRoundId]\\n            .sub(deltaCollateralSurplus);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].sub(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].sub(\\n            deltaShield\\n        );\\n\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        // lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].sub(\\n        //     amount\\n        // );\\n        // lpBalanceOf[currentRoundId][msg.sender] = lpAmount.sub(amount);\\n        _burn(msg.sender, amount);\\n        collateralToken.safeTransfer(msg.sender, deltaCollateral);\\n    }\\n\\n    function pendingClaim(address acc) public view returns (uint256 amount) {\\n        uint256 userRoundId = userStartRoundSS[acc];\\n        if (userRoundId != 0 && userRoundId < currentRoundId) {\\n            if (rounds[userRoundId].roundResult == RoundResult.SpearWin) {\\n                amount = spearBalanceOf[userRoundId][acc];\\n            } else if (\\n                rounds[userRoundId].roundResult == RoundResult.ShieldWin\\n            ) {\\n                amount = shieldBalanceOf[userRoundId][acc];\\n            }\\n        }\\n    }\\n\\n    function pendingLP(address acc) public view returns (uint256 lpAmount) {\\n        uint256 userRoundId = userStartRoundLP[acc];\\n        if (userRoundId != 0 && userRoundId <= currentRoundId) {\\n            // future round\\n            lpAmount = balanceOf(acc);\\n            for (uint256 i; i < roundIds.length - 1; i++) {\\n                if (roundIds[i] >= userRoundId) {\\n                    // user's all round\\n                    uint256 newLpAmount =\\n                        nextRoundLP(roundIds[i], acc, lpAmount);\\n                    lpAmount = newLpAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    function nextRoundLP(\\n        uint256 roundId,\\n        address acc,\\n        uint256 lpAmount\\n    ) public view returns (uint256 amount) {\\n        if (roundId == currentRoundId) {\\n            return balanceOf(acc);\\n        }\\n        if (rounds[roundId].roundResult == RoundResult.SpearWin) {\\n            uint256 spearAmountTotal = spearBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(spearAmountTotal).divideDecimal(\\n                totalSupply()\\n            );\\n        } else {\\n            uint256 shieldAmountTotal = shieldBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(shieldAmountTotal).divideDecimal(\\n                totalSupply()\\n            );\\n        }\\n    }\\n\\n    /// @dev normal users get back their profits\\n    function claim() public {\\n        uint256 amount = pendingClaim(msg.sender);\\n        if (amount != 0) {\\n            spearBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            shieldBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            delete userStartRoundSS[msg.sender];\\n            collateralToken.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @dev Calculate how many spears and shields can be obtained\\n    /// @param amountIn amount transfer to battle contract\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 _pre_k\\n    )\\n        public\\n        pure\\n        returns (\\n            uint256 amountOut,\\n            bool e,\\n            uint256 pre_k\\n        )\\n    {\\n        (uint256 _amountOut, bool _e, uint256 k) =\\n            Pricing.getAmountOut(amountIn, reserveIn, reserveOut, _pre_k);\\n        amountOut = _amountOut;\\n        e = _e;\\n        pre_k = k;\\n    }\\n\\n    function sellAmount(\\n        uint256 amountToSell,\\n        uint256 reserve,\\n        uint256 energy\\n    ) public pure returns (uint256 amount) {\\n        uint256 amountInWithFee = amountToSell.mul(1000);\\n        uint256 numerator = amountInWithFee.mul(energy);\\n        uint256 denominator = reserve.mul(1000).add(amountInWithFee);\\n        amount = numerator / denominator;\\n    }\\n\\n    function test() public {}\\n\\n    // // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    // function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\\n    //     require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    //     require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    //     uint numerator = reserveIn.multiplyDecimal(amountOut).mul(1000);\\n    //     uint denominator = reserveOut.sub(amountOut).mul(1000);\\n    //     amountIn = (numerator / denominator).add(1);\\n    // }\\n}\\n\",\"keccak256\":\"0xbfb3270ff420bde3e86362b7a5f5503e12a6b4e9a8970dadf455b607249743ea\",\"license\":\"MIT\"},\"contracts/algo/Pricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/DMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Pricing {\\n    \\n    using SafeMath for uint;\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint _pre_k) internal pure returns(uint amountOut, bool e, uint pre_k) {\\n        require(amountIn > 0, 'Battle: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'Battle: INSUFFICIENT_LIQUIDITY');\\n        if (reserveIn >= reserveOut.mul(99).div(100)) {\\n            amountOut = amountIn;\\n            e = true;\\n            return (amountOut, e, _pre_k);\\n        }\\n        // if amountIn > sqrt(reserveIn)\\n        uint maxAmount = DMath.sqrt(reserveIn*reserveOut.mul(100).div(99));\\n        pre_k = maxAmount;\\n        // console.log(\\\"maxAmount %s and amountIn %s, reserveIn %s, reserveOut %s\\\", maxAmount, amountIn, reserveIn);\\n        if (amountIn.add(reserveIn) > maxAmount) {\\n            uint maxAmountIn = maxAmount.sub(reserveIn);\\n            uint amountInWithFee = maxAmountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n            amountOut = amountOut.add(amountIn.sub(maxAmountIn));\\n            e = true;\\n        } else {\\n            uint amountInWithFee = amountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n        }\\n    }\\n\\n    function getAmountIn() internal view {\\n\\n    }\\n}\",\"keccak256\":\"0x0c8127b769438edaaf2aa702faf5ccc80b23a07d6b925ae9de99bc6182396dfb\",\"license\":\"MIT\"},\"contracts/interfaces/IBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBattle {\\n    function init(uint amount, uint price0, uint pirce1, uint price2, uint endTs) external;\\n    function buySpear(uint amount) external;\\n    function sellSpear(uint amount) external;\\n    function buyShield(uint amount) external;\\n    function sellShield(uint amount) external;\\n    function settle(uint price) external;\\n    function addLiqui(uint amount) external;\\n    function removeLiqui(uint amount) external;\\n    function withdraw() external;\\n}\",\"keccak256\":\"0xc2f71ea24a60c3c921a6d6947ca4d4699592c863f37b4ca3bb3c072c5057d0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n   function price(string memory symbol) external returns(uint); \\n}\",\"keccak256\":\"0xd26b7e8adda13a8e11e63902344fe10320100a83e6b0a1ea33d4ddec517d4e15\",\"license\":\"MIT\"},\"contracts/lib/DMath.sol\":{\"content\":\"  \\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary DMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xe9a4c4d5a1e9eb41b47118bcdc8008d4c580676e6228767e1773be3ae839e94d\",\"license\":\"GPL-3.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/structs/RangeResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RoundResult {\\n    NonResult, // 0\\n    SpearWin, // 1\\n    ShieldWin //2\\n}\\n\",\"keccak256\":\"0x2e31ee8df33d61368e943c1686127f421b097fa26c97d8a4976250a0d0f6cab9\",\"license\":\"MIT\"},\"contracts/structs/RangeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RangeType {\\n    TwoWay, // 0\\n    Positive, // 1\\n    Negative, // 2\\n    Number // 3\\n\\n}\\n\",\"keccak256\":\"0x003340819700f619e944a0755eb6efb41f020f1d80448a61b2ef6a7bd7770513\",\"license\":\"MIT\"},\"contracts/structs/RoundInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RangeType.sol\\\";\\nimport \\\"./RangeResult.sol\\\";\\n\\nstruct RoundInfo {\\n    uint256 spearPrice;\\n    uint256 shieldPrice;\\n    uint256 startPrice;\\n    uint256 endPrice;\\n    uint256 startTS;\\n    uint256 endTS;\\n    uint256 range;\\n    RangeType ry;\\n    uint256 targetPriceUnder;\\n    uint256 targetPriceSuper;\\n    RoundResult roundResult;\\n}\\n\",\"keccak256\":\"0x4add5888e42d703f9dba4a1c2decac16f55696694262c9e26cc2fc342d03e44b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000875760003560e01c806392d559b1116200006257806392d559b114620000f0578063a3bfe2741462000118578063e6aa9fab1462000131578063fab29a27146200015e57600080fd5b806338243ade146200008c5780636dd0ce7a14620000a557806383d342ba14620000d9575b600080fd5b620000a36200009d366004620009c2565b62000175565b005b620000bc620000b636600462000ab6565b62000277565b6040516001600160a01b0390911681526020015b60405180910390f35b620000a3620000ea366004620009a3565b6200028b565b6200010762000101366004620009a3565b6200029c565b6040519015158152602001620000d0565b62000122620002aa565b604051908152602001620000d0565b620001486200014236600462000ab6565b620002bd565b60408051928352602083019190915201620000d0565b620000a36200016f366004620009a3565b62000344565b6200018c6001600160a01b038b1633308962000351565b60008a8a8a8a604051620001a090620008e4565b620001af949392919062000b1b565b604051809103906000f080158015620001cc573d6000803e3d6000fd5b509050620001e56001600160a01b038c163089620003c4565b604051631cfd676960e31b81526001600160a01b0382169063e7eb3b48906200021f9033908b908b908b908b908b908b9060040162000b5d565b600060405180830381600087803b1580156200023a57600080fd5b505af11580156200024f573d6000803e3d6000fd5b5050505062000269816000620003fb90919063ffffffff16565b505050505050505050505050565b600062000285818362000419565b92915050565b62000298600082620003fb565b5050565b600062000285818362000427565b6000620002b860006200044a565b905090565b60008082620002f957620002d5620151804262000c36565b620002e1904262000bed565b9150620002f2826201518062000bd2565b9050915091565b82600114156200033f5762093a8062000316426203f48062000bd2565b62000322919062000c36565b6200032e904262000bed565b9150620002f28262093a8062000bd2565b915091565b6200029860008262000455565b6040516001600160a01b0380851660248301528316604482015260648101829052620003be9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526200046c565b50505050565b6040516001600160a01b038316602482015260448101829052620003f690849063a9059cbb60e01b9060640162000386565b505050565b600062000412836001600160a01b03841662000549565b9392505050565b60006200041283836200059b565b6001600160a01b0381166000908152600183016020526040812054151562000412565b600062000285825490565b600062000412836001600160a01b03841662000632565b6000620004c3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200075b9092919063ffffffff16565b805190915015620003f65780806020019051810190620004e4919062000a94565b620003f65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6000818152600183016020526040812054620005925750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000285565b50600062000285565b81546000908210620005fb5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840162000540565b8260000182815481106200061f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015620007505760006200065960018362000bed565b85549091506000906200066f9060019062000bed565b905060008660000182815481106200069757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110620006c957634e487b7160e01b600052603260045260246000fd5b600091825260209091200155620006e283600162000bd2565b600082815260018901602052604090205586548790806200071357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505062000285565b600091505062000285565b60606200076c848460008562000774565b949350505050565b606082471015620007d75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000540565b843b620008275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000540565b600080866001600160a01b0316858760405162000845919062000afd565b60006040518083038185875af1925050503d806000811462000884576040519150601f19603f3d011682016040523d82523d6000602084013e62000889565b606091505b50915091506200089b828286620008a6565b979650505050505050565b60608315620008b757508162000412565b825115620008c85782518084602001fd5b8160405162461bcd60e51b815260040162000540919062000bbd565b6143138062000c9d83390190565b8035620008ff8162000c83565b919050565b803560048110620008ff57600080fd5b600082601f83011262000925578081fd5b813567ffffffffffffffff8082111562000943576200094362000c6d565b604051601f8301601f19908116603f011681019082821181831017156200096e576200096e62000c6d565b8160405283815286602085880101111562000987578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215620009b5578081fd5b8135620004128162000c83565b6000806000806000806000806000806101408b8d031215620009e2578586fd5b620009ed8b620008f2565b9950620009fd60208c01620008f2565b985060408b013567ffffffffffffffff8082111562000a1a578788fd5b62000a288e838f0162000914565b995060608d013591508082111562000a3e578788fd5b5062000a4d8d828e0162000914565b97505060808b0135955060a08b0135945060c08b0135935060e08b0135925062000a7b6101008c0162000904565b91506101208b013590509295989b9194979a5092959850565b60006020828403121562000aa6578081fd5b8151801515811462000412578182fd5b60006020828403121562000ac8578081fd5b5035919050565b6000815180845262000ae981602086016020860162000c07565b601f01601f19169290920160200192915050565b6000825162000b1181846020870162000c07565b9190910192915050565b6001600160a01b0385811682528416602082015260806040820181905260009062000b499083018562000acf565b82810360608401526200089b818562000acf565b6001600160a01b03881681526020810187905260408101869052606081018590526080810184905260e081016004841062000ba857634e487b7160e01b600052602160045260246000fd5b60a082019390935260c0015295945050505050565b60208152600062000412602083018462000acf565b6000821982111562000be85762000be862000c57565b500190565b60008282101562000c025762000c0262000c57565b500390565b60005b8381101562000c2457818101518382015260200162000c0a565b83811115620003be5750506000910152565b60008262000c5257634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000c9957600080fd5b5056fe6080604052601b805460ff191660011790553480156200001e57600080fd5b5060405162004313380380620043138339810160408190526200004191620002e0565b6040518060400160405280601881526020017f426174746c65204c697175696c696469747920546f6b656e0000000000000000815250604051806040016040528060038152602001620626c760ec1b8152506000620000a56200018360201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081516200010490600490602085019062000187565b5080516200011a90600590602084019062000187565b5050601880546001600160a01b038088166001600160a01b03199283161790925560068054928716929091169190911790555081516200016290601390602085019062000187565b5080516200017890601490602084019062000187565b5050505050620003de565b3390565b828054620001959062000372565b90600052602060002090601f016020900481019282620001b9576000855562000204565b82601f10620001d457805160ff191683800117855562000204565b8280016001018555821562000204579182015b8281111562000204578251825591602001919060010190620001e7565b506200021292915062000216565b5090565b5b8082111562000212576000815560010162000217565b600082601f8301126200023e578081fd5b81516001600160401b03808211156200025b576200025b620003af565b604051601f8301601f19908116603f01168101908282118183101715620002865762000286620003af565b81604052838152602092508683858801011115620002a2578485fd5b8491505b83821015620002c55785820183015181830184015290820190620002a6565b83821115620002d657848385830101525b9695505050505050565b60008060008060808587031215620002f6578384fd5b84516200030381620003c5565b60208601519094506200031681620003c5565b60408601519093506001600160401b038082111562000333578384fd5b62000341888389016200022d565b9350606087015191508082111562000357578283fd5b5062000366878288016200022d565b91505092959194509250565b600181811c908216806200038757607f821691505b60208210811415620003a957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620003db57600080fd5b50565b613f2580620003ee6000396000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c806374e9a267116101f4578063aafc7a761161011a578063e78ccc39116100ad578063f4ada3511161007c578063f4ada35114610961578063f6e0c8f614610981578063f8a8fd6d1461043e578063ff5958fc1461099457600080fd5b8063e78ccc3914610908578063e7eb3b4814610928578063e8a352f81461093b578063f2fde38b1461094e57600080fd5b8063c3383b5b116100e9578063c3383b5b14610896578063dd62ed3e146108a9578063e5cb8d86146108e2578063e6050c38146108f557600080fd5b8063aafc7a7614610825578063ae809e8f14610845578063b2016bd414610870578063c1097c0d1461088357600080fd5b806394e33d7f11610192578063a27382d611610161578063a27382d6146107cc578063a457c2d7146107ec578063a54e2ff2146107ff578063a9059cbb1461081257600080fd5b806394e33d7f1461077357806395d89b411461079b5780639701f5e8146107a35780639cbe5efd146107c357600080fd5b806385d10056116101ce57806385d10056146106ab5780638c65c81f146106cb5780638da5cb5b1461074f57806390a4cb9b1461076057600080fd5b806374e9a2671461065a57806376c4b8871461066d5780637dc0d1d01461068057600080fd5b80633b1f18dd116102d95780634e71d92d11610277578063715018a611610246578063715018a6146105ff578063728313c914610607578063732d21601461061a578063736bcfdb1461063a57600080fd5b80634e71d92d1461058d57806352707d8c146105955780636f4d2b67146105c357806370a08231146105d657600080fd5b8063475e9888116102b3578063475e98881461054457806349bf117b1461054d5780634d56cc68146105605780634d61c32f1461056d57600080fd5b80633b1f18dd146104fe5780633c45e7361461051e5780633cc1f54c1461053157600080fd5b80631c770547116103515780633203ba77116103205780633203ba77146104c857806335a94b7b146104d057806339509351146104d85780633b18d439146104eb57600080fd5b80631c77054714610473578063221937e01461048657806323b872dd146104a6578063313ce567146104b957600080fd5b80630ef4b2481161038d5780630ef4b2481461042357806311da60b414610436578063123656b91461044057806318160ddd1461046b57600080fd5b806306fdde03146103b4578063095ea7b3146103d25780630d731228146103f5575b600080fd5b6103bc61099c565b6040516103c99190613b7c565b60405180910390f35b6103e56103e03660046139dc565b610a2e565b60405190151581526020016103c9565b610415610403366004613a8e565b600c6020526000908152604090205481565b6040519081526020016103c9565b610415610431366004613955565b610a45565b61043e610b41565b005b61041561044e366004613abe565b600960209081526000928352604080842090915290825290205481565b600354610415565b610415610481366004613a8e565b61129b565b610415610494366004613a8e565b600e6020526000908152604090205481565b6103e56104b43660046139a1565b611308565b604051601281526020016103c9565b601654610415565b6103bc6113bb565b6103e56104e63660046139dc565b611449565b6104156104f9366004613a8e565b611480565b61041561050c366004613a8e565b60126020526000908152604090205481565b61043e61052c366004613a8e565b611522565b61043e61053f366004613a8e565b611735565b610415601c5481565b61043e61055b366004613a8e565b611853565b601b546103e59060ff1681565b61041561057b366004613955565b60116020526000908152604090205481565b61043e611bbf565b6105a86105a3366004613b2f565b611c30565b604080519384529115156020840152908201526060016103c9565b6104156105d1366004613a8e565b611c58565b6104156105e4366004613955565b6001600160a01b031660009081526001602052604090205490565b61043e611c86565b61043e610615366004613a8e565b611d2a565b610415610628366004613955565b60106020526000908152604090205481565b610415610648366004613a8e565b600d6020526000908152604090205481565b610415610668366004613b04565b611efd565b61041561067b366004613955565b611f4b565b600654610693906001600160a01b031681565b6040516001600160a01b0390911681526020016103c9565b6104156106b9366004613a8e565b600b6020526000908152604090205481565b6107386106d9366004613a8e565b601760205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a0154989997989697959694959394929360ff9283169391929091168b565b6040516103c99b9a99989796959493929190613c55565b6000546001600160a01b0316610693565b61041561076e366004613a8e565b612033565b610786610781366004613a8e565b612054565b604080519283526020830191909152016103c9565b6103bc6120ed565b6104156107b1366004613a8e565b601a6020526000908152604090205481565b61041560155481565b6104156107da366004613a8e565b60196020526000908152604090205481565b6103e56107fa3660046139dc565b6120fc565b61041561080d366004613a8e565b612197565b6103e56108203660046139dc565b61222e565b610415610833366004613a8e565b600a6020526000908152604090205481565b610415610853366004613abe565b600760209081526000928352604080842090915290825290205481565b601854610693906001600160a01b031681565b610415610891366004613ae0565b61223b565b6104156108a4366004613a8e565b612309565b6104156108b736600461396f565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6104156108f0366004613a8e565b612354565b61043e610903366004613a8e565b612382565b610415610916366004613a8e565b600f6020526000908152604090205481565b61043e610936366004613a05565b6125f4565b610415610949366004613a8e565b612a79565b61043e61095c366004613955565b612aba565b61041561096f366004613a8e565b60086020526000908152604090205481565b61043e61098f366004613a8e565b612bd4565b6103bc612cd4565b6060600480546109ab90613e49565b80601f01602080910402602001604051908101604052809291908181526020018280546109d790613e49565b8015610a245780601f106109f957610100808354040283529160200191610a24565b820191906000526020600020905b815481529060010190602001808311610a0757829003601f168201915b5050505050905090565b6000610a3b338484612ce1565b5060015b92915050565b6001600160a01b0381166000908152601060205260408120548015801590610a6e575060155481105b15610b3b5760016000828152601760205260409020600a015460ff166002811115610aa957634e487b7160e01b600052602160045260246000fd5b1415610ad95760008181526007602090815260408083206001600160a01b03871684529091529020549150610b3b565b60026000828152601760205260409020600a015460ff166002811115610b0f57634e487b7160e01b600052602160045260246000fd5b1415610b3b5760008181526009602090815260408083206001600160a01b038716845290915290205491505b50919050565b601554600090815260176020526040902060050154421015610ba05760405162461bcd60e51b8152602060048201526013602482015272746f6f206561726c7920746f20736574746c6560681b60448201526064015b60405180910390fd5b6015546000908152601760205260408120600a015460ff166002811115610bd757634e487b7160e01b600052602160045260246000fd5b14610c185760405162461bcd60e51b81526020600482015260116024820152701c9bdd5b99081a1859081cd95d1d1b1959607a1b6044820152606401610b97565b600654604051631fc58c3360e31b81526000916001600160a01b03169063fe2c619890610c4a90601490600401613baf565b602060405180830381600087803b158015610c6457600080fd5b505af1158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c9190613aa6565b601580546000908152601760205260408082206003018490559154815290812060060154919250610cdf610cd8670de0b6b3a764000084612e06565b8490612e12565b90506000610cff610cf8670de0b6b3a764000085612e34565b8590612e12565b9050600080610d0c612e40565b91509150604051806101600160405280601760006016600081548110610d4257634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600001548152602001601760006016600081548110610d8a57634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206001015481526020018781526020016000815260200183815260200182815260200186815260200160176000601554815260200190815260200160002060070160009054906101000a900460ff166003811115610e1057634e487b7160e01b600052602160045260246000fd5b81526020810186905260408101859052606001600081525060176000428152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836003811115610eb957634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115610f0657634e487b7160e01b600052602160045260246000fd5b02179055506000915081905060155460009081526017602052604090206007015460ff166003811115610f4957634e487b7160e01b600052602160045260246000fd5b1415610fdc5760155460009081526017602052604090206008015487111580610f8657506015546000908152601760205260409020600901548710155b15610fb6576015546000908152601760205260409020600a0180546001919060ff191682805b02179055506110bb565b6015546000908152601760205260409020600a0180546002919060ff1916600183610fac565b600160155460009081526017602052604090206007015460ff16600381111561101557634e487b7160e01b600052602160045260246000fd5b141561105b576015546000908152601760205260409020600901548710610fb6576015546000908152601760205260409020600a0180546001919060ff19168280610fac565b601554600090815260176020526040902060080154871161109b576015546000908152601760205260409020600a0180546001919060ff19168280610fac565b6015546000908152601760205260409020600a01805460ff191660021790555b6015546000908152600d6020908152604080832054600c835281842054600b9093529083205490916110ec91613cd0565b6110f69190613cd0565b905060016015546000908152601760205260409020600a015460ff16600281111561113157634e487b7160e01b600052602160045260246000fd5b141561118d576015805460009081526007602081815260408084203080865290835281852054428652848452828620828752845282862055945484529181528183209383529290925220546111869082613e06565b91506111df565b6015805460009081526009602081815260408084203080865290835281852054428652848452828620828752845282862055945484529181528183209383529290925220546111dc9082613e06565b91505b601580546000908152600e60208181526040808420544280865282862091825595548552600f835281852054958552932093909355909152546112229083612e12565b426000908152600b6020908152604080832093909355600f905220546112489083612e12565b426000818152600c602052604081209290925560158190556016805460018101825592527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289909101555050505050505050565b6000806112a9601554611c58565b905060006112b8601554612354565b905060008183116112c957816112cb565b825b905060006112fe6112db60035490565b6112f8886112f2866112ec60035490565b90612e06565b90612e12565b90612ebd565b9695505050505050565b6000611315848484612ed9565b6001600160a01b03841660009081526002602090815260408083203384529091529020548281101561139a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b97565b6113ae85336113a98685613e06565b612ce1565b60019150505b9392505050565b601480546113c890613e49565b80601f01602080910402602001604051908101604052809291908181526020018280546113f490613e49565b80156114415780601f1061141657610100808354040283529160200191611441565b820191906000526020600020905b81548152906001019060200180831161142457829003601f168201915b505050505081565b3360008181526002602090815260408083206001600160a01b03871684529091528120549091610a3b9185906113a9908690613cd0565b60155460009081526009602090815260408083203084529091528120546114b5906064906114af9060636130b1565b906130bd565b6015546000908152600c6020526040902054106114ea576015546000908152601a6020526040902054610a3f90839080611efd565b6015546000818152600960209081526040808320308452825280832054938352600c909152902054610a3f918491611efd565b919050565b60155433600090815260106020526040902054101561154357611543611bbf565b60155433600081815260106020526040902091909155601854611573916001600160a01b039091169030846130c9565b6015546000818152600b60209081526040808320546007835281842030855283528184205494845260199092528220549192839283926115b4928792611c30565b60158054600090815260196020908152604080832085905592548252600b9052205492955090935091506115e89085612e34565b601580546000908152600b60209081526040808320949094559154815260078252828120308252909152205461161e9084612e06565b601580546000908152600760208181526040808420308552825280842095909555925482528252828120338252909152205461165a9084612e34565b601554600090815260076020908152604080832033845290915290205581156116bc5760155460009081526009602090815260408083203084529091529020546116a59060646130bd565b6015546000908152600c6020526040902055611727565b6015546000818152600760209081526040808320308085528184528285205486865260098552838620828752855283862054968652600b85529285205494529091526117149290916112f891906112f2908490612e06565b6015546000908152600c60205260409020555b61172f613134565b50505050565b6015546000908152600960209081526040808320338452909152902054818110156117bf5760405162461bcd60e51b815260206004820152603460248201527f73656c6c536869656c643a3a6d73672e73656e64657220686173206e6f7420656044820152731b9bdd59da081cda1a595b19081d1bc81cd95b1b60621b6064820152608401610b97565b60006117ca83611480565b90506117d68284612e06565b60158054600090815260096020818152604080842033855282528084209590955592548252825282812030825290915220546118129084612e34565b6015546000908152600960209081526040808320308452909152902055611837613134565b60185461184e906001600160a01b03163383613268565b505050565b3360009081526011602052604090205461186a5750565b601554336000908152601160205260408120549091141561189b5750336000908152600160205260409020546118a7565b6118a433611f4b565b90505b818110156118ef5760405162461bcd60e51b81526020600482015260156024820152743737ba1032b737bab3b4103638103a3790313ab93760591b6044820152606401610b97565b60006118fc601554611c58565b9050600061190b601554612354565b9050600081831161191c578161191e565b825b9050600061192e6112db60035490565b9050600061195b61193e60035490565b6015546000908152600b60205260409020546112f8908590612e12565b9050600061198861196b60035490565b6015546000908152600c60205260409020546112f8908690612e12565b905060006119b461199860035490565b6015546000908152600b60205260409020546112f89087612e12565b905060006119e06119c460035490565b6015546000908152600c60205260409020546112f89088612e12565b90506000611a0c6119f060035490565b6015546000908152600d60205260409020546112f89089612e12565b6015546000908152600760209081526040808320308452909152902054909150611a369086612e06565b6015805460009081526007602090815260408083203080855290835281842095909555925482526009815282822093825292909252902054611a789085612e06565b60158054600090815260096020908152604080832030845282528083209490945591548152600b9091522054611aae9084612e06565b601580546000908152600b602090815260408083209490945591548152600c9091522054611adc9083612e06565b601580546000908152600c602090815260408083209490945591548152600d9091522054611b0a9082612e06565b601580546000908152600d60209081526040808320949094559154815260089091522054611b389086612e06565b6015805460009081526008602090815260408083209490945591548152600a9091522054611b669085612e06565b601580546000908152600a6020908152604080832094909455915433808352601190935292902091909155611b9b908c613298565b601854611bb2906001600160a01b03163388613268565b5050505050505050505050565b6000611bca33610a45565b90508015611c2d57336000818152601060208181526040808420805485526007835281852086865283528185208590558054855260098352818520868652835290842084905591905255601854611c2d916001600160a01b039091169083613268565b50565b600080600080600080611c458a8a8a8a6133e7565b919c909b50909950975050505050505050565b60008181526007602090815260408083203084528252808320548484526008909252822054610a3f91612e06565b6000546001600160a01b03163314611ce05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b97565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601854611d42906001600160a01b03163330846130c9565b6015546000818152600c602090815260408083205460098352818420308552835281842054948452601a909252822054919283928392611d83928792611c30565b601580546000908152601a6020908152604080832085905592548252600c905220549295509093509150611db79085612e34565b601580546000908152600c602090815260408083209490945591548152600982528281203082529091522054611ded9084612e06565b6015805460009081526009602081815260408084203085528252808420959095559254825282528281203382529091522054611e299084612e34565b60155460009081526009602090815260408083203384529091529020558115611e8b576015546000908152600760209081526040808320308452909152902054611e749060646130bd565b6015546000908152600b6020526040902055611727565b6015546000818152600960209081526040808320308085528184528285205486865260078552838620828752855283862054968652600c8552928520549452909152611ee39290916112f891906112f2908490612e06565b6015546000908152600b602052604090205561172f613134565b600080611f0c856103e86130b1565b90506000611f1a82856130b1565b90506000611f3483611f2e886103e86130b1565b90612e34565b9050611f408183613ce8565b979650505050505050565b6001600160a01b0381166000908152601160205260408120548015801590611f7557506015548111155b15610b3b576001600160a01b03831660009081526001602052604081205492505b601654611fa590600190613e06565b81101561202c578160168281548110611fce57634e487b7160e01b600052603260045260246000fd5b90600052602060002001541061201a5760006120166016838154811061200457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154868661223b565b9350505b8061202481613e7e565b915050611f96565b5050919050565b6016818154811061204357600080fd5b600091825260209091200154905081565b6015546000908152600c6020908152604080832054600b9092528220548291829161207e91612e34565b6015546000908152600760209081526040808320308452909152812054919250906120af9083906112f89088612e12565b6015546000908152600960209081526040808320308452909152812054919250906120e09084906112f89089612e12565b9196919550909350505050565b6060600580546109ab90613e49565b3360009081526002602090815260408083206001600160a01b03861684529091528120548281101561217e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b97565b61218d33856113a98685613e06565b5060019392505050565b60155460009081526007602090815260408083203084529091528120546121c6906064906114af9060636130b1565b6015546000908152600b6020526040902054106121fb57601554600090815260196020526040902054610a3f90839080611efd565b6015546000818152600760209081526040808320308452825280832054938352600b909152902054610a3f918491611efd565b6000610a3b338484612ed9565b600060155484141561226657506001600160a01b0382166000908152600160205260409020546113b4565b60016000858152601760205260409020600a015460ff16600281111561229c57634e487b7160e01b600052602160045260246000fd5b14156122da5760008481526007602090815260408083203084529091529020546122d26122c860035490565b6112f88584612e12565b9150506113b4565b60008481526009602090815260408083203084529091529020546123006122c860035490565b95945050505050565b6015546000818152600c602090815260408083205460098352818420308552835281842054948452601a9092528220549192839261234a9286929091611c30565b5090949350505050565b6000818152600960209081526040808320308452825280832054848452600a909252822054610a3f91612e06565b6015543360009081526011602052604090205410156123a5576123a56000611853565b6015546000908152600c6020908152604080832054600b9092528220546123cb91612e34565b6015546000908152600b6020526040812054919250906123f19083906112f89086612e12565b6015546000908152600c6020526040812054919250906124179084906112f89087612e12565b6015546000908152600760209081526040808320308452909152812054919250906124489085906112f89088612e12565b6015546000908152600960209081526040808320308452909152812054919250906124799086906112f89089612e12565b6015546000908152600b60205260409020549091506124989085612e34565b601580546000908152600b602090815260408083209490945591548152600c90915220546124c69084612e34565b601580546000908152600c6020908152604080832094909455915481526007825282812030825290915220546124fc9083612e34565b601580546000908152600760209081526040808320308085529083528184209590955592548252600981528282209382529290925290205461253e9082612e34565b60158054600090815260096020908152604080832030845282528083209490945591548152600890915220546125749083612e34565b6015805460009081526008602090815260408083209490945591548152600a90915220546125a29082612e34565b6015546000908152600a60205260409020556018546125cc906001600160a01b03163330896130c9565b601554336000818152601160205260409020919091556125ec90876135bc565b505050505050565b601b5460ff166126375760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08199a5c9cdd081a5b9a5d60921b6044820152606401610b97565b8015806126445750806001145b8061264f5750806002145b61269b5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420737570706f727420626174746c65206475726174696f6e00000000006044820152606401610b97565b601c819055601b805460ff191690556126b48585612e34565b670de0b6b3a7640000146127165760405162461bcd60e51b8152602060048201526024808201527f426174746c653a3a696e69743a7370656172202b20736869656c642073686f756044820152636c64203160e01b6064820152608401610b97565b600080612721612e40565b60158290556016805460018101825560009182527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428901839055600654604051631fc58c3360e31b8152939550919350916001600160a01b039091169063fe2c61989061279290601490600401613baf565b602060405180830381600087803b1580156127ac57600080fd5b505af11580156127c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e49190613aa6565b90506040518061016001604052808981526020018881526020018281526020016000815260200184815260200183815260200187815260200186600381111561283d57634e487b7160e01b600052602160045260246000fd5b8152602001612857610cd8670de0b6b3a76400008a612e06565b8152602001612871610cd8670de0b6b3a76400008a612e34565b8152602001600081525060176000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083600381111561290c57634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff1916600183600281111561295957634e487b7160e01b600052602160045260246000fd5b02179055505060158054600090815260076020908152604080832030845282528083208e90559254825260089052205461299491508a612e34565b60158054600090815260086020908152604080832094909455825482526009815283822030835281528382208d905591548152600a90915220546129d8908a612e34565b6015546000908152600a60205260409020556129f4888a612e12565b6015546000908152600b6020526040902055612a10878a612e12565b601580546000908152600c602090815260408083209490945582548252600e81528382208c905591548152600f90915220879055612a4e8a8a6135bc565b50506015546001600160a01b0390981660009081526011602052604090209790975550505050505050565b6015546000818152600b60209081526040808320546007835281842030855283528184205494845260199092528220549192839261234a9286929091611c30565b6000546001600160a01b03163314612b145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b97565b6001600160a01b038116612b795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b97565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b601554600090815260076020908152604080832033845290915290205481811015612c5c5760405162461bcd60e51b815260206004820152603260248201527f73656c6c53706561723a3a6d73672e73656e64657220686173206e6f7420656e6044820152711bdd59da081cdc19585c881d1bc81cd95b1b60721b6064820152608401610b97565b6000612c6783612197565b9050612c738284612e06565b6015805460009081526007602081815260408084203385528252808420959095559254825282528281203082529091522054612caf9084612e34565b6015546000908152600760209081526040808320308452909152902055611837613134565b601380546113c890613e49565b6001600160a01b038316612d435760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b97565b6001600160a01b038216612da45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b97565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006113b48284613e06565b6000612e206012600a613d3f565b612e2a84846130b1565b6113b49190613ce8565b60006113b48284613cd0565b600080601c5460001415612e7a57612e5b6201518042613e99565b612e659042613e06565b9150612e748262015180613cd0565b90509091565b601c5460011415612eb95762093a80612e96426203f480613cd0565b612ea09190613e99565b612eaa9042613e06565b9150612e748262093a80613cd0565b9091565b60006113b4826114af612ed26012600a613d3f565b86906130b1565b6001600160a01b038316612f3d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610b97565b6001600160a01b038216612f9f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610b97565b6001600160a01b038316600090815260016020526040902054818110156130175760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b97565b6130218282613e06565b6001600160a01b038086166000908152600160205260408082209390935590851681529081208054849290613057908490613cd0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516130a391815260200190565b60405180910390a350505050565b60006113b48284613de7565b60006113b48284613ce8565b6040516001600160a01b038085166024830152831660448201526064810182905261172f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261369b565b6015546000818152600760209081526040808320308452825280832054938352600b90915281205490916131689190612ebd565b6015546000818152600960209081526040808320308452825280832054938352600c9091528120549293509161319d91612ebd565b9050670dbd2fc137a30000821015806131be5750670dbd2fc137a300008110155b1561324057670dbd2fc137a30000821061320957601580546000908152600e60209081526040808320670dbd2fc137a30000905592548252600f905220662386f26fc1000090555050565b601580546000908152600e60209081526040808320662386f26fc10000905592548252600f905220670dbd2fc137a3000090555050565b601580546000908152600e6020908152604080832086905592548252600f9052208190555050565b6040516001600160a01b03831660248201526044810182905261184e90849063a9059cbb60e01b906064016130fd565b6001600160a01b0382166132f85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610b97565b6001600160a01b0382166000908152600160205260409020548181101561336c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610b97565b6133768282613e06565b6001600160a01b038416600090815260016020526040812091909155600380548492906133a4908490613e06565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612df9565b60008060008087116134455760405162461bcd60e51b815260206004820152602160248201527f426174746c653a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b6064820152608401610b97565b6000861180156134555750600085115b6134a15760405162461bcd60e51b815260206004820152601e60248201527f426174746c653a20494e53554646494349454e545f4c495155494449545900006044820152606401610b97565b6134b160646114af8760636130b1565b86106134c5575085915060019050826135b2565b60006134e96134da60636114af8960646130b1565b6134e49089613de7565b61376d565b9150819050806134f98989612e34565b111561356e57600061350b8289612e06565b9050600061351b826103e86130b1565b90506000613529828a6130b1565b9050600061353d83611f2e8d6103e86130b1565b90506135498183613ce8565b975061355f6135588d86612e06565b8990612e34565b975060019650505050506135b0565b600061357c896103e86130b1565b9050600061358a82896130b1565b9050600061359e83611f2e8c6103e86130b1565b90506135aa8183613ce8565b96505050505b505b9450945094915050565b6001600160a01b0382166136125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b97565b80600360008282546136249190613cd0565b90915550506001600160a01b03821660009081526001602052604081208054839290613651908490613cd0565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60006136f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137d69092919063ffffffff16565b80519091501561184e578080602001905181019061370e9190613a6e565b61184e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b97565b600060038211156137c85750806000613787600283613ce8565b613792906001613cd0565b90505b81811015610b3b579050806002816137ad8186613ce8565b6137b79190613cd0565b6137c19190613ce8565b9050613795565b811561151d57506001919050565b60606137e584846000856137ed565b949350505050565b60608247101561384e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b97565b843b61389c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b97565b600080866001600160a01b031685876040516138b89190613b60565b60006040518083038185875af1925050503d80600081146138f5576040519150601f19603f3d011682016040523d82523d6000602084013e6138fa565b606091505b5091509150611f40828286606083156139145750816113b4565b8251156139245782518084602001fd5b8160405162461bcd60e51b8152600401610b979190613b7c565b80356001600160a01b038116811461151d57600080fd5b600060208284031215613966578081fd5b6113b48261393e565b60008060408385031215613981578081fd5b61398a8361393e565b91506139986020840161393e565b90509250929050565b6000806000606084860312156139b5578081fd5b6139be8461393e565b92506139cc6020850161393e565b9150604084013590509250925092565b600080604083850312156139ee578182fd5b6139f78361393e565b946020939093013593505050565b600080600080600080600060e0888a031215613a1f578283fd5b613a288861393e565b96506020880135955060408801359450606088013593506080880135925060a088013560048110613a57578283fd5b8092505060c0880135905092959891949750929550565b600060208284031215613a7f578081fd5b815180151581146113b4578182fd5b600060208284031215613a9f578081fd5b5035919050565b600060208284031215613ab7578081fd5b5051919050565b60008060408385031215613ad0578182fd5b823591506139986020840161393e565b600080600060608486031215613af4578283fd5b833592506139cc6020850161393e565b600080600060608486031215613b18578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613b44578384fd5b5050823594602084013594506040840135936060013592509050565b60008251613b72818460208701613e1d565b9190910192915050565b6020815260008251806020840152613b9b816040850160208701613e1d565b601f01601f19169190910160400192915050565b6000602080835281845483600182811c915080831680613bd057607f831692505b858310811415613bee57634e487b7160e01b87526022600452602487fd5b878601838152602001818015613c0b5760018114613c1c57613c46565b60ff19861682528782019650613c46565b60008b815260209020895b86811015613c4057815484820152908501908901613c27565b83019750505b50949998505050505050505050565b6000610160820190508c82528b60208301528a60408301528960608301528860808301528760a08301528660c083015260048610613c9557613c95613ed9565b8560e0830152846101008301528361012083015260038310613cb957613cb9613ed9565b826101408301529c9b505050505050505050505050565b60008219821115613ce357613ce3613ead565b500190565b600082613cf757613cf7613ec3565b500490565b600181815b80851115613d37578160001904821115613d1d57613d1d613ead565b80851615613d2a57918102915b93841c9390800290613d01565b509250929050565b60006113b48383600082613d5557506001610a3f565b81613d6257506000610a3f565b8160018114613d785760028114613d8257613d9e565b6001915050610a3f565b60ff841115613d9357613d93613ead565b50506001821b610a3f565b5060208310610133831016604e8410600b8410161715613dc1575081810a610a3f565b613dcb8383613cfc565b8060001904821115613ddf57613ddf613ead565b029392505050565b6000816000190483118215151615613e0157613e01613ead565b500290565b600082821015613e1857613e18613ead565b500390565b60005b83811015613e38578181015183820152602001613e20565b8381111561172f5750506000910152565b600181811c90821680613e5d57607f821691505b60208210811415610b3b57634e487b7160e01b600052602260045260246000fd5b6000600019821415613e9257613e92613ead565b5060010190565b600082613ea857613ea8613ec3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212204a86007a3e35b4b8aa962248e4d7075fa301907ef399d55ff621c884782cf5a364736f6c63430008040033a26469706673582212208b469acecb1a4da74119140e06da94fc3594bea3233a09ee9e0a2c11916876dc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBattle(address,address,string,string,uint256,uint256,uint256,uint256,uint8,uint256)": {
        "params": {
          "_collateral": "collateral token address, eg. DAI",
          "_oracle": "oracle contract address",
          "_priceName": "eg. BTC",
          "_range": "price range, eg. 5%=>5*10**16;if _ry is 3, then will a price",
          "_ry": "range type, 0=>TwoWay, 1=>Positive, 2=>negative, 3=> Number",
          "_shieldPrice": "init price of shield, eg. 0.5*10**18",
          "_spearPrice": "init price of spear, eg. 0.5*10**18",
          "_trackName": "battle's track name, eg. WBTC-DAI",
          "amount": "collateral's amount",
          "durType": "0=> day, 1=> week, 2=> month"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3456,
        "contract": "contracts/Arena.sol:Arena",
        "label": "battleSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1666_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1666_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1665,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1389_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1389_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1384,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1388,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}