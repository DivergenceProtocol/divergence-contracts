{
  "address": "0x471318f3d0E713D0AEE2173f29168a5b49Cf0B8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "addBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "containBattle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBattle",
      "outputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "removeBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe59d1538eda1c3e96f5c03efb8f86c7248c94d02720757ee329b8d3e316ee8e5",
  "receipt": {
    "to": null,
    "from": "0x77Bec02085C22d64e3c9D8022B2aE1B648563d3d",
    "contractAddress": "0x471318f3d0E713D0AEE2173f29168a5b49Cf0B8E",
    "transactionIndex": 11,
    "gasUsed": "304035",
    "logsBloom": "0x
    "blockHash": "0xc985b902322140f1af0d37625541ef2f9a96848cb53aecac308d047cecc2ceba",
    "transactionHash": "0xe59d1538eda1c3e96f5c03efb8f86c7248c94d02720757ee329b8d3e316ee8e5",
    "logs": [],
    "blockNumber": 10108710,
    "cumulativeGasUsed": "791932",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "33e692906ffbf4642436f977ab99a8cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"addBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"containBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBattle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"removeBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arena.sol\":\"Arena\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc28d9f2ac7088d478d86ec6c0e1dadd48af1b2d0c1f6d497f9b652339e3002ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xfc0ee08ded0c86b74739af77f6281bf6a0427318f1e9bd6c4f74eedd03356c26\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23ebf6e219f634c3cc7445147368066dbfb5c1278fc4c48edbb9e0bd38aa4151\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Arena.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./Battle.sol\\\";\\nimport \\\"./structs/RangeType.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract Arena {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    EnumerableSetUpgradeable.AddressSet private battleSet;\\n\\n    mapping(address=>bool) public approved;\\n\\n    function battleLength() public view returns (uint256 len) {\\n\\n        len = battleSet.length();\\n    }\\n\\n    function addBattle(address _battle) public {\\n        battleSet.add(_battle);\\n    }\\n\\n    function getBattle(uint index) public view returns(address _battle) {\\n        _battle = battleSet.at(index);\\n    } \\n\\n    function removeBattle(address _battle) public {\\n        battleSet.remove(_battle);\\n    }\\n\\n    function containBattle(address _battle) public view returns(bool){\\n        return battleSet.contains(_battle);\\n    }\\n\\n    // function createBattle(\\n    //     address  _collateral,\\n    //     IOracle _oracle,\\n    //     string memory _trackName,\\n    //     uint256 amount,\\n    //     uint256 _spearPrice,\\n    //     uint256 _shieldPrice,\\n    //     uint256 _range,\\n    //     RangeType _ry,\\n    //     uint256 _startTS,\\n    //     uint256 _endTS\\n    // ) public {\\n    //     IERC20Upgradeable(_collateral).safeTransferFrom(msg.sender, address(this), amount);\\n    //     bytes32 salt = keccak256(abi.encodePacked(_collateral, _trackName, block.timestamp));\\n    //     address battle =\\n    //         Create2Upgradeable.deploy(\\n    //             0,\\n    //             salt,\\n    //             type(Battle).creationCode\\n    //         );\\n    //     if (!approved[_collateral]) {\\n    //         IERC20Upgradeable(_collateral).safeApprove(battle, 2**256-1);\\n    //     }\\n    //     IERC20Upgradeable(_collateral).safeTransfer(battle, amount);\\n    //     Battle(battle).init(_collateral, _oracle, _trackName, amount, _spearPrice, _shieldPrice, _range, _ry, _startTS, _endTS);\\n    // }\\n}\\n\",\"keccak256\":\"0x647ac829727fd345da5ae75b09a8bc62e6aff72c78562a1d03f2245a67e56413\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBattle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./lib/DMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./structs/RoundInfo.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**@title Battle contains multi-round */\\ncontract Battle is Ownable {\\n    \\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n    using SafeDecimalMath for uint;\\n    using DMath for uint;\\n\\n    IOracle public oracle;\\n\\n    /// @dev user's lp balance per round\\n    mapping(uint => mapping(address=>uint)) public lpBalanceOf;\\n    mapping(uint => uint) public lpTotalSupply;\\n    /// @dev user's spear balance per round\\n    mapping(uint => mapping(address=>uint)) public spearBalanceOf;\\n    mapping(uint => uint) public totalSpear;\\n    /// @dev user's shield balance per round\\n    mapping(uint => mapping(address=>uint)) public shieldBalanceOf;\\n    mapping(uint => uint) public totalShield;\\n    /// @dev collateral token belong to spear side\\n    mapping(uint => uint) public collateralSpear;\\n    /// @dev collateral token belong to shield side\\n    mapping(uint => uint) public collateralShield;\\n    /// @dev collateral token belong to non-spear and non-shield\\n    mapping(uint => uint) public collateralSurplus;\\n    /// @dev spear amount belong to the battle contract per round\\n    // mapping(uint => uint) public spearNum;\\n    /// @dev shield amount belong to the battle contract per round\\n    // mapping(uint => uint) public shieldNum;\\n    mapping(uint => uint) public spearPrice;\\n    mapping(uint => uint) public shieldPrice;\\n    mapping(address => uint) public userStartRoundSS;\\n    mapping(address => uint) public userStartRoundLP;\\n\\n    string public trackName;\\n    string public priceName;\\n    \\n    uint public currentRoundId;\\n    uint[] public roundIds;\\n    mapping(uint => RoundInfo) public rounds;\\n\\n    IERC20 public collateralToken;\\n\\n    mapping(uint => uint) public sqrt_k_spear;\\n    mapping(uint => uint) public sqrt_k_shield;\\n\\n    function roundIdsLen() public view returns(uint) {\\n        return roundIds.length;\\n    }\\n\\n    /// @dev init the battle and set the first round's params\\n    /// this function will become the start point \\n    /// @param amount The amount of collateral, the collateral can be any ERC20 token contract, such as dai\\n    /// @param _spearPrice Init price of spear\\n    /// @param _shieldPrice Init price of shield\\n    /// @param _range The positive and negative range of price changes\\n    /// @param _startTS The start timestamp of first round\\n    /// @param _endTS The end timestamp of first round \\n    function init(address _collateral, IOracle _oracle, string memory _trackName, string memory _priceName, uint amount, uint _spearPrice, uint _shieldPrice, uint _range, RangeType _ry, uint _startTS, uint _endTS) external {\\n        collateralToken = IERC20(_collateral);\\n        oracle = _oracle;\\n        trackName = _trackName;\\n        priceName = _priceName;\\n        require(_spearPrice.add(_shieldPrice) == 1e18, \\\"Battle::init:spear + shield should 1\\\");\\n        require(block.timestamp <= _startTS, \\\"Battle::_startTS should in future\\\");\\n        currentRoundId = _startTS;\\n        roundIds.push(_startTS);\\n        uint price = oracle.price(priceName);\\n        uint priceUnder = price.multiplyDecimal(uint(1e18).sub(_range));\\n        uint priceSuper = price.multiplyDecimal(uint(1e18).add(_range));\\n        rounds[_startTS] = RoundInfo({\\n            spearPrice: _spearPrice,\\n            shieldPrice: _shieldPrice,\\n            // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: _startTS,\\n            endTS: _endTS,\\n            range: _range,\\n            ry: _ry,\\n            targetPriceUnder: priceUnder,\\n            targetPriceSuper: priceSuper,\\n            roundResult: RoundResult.NonResult\\n        });\\n        spearBalanceOf[currentRoundId][address(this)] = amount;\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = amount;\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(amount);\\n        collateralSpear[currentRoundId] = _spearPrice.multiplyDecimal(amount);\\n        collateralShield[currentRoundId] = _shieldPrice.multiplyDecimal(amount);\\n        spearPrice[currentRoundId] = _spearPrice;\\n        shieldPrice[currentRoundId] = _shieldPrice;\\n        lpBalanceOf[currentRoundId][msg.sender] = amount;\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(amount);\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @dev The price of spear will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of collateral token, collateral token should a ERC20 token\\n    /// @dev user has three status: has spear before this round, first this round , not first for this round\\n    function buySpear(uint amount) external {\\n        if (userStartRoundSS[msg.sender] < currentRoundId) {\\n            claim();\\n        }\\n        userStartRoundSS[msg.sender] = currentRoundId;\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint spearOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralSpear[currentRoundId], spearBalanceOf[currentRoundId][address(this)], sqrt_k_spear[currentRoundId]);\\n        sqrt_k_spear[currentRoundId] = pre_k;\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(amount);\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].sub(spearOut);\\n        spearBalanceOf[currentRoundId][msg.sender] = spearBalanceOf[currentRoundId][msg.sender].add(spearOut);\\n        if(isBigger) {\\n            collateralShield[currentRoundId] = shieldBalanceOf[currentRoundId][address(this)].div(100);\\n        } else {\\n            collateralShield[currentRoundId] = spearBalanceOf[currentRoundId][address(this)].sub(collateralSpear[currentRoundId])\\n                                                                                            .multiplyDecimal(shieldBalanceOf[currentRoundId][address(this)])\\n                                                                                            .divideDecimal(spearBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function _setPrice() internal {\\n        uint spearPriceNow= collateralSpear[currentRoundId].divideDecimal(spearBalanceOf[currentRoundId][address(this)]);\\n        uint shieldPriceNow = collateralShield[currentRoundId].divideDecimal(shieldBalanceOf[currentRoundId][address(this)]);\\n        if (spearPriceNow >= 99e16 || shieldPriceNow >= 99e16) {\\n            if(spearPriceNow >= 99e16) {\\n                spearPrice[currentRoundId] = 99e16;\\n                shieldPrice[currentRoundId] = 1e16;\\n            } else {\\n                spearPrice[currentRoundId] = 1e16;\\n                shieldPrice[currentRoundId] = 99e16;\\n            }\\n        } else {\\n           spearPrice[currentRoundId] = spearPriceNow; \\n           shieldPrice[currentRoundId] = shieldPriceNow;\\n        }\\n    }\\n\\n    function spearSold(uint _roundId) public view returns(uint) {\\n        return totalSpear[_roundId].sub(spearBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function buySpearOut(uint amount) public view returns(uint) {\\n        (uint spearOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralSpear[currentRoundId], spearBalanceOf[currentRoundId][address(this)], sqrt_k_spear[currentRoundId]);\\n        return spearOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    /// @param amount amount of spear to sell\\n    function sellSpear(uint amount) external {\\n        uint userSpearAmount = spearBalanceOf[currentRoundId][msg.sender];\\n        require(userSpearAmount >= amount, \\\"sellSpear::msg.sender has not enough spear to sell\\\");\\n        uint amountOut = sellSpearOut(amount);\\n        spearBalanceOf[currentRoundId][msg.sender] = userSpearAmount.sub(amount);\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function shieldSold(uint _roundId) public view returns(uint) {\\n        return totalShield[_roundId].sub(shieldBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function sellSpearOut(uint amount) public view returns(uint amountOut) {\\n        // todo\\n        if (collateralSpear[currentRoundId] >= spearBalanceOf[currentRoundId][address(this)].mul(99).div(100)) {\\n            amountOut = sellAmount(amount, sqrt_k_spear[currentRoundId], sqrt_k_spear[currentRoundId]);\\n        } else {\\n            amountOut = sellAmount(amount, spearBalanceOf[currentRoundId][address(this)], collateralSpear[currentRoundId]);\\n        }\\n    }\\n\\n    /// @dev The price of shield will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of energy token, energy token should a ERC20 token\\n    function buyShield(uint amount) external {\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint shieldOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralShield[currentRoundId], shieldBalanceOf[currentRoundId][address(this)], sqrt_k_shield[currentRoundId]);\\n        sqrt_k_shield[currentRoundId] = pre_k;\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].sub(shieldOut);\\n        shieldBalanceOf[currentRoundId][msg.sender] = shieldBalanceOf[currentRoundId][msg.sender].add(shieldOut);\\n        if(isBigger) {\\n            collateralSpear[currentRoundId] = spearBalanceOf[currentRoundId][address(this)].div(100);\\n        } else {\\n            collateralSpear[currentRoundId] = shieldBalanceOf[currentRoundId][address(this)].sub(collateralShield[currentRoundId])\\n            .multiplyDecimal(spearBalanceOf[currentRoundId][address(this)])\\n            .divideDecimal(shieldBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function buyShieldOut(uint amount) public view returns(uint) {\\n        //todo\\n        (uint shieldOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralShield[currentRoundId], shieldBalanceOf[currentRoundId][address(this)], sqrt_k_shield[currentRoundId]);\\n        return shieldOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    function sellShield(uint amount) external {\\n        uint userShieldAmount = shieldBalanceOf[currentRoundId][msg.sender];\\n        require(userShieldAmount >= amount, \\\"sellShield::msg.sender has not enough shield to sell\\\");\\n        uint amountOut = sellShieldOut(amount);\\n        shieldBalanceOf[currentRoundId][msg.sender] = userShieldAmount.sub(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function sellShieldOut(uint amount) public view returns(uint amountOut) {\\n        //todo\\n        if (collateralShield[currentRoundId] >= shieldBalanceOf[currentRoundId][address(this)].mul(99).div(100)) {\\n            amountOut = sellAmount(amount, sqrt_k_shield[currentRoundId], sqrt_k_shield[currentRoundId]);\\n        } else {\\n            amountOut = sellAmount(amount, shieldBalanceOf[currentRoundId][address(this)], collateralShield[currentRoundId]);\\n        }\\n    }\\n\\n    /// @dev Announce the results of this round\\n    /// The final price will be provided by an external third party Oracle\\n    function settle() external {\\n        require(block.timestamp >= rounds[currentRoundId].endTS, \\\"too early to settle\\\");\\n        require(rounds[currentRoundId].roundResult == RoundResult.NonResult, \\\"round had settled\\\");\\n        uint price = oracle.price(priceName);\\n        rounds[currentRoundId].endPrice = price;\\n\\n        uint _range = rounds[currentRoundId].range;\\n        uint priceUnder = price.multiplyDecimal(uint(1e18).sub(_range));\\n        uint priceSuper = price.multiplyDecimal(uint(1e18).add(_range));\\n        rounds[block.timestamp] = RoundInfo({\\n            spearPrice: rounds[roundIds[0]].spearPrice,\\n            shieldPrice: rounds[roundIds[0]].shieldPrice,\\n            // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: block.timestamp,\\n            endTS: block.timestamp.add(rounds[currentRoundId].endTS.sub(rounds[currentRoundId].startTS)),\\n            range: _range,\\n            ry: rounds[currentRoundId].ry,\\n            targetPriceUnder: priceUnder,\\n            targetPriceSuper: priceSuper,\\n            roundResult: RoundResult.NonResult \\n        });\\n       \\n        // new round\\n        uint collateralAmount;\\n        if (rounds[currentRoundId].ry == RangeType.TwoWay) {\\n            if (price <= rounds[currentRoundId].targetPriceUnder || price >= rounds[currentRoundId].targetPriceSuper) {\\n                // spear win\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else if (rounds[currentRoundId].ry == RangeType.Positive){\\n            if (price >= rounds[currentRoundId].targetPriceSuper) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else {\\n            if (price <= rounds[currentRoundId].targetPriceUnder) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        }\\n        if(rounds[currentRoundId].roundResult == RoundResult.SpearWin) {\\n            spearBalanceOf[block.timestamp][address(this)] = spearBalanceOf[currentRoundId][address(this)];\\n            shieldBalanceOf[block.timestamp][address(this)] = spearBalanceOf[currentRoundId][address(this)];\\n            collateralAmount = spearBalanceOf[currentRoundId][address(this)];\\n        } else {\\n            spearBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[currentRoundId][address(this)];\\n            shieldBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[currentRoundId][address(this)];\\n            collateralAmount = shieldBalanceOf[currentRoundId][address(this)];\\n        }\\n        spearPrice[block.timestamp] = spearPrice[currentRoundId];\\n        shieldPrice[block.timestamp] = shieldPrice[currentRoundId];\\n        collateralSpear[block.timestamp] = spearPrice[block.timestamp].multiplyDecimal(collateralAmount);\\n        collateralShield[block.timestamp] = shieldPrice[block.timestamp].multiplyDecimal(collateralAmount);\\n        currentRoundId= block.timestamp;\\n        roundIds.push(block.timestamp);\\n    }\\n\\n    // function needTokenLiqui(uint amount) public view returns(uint _energy0, uint _energy1, uint _reserve0, uint _reserve1) {\\n    //     _energy0 = energy0.divideDecimal(energy0.add(energy1)).multiplyDecimal(amount);\\n    //     _energy1 = energy1.divideDecimal(energy0.add(energy1)).multiplyDecimal(amount);\\n    //     uint per = amount.divideDecimal(energy0.add(energy1));\\n    //     _reserve0 = per.multiplyDecimal(energy0);\\n    //     _reserve1 = per.multiplyDecimal(energy1);\\n    // }\\n\\n    /// @dev The user adds energy token by calling this function, as well as the corresponding number of spear and shield\\n    /// @param amount of energy token transfer to battle contract\\n    function addLiquility(uint amount) external {\\n        if (userStartRoundLP[msg.sender] < currentRoundId) {\\n            removeLiquility(0);\\n        }\\n        // new\\n        uint collateralSS = collateralSpear[currentRoundId].add(collateralShield[currentRoundId]);\\n        uint deltaCollateralSpear = collateralSpear[currentRoundId].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaCollateralShield = collateralShield[currentRoundId].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaSpear = spearBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaShield = shieldBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(deltaCollateralSpear);\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(deltaCollateralShield);\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].add(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].add(deltaShield);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(deltaShield);\\n\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(amount);\\n        lpBalanceOf[currentRoundId][msg.sender] = lpBalanceOf[currentRoundId][msg.sender].add(amount);\\n    }\\n\\n    function addLiquilityIn(uint amount) public view returns(uint, uint) {\\n        uint collateralSS = collateralSpear[currentRoundId].add(collateralShield[currentRoundId]);\\n        uint deltaSpear = spearBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaShield = shieldBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        return (deltaSpear, deltaShield);\\n    }\\n\\n    function removeLiquilityOut(uint amount) public view returns(uint) {\\n        uint spearSoldAmount = spearSold(currentRoundId);\\n        uint shieldSoldAmount = shieldSold(currentRoundId);\\n        uint maxSold = spearSoldAmount > shieldSoldAmount ? spearSoldAmount : shieldSoldAmount;\\n        uint deltaCollateral = lpTotalSupply[currentRoundId].sub(maxSold).multiplyDecimal(amount).divideDecimal(lpTotalSupply[currentRoundId]);\\n        return deltaCollateral;\\n    }\\n\\n    /// @dev The user retrieves the energy token\\n    /// @param amount of energy token to msg.sender, if msg.sender don't have enought spear and shield, the transaction\\n    /// will failed\\n    function removeLiquility(uint amount) public  {\\n        // require(userStartRoundLP[msg.sender] !=0, \\\"user dont have liquility\\\");\\n        if(userStartRoundLP[msg.sender] == 0) {\\n            return;\\n        }\\n        uint lpAmount;\\n        if (userStartRoundLP[msg.sender] == currentRoundId) {\\n            // dont have history\\n            lpAmount = lpBalanceOf[currentRoundId][msg.sender];\\n        } else {\\n            // history handle\\n            lpAmount = pendingLP(msg.sender);\\n        }\\n        require(lpAmount >= amount, \\\"not enough lp to burn\\\");\\n        uint spearSoldAmount = spearSold(currentRoundId);\\n        uint shieldSoldAmount = shieldSold(currentRoundId);\\n        uint maxSold = spearSoldAmount > shieldSoldAmount ? spearSoldAmount : shieldSoldAmount;\\n        uint deltaCollateral = lpTotalSupply[currentRoundId].sub(maxSold).multiplyDecimal(amount).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaSpear = deltaCollateral.multiplyDecimal(collateralSpear[currentRoundId]).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaShield = deltaCollateral.multiplyDecimal(collateralShield[currentRoundId]).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaCollateralSpear = collateralSpear[currentRoundId].multiplyDecimal(deltaCollateral).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaCollateralShield = collateralShield[currentRoundId].multiplyDecimal(deltaCollateral).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaCollateralSurplus = collateralSurplus[currentRoundId].multiplyDecimal(deltaCollateral).divideDecimal(lpTotalSupply[currentRoundId]);\\n\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].sub(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].sub(deltaShield);\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].sub(deltaCollateralSpear);\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].sub(deltaCollateralShield);\\n        collateralSurplus[currentRoundId] = collateralSurplus[currentRoundId].sub(deltaCollateralSurplus);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].sub(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].sub(deltaShield);\\n\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].sub(amount);\\n        lpBalanceOf[currentRoundId][msg.sender] = lpAmount.sub(amount);\\n        collateralToken.safeTransfer(msg.sender, deltaCollateral);\\n        \\n    }\\n\\n    function pendingClaim(address acc) public view returns(uint amount) {\\n        uint userRoundId = userStartRoundSS[acc];\\n        if(userRoundId != 0 && userRoundId < currentRoundId) {\\n            if(rounds[userRoundId].roundResult == RoundResult.SpearWin) {\\n                amount = spearBalanceOf[userRoundId][acc];\\n            } else if (rounds[userRoundId].roundResult == RoundResult.ShieldWin) {\\n                amount = shieldBalanceOf[userRoundId][acc];\\n            }\\n        }\\n    }\\n\\n    function pendingLP(address acc) public view returns(uint lpAmount) {\\n        uint userRoundId = userStartRoundLP[acc];\\n        if(userRoundId != 0 && userRoundId <= currentRoundId) {\\n                // future round\\n                lpAmount = lpBalanceOf[userRoundId][acc];\\n                for(uint i; i < roundIds.length-1;i++) {\\n                    if (roundIds[i] >= userRoundId) {\\n                        // user's all round\\n                        uint newLpAmount = nextRoundLP(roundIds[i], acc, lpAmount);\\n                        lpAmount = newLpAmount;\\n                    }\\n                }\\n        }\\n    }\\n\\n    function nextRoundLP(uint roundId, address acc, uint lpAmount) public view returns(uint amount) {\\n        if(roundId == currentRoundId) {\\n            return lpBalanceOf[roundId][acc];\\n        }\\n        if(rounds[roundId].roundResult == RoundResult.SpearWin) {\\n            uint spearAmountTotal = spearBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(spearAmountTotal).divideDecimal(lpTotalSupply[roundId]);\\n        } else {\\n            uint shieldAmountTotal = shieldBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(shieldAmountTotal).divideDecimal(lpTotalSupply[roundId]);\\n        }\\n    }\\n\\n    /// @dev normal users get back their profits\\n    function claim() public {\\n        uint amount = pendingClaim(msg.sender);\\n        if (amount != 0) {\\n            spearBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            shieldBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            delete userStartRoundSS[msg.sender];\\n            collateralToken.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @dev Calculate how many spears and shields can be obtained\\n    /// @param amountIn amount transfer to battle contract\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint _pre_k) public pure returns (uint amountOut, bool e, uint pre_k) {\\n        require(amountIn > 0, 'Battle: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'Battle: INSUFFICIENT_LIQUIDITY');\\n        if (reserveIn >= reserveOut.mul(99).div(100)) {\\n            amountOut = amountIn;\\n            e = true;\\n            return (amountOut, e, _pre_k);\\n        }\\n        // if amountIn > sqrt(reserveIn)\\n        uint maxAmount = DMath.sqrt(reserveIn*reserveOut.mul(100).div(99));\\n        pre_k = maxAmount;\\n        // console.log(\\\"maxAmount %s and amountIn %s, reserveIn %s, reserveOut %s\\\", maxAmount, amountIn, reserveIn);\\n        if (amountIn.add(reserveIn) > maxAmount) {\\n            uint maxAmountIn = maxAmount.sub(reserveIn);\\n            uint amountInWithFee = maxAmountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n            amountOut = amountOut.add(amountIn.sub(maxAmountIn));\\n            e = true;\\n        } else {\\n            uint amountInWithFee = amountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n        }\\n    }\\n\\n    function sellAmount(uint amountToSell, uint reserve, uint energy) public pure returns(uint amount) {\\n        uint amountInWithFee = amountToSell.mul(1000);\\n        uint numerator = amountInWithFee.mul(energy);\\n        uint denominator = reserve.mul(1000).add(amountInWithFee);\\n        amount = numerator / denominator;\\n    }\\n\\n    function test() public {}\\n\\n    // // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    // function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\\n    //     require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    //     require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    //     uint numerator = reserveIn.multiplyDecimal(amountOut).mul(1000);\\n    //     uint denominator = reserveOut.sub(amountOut).mul(1000);\\n    //     amountIn = (numerator / denominator).add(1);\\n    // }\\n}\\n\",\"keccak256\":\"0x1666823aa7f0879d050e07e2fd86fcbae6208a5a550845786c98021714c14ad4\",\"license\":\"MIT\"},\"contracts/interfaces/IBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBattle {\\n    function init(uint amount, uint price0, uint pirce1, uint price2, uint endTs) external;\\n    function buySpear(uint amount) external;\\n    function sellSpear(uint amount) external;\\n    function buyShield(uint amount) external;\\n    function sellShield(uint amount) external;\\n    function settle(uint price) external;\\n    function addLiqui(uint amount) external;\\n    function removeLiqui(uint amount) external;\\n    function withdraw() external;\\n}\",\"keccak256\":\"0xc2f71ea24a60c3c921a6d6947ca4d4699592c863f37b4ca3bb3c072c5057d0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n   function price(string memory symbol) external returns(uint); \\n}\",\"keccak256\":\"0xd26b7e8adda13a8e11e63902344fe10320100a83e6b0a1ea33d4ddec517d4e15\",\"license\":\"MIT\"},\"contracts/lib/DMath.sol\":{\"content\":\"  \\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary DMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xe9a4c4d5a1e9eb41b47118bcdc8008d4c580676e6228767e1773be3ae839e94d\",\"license\":\"GPL-3.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/structs/RangeResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RoundResult {\\n    NonResult, // 0\\n    SpearWin, // 1\\n    ShieldWin //2\\n}\\n\",\"keccak256\":\"0x2e31ee8df33d61368e943c1686127f421b097fa26c97d8a4976250a0d0f6cab9\",\"license\":\"MIT\"},\"contracts/structs/RangeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RangeType {\\n    TwoWay, // 0\\n    Positive, // 1\\n    negative // 2\\n}\\n\",\"keccak256\":\"0xcb8a7a972e1c8ca1e8ef10572f2251cfe5cc308c8975c85e12b8f5b2d6c93a83\",\"license\":\"MIT\"},\"contracts/structs/RoundInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RangeType.sol\\\";\\nimport \\\"./RangeResult.sol\\\";\\n\\nstruct RoundInfo {\\n    uint256 spearPrice;\\n    uint256 shieldPrice;\\n    uint256 startPrice;\\n    uint256 endPrice;\\n    uint256 startTS;\\n    uint256 endTS;\\n    uint256 range;\\n    RangeType ry;\\n    uint256 targetPriceUnder;\\n    uint256 targetPriceSuper;\\n    RoundResult roundResult;\\n}\\n\",\"keccak256\":\"0x4add5888e42d703f9dba4a1c2decac16f55696694262c9e26cc2fc342d03e44b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061048b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636dd0ce7a1461006757806383d342ba1461009757806392d559b1146100ac578063a3bfe274146100cf578063d8b964e6146100e5578063fab29a2714610108575b600080fd5b61007a6100753660046103f8565b61011b565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa6100a53660046103d1565b61012d565b005b6100bf6100ba3660046103d1565b61013c565b604051901515815260200161008e565b6100d7610148565b60405190815260200161008e565b6100bf6100f33660046103d1565b60026020526000908152604090205460ff1681565b6100aa6101163660046103d1565b610159565b60006101278183610164565b92915050565b610138600082610177565b5050565b6000610127818361018c565b600061015460006101ae565b905090565b6101386000826101b8565b600061017083836101cd565b9392505050565b6000610170836001600160a01b038416610265565b6001600160a01b03811660009081526001830160205260408120541515610170565b6000610127825490565b6000610170836001600160a01b0384166102b4565b8154600090821061022f5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840160405180910390fd5b82600001828154811061025257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546102ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610127565b506000610127565b600081815260018301602052604081205480156103c75760006102d8600183610428565b85549091506000906102ec90600190610428565b9050600086600001828154811061031357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061034457634e487b7160e01b600052603260045260246000fd5b60009182526020909120015561035b836001610410565b6000828152600189016020526040902055865487908061038b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610127565b6000915050610127565b6000602082840312156103e2578081fd5b81356001600160a01b0381168114610170578182fd5b600060208284031215610409578081fd5b5035919050565b600082198211156104235761042361043f565b500190565b60008282101561043a5761043a61043f565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212202f557ec477b285de7829fca9a3ffc2f3bab9f5ee5ace3b722c9be9eb4ac2522f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80636dd0ce7a1461006757806383d342ba1461009757806392d559b1146100ac578063a3bfe274146100cf578063d8b964e6146100e5578063fab29a2714610108575b600080fd5b61007a6100753660046103f8565b61011b565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa6100a53660046103d1565b61012d565b005b6100bf6100ba3660046103d1565b61013c565b604051901515815260200161008e565b6100d7610148565b60405190815260200161008e565b6100bf6100f33660046103d1565b60026020526000908152604090205460ff1681565b6100aa6101163660046103d1565b610159565b60006101278183610164565b92915050565b610138600082610177565b5050565b6000610127818361018c565b600061015460006101ae565b905090565b6101386000826101b8565b600061017083836101cd565b9392505050565b6000610170836001600160a01b038416610265565b6001600160a01b03811660009081526001830160205260408120541515610170565b6000610127825490565b6000610170836001600160a01b0384166102b4565b8154600090821061022f5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840160405180910390fd5b82600001828154811061025257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546102ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610127565b506000610127565b600081815260018301602052604081205480156103c75760006102d8600183610428565b85549091506000906102ec90600190610428565b9050600086600001828154811061031357634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061034457634e487b7160e01b600052603260045260246000fd5b60009182526020909120015561035b836001610410565b6000828152600189016020526040902055865487908061038b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610127565b6000915050610127565b6000602082840312156103e2578081fd5b81356001600160a01b0381168114610170578182fd5b600060208284031215610409578081fd5b5035919050565b600082198211156104235761042361043f565b500190565b60008282101561043a5761043a61043f565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212202f557ec477b285de7829fca9a3ffc2f3bab9f5ee5ace3b722c9be9eb4ac2522f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3456,
        "contract": "contracts/Arena.sol:Arena",
        "label": "battleSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1666_storage"
      },
      {
        "astId": 3460,
        "contract": "contracts/Arena.sol:Arena",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1666_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1665,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1389_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1389_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1384,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1388,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}