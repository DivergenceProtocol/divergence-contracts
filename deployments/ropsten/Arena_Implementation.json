{
  "address": "0x49F6Ebbd0fd6E40a2c16935B52aCef0Fe8c6dEB2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "addBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "containBattle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_trackName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_priceName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_spearPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shieldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_range",
          "type": "uint256"
        },
        {
          "internalType": "enum RangeType",
          "name": "_ry",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "durType",
          "type": "uint256"
        }
      ],
      "name": "createBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBattle",
      "outputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_battle",
          "type": "address"
        }
      ],
      "name": "removeBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0085d3919b2f312892fe1dd77af8923cbe5e6c432c2f7ce08805c480fa0e3f80",
  "receipt": {
    "to": null,
    "from": "0x77Bec02085C22d64e3c9D8022B2aE1B648563d3d",
    "contractAddress": "0x49F6Ebbd0fd6E40a2c16935B52aCef0Fe8c6dEB2",
    "transactionIndex": 22,
    "gasUsed": "3923343",
    "logsBloom": "0x
    "blockHash": "0x8ecc994339a4ac75a753229f1f0a7faccbfe27f4dd764ca3b2e6f4905dbe086a",
    "transactionHash": "0x0085d3919b2f312892fe1dd77af8923cbe5e6c432c2f7ce08805c480fa0e3f80",
    "logs": [],
    "blockNumber": 10144269,
    "cumulativeGasUsed": "5988190",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "81c3f9eeac8d8e8d44aa0041f6e9c44a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"addBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"containBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_priceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spearPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shieldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"},{\"internalType\":\"enum RangeType\",\"name\":\"_ry\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"durType\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBattle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_battle\",\"type\":\"address\"}],\"name\":\"removeBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arena.sol\":\"Arena\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc28d9f2ac7088d478d86ec6c0e1dadd48af1b2d0c1f6d497f9b652339e3002ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xfc0ee08ded0c86b74739af77f6281bf6a0427318f1e9bd6c4f74eedd03356c26\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23ebf6e219f634c3cc7445147368066dbfb5c1278fc4c48edbb9e0bd38aa4151\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Arena.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./Battle.sol\\\";\\nimport \\\"./structs/RangeType.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract Arena {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    EnumerableSetUpgradeable.AddressSet private battleSet;\\n\\n    function battleLength() public view returns (uint256 len) {\\n\\n        len = battleSet.length();\\n    }\\n\\n    function addBattle(address _battle) public {\\n        battleSet.add(_battle);\\n    }\\n\\n    function getBattle(uint index) public view returns(address _battle) {\\n        _battle = battleSet.at(index);\\n    } \\n\\n    function removeBattle(address _battle) public {\\n        battleSet.remove(_battle);\\n    }\\n\\n    function containBattle(address _battle) public view returns(bool){\\n        return battleSet.contains(_battle);\\n    }\\n\\n    function createBattle(\\n        address  _collateral,\\n        IOracle _oracle,\\n        string memory _trackName,\\n        string memory _priceName,\\n        uint256 amount,\\n        uint256 _spearPrice,\\n        uint256 _shieldPrice,\\n        uint256 _range,\\n        RangeType _ry,\\n        uint durType\\n    ) public {\\n        IERC20Upgradeable(_collateral).safeTransferFrom(msg.sender, address(this), amount);\\n        // bytes32 salt = keccak256(abi.encodePacked(_collateral, _trackName, block.timestamp));\\n        // address battle =\\n        //     Create2Upgradeable.deploy(\\n        //         0,\\n        //         salt,\\n        //         type(Battle).creationCode\\n        //     );\\n        Battle battle = new Battle(_collateral, _oracle, _trackName, _priceName);\\n        IERC20Upgradeable(_collateral).safeTransfer(address(this), amount);\\n        battle.init(msg.sender, amount, _spearPrice, _shieldPrice, _range, _ry, durType);\\n        battleSet.add(address(battle));\\n    }\\n}\\n\",\"keccak256\":\"0xaca1c33ff94ec6aed4748467b4596eefbd4e975f43d6f9b34a82621dbf7d60b2\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBattle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./lib/DMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./structs/RoundInfo.sol\\\";\\nimport \\\"./algo/Pricing.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**@title Battle contains multi-round */\\ncontract Battle is Ownable, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeDecimalMath for uint256;\\n    using DMath for uint256;\\n\\n    IOracle public oracle;\\n\\n    /// @dev user's lp balance per round\\n    mapping(uint256 => mapping(address => uint256)) public lpBalanceOf;\\n    mapping(uint256 => uint256) public lpTotalSupply;\\n    /// @dev user's spear balance per round\\n    mapping(uint256 => mapping(address => uint256)) public spearBalanceOf;\\n    mapping(uint256 => uint256) public totalSpear;\\n    /// @dev user's shield balance per round\\n    mapping(uint256 => mapping(address => uint256)) public shieldBalanceOf;\\n    mapping(uint256 => uint256) public totalShield;\\n    /// @dev collateral token belong to spear side\\n    mapping(uint256 => uint256) public collateralSpear;\\n    /// @dev collateral token belong to shield side\\n    mapping(uint256 => uint256) public collateralShield;\\n    /// @dev collateral token belong to non-spear and non-shield\\n    mapping(uint256 => uint256) public collateralSurplus;\\n    /// @dev spear amount belong to the battle contract per round\\n    // mapping(uint => uint) public spearNum;\\n    /// @dev shield amount belong to the battle contract per round\\n    // mapping(uint => uint) public shieldNum;\\n    mapping(uint256 => uint256) public spearPrice;\\n    mapping(uint256 => uint256) public shieldPrice;\\n    mapping(address => uint256) public userStartRoundSS;\\n    mapping(address => uint256) public userStartRoundLP;\\n\\n    string public trackName;\\n    string public priceName;\\n\\n    uint256 public currentRoundId;\\n    uint256[] public roundIds;\\n    mapping(uint256 => RoundInfo) public rounds;\\n\\n    IERC20 public collateralToken;\\n\\n    mapping(uint256 => uint256) public sqrt_k_spear;\\n    mapping(uint256 => uint256) public sqrt_k_shield;\\n\\n    bool public isFirst = true;\\n    uint256 public battleDur;\\n\\n    function roundIdsLen() public view returns (uint256) {\\n        return roundIds.length;\\n    }\\n\\n    constructor(\\n        address _collateral,\\n        IOracle _oracle,\\n        string memory _trackName,\\n        string memory _priceName\\n    ) {\\n        collateralToken = IERC20(_collateral);\\n        oracle = _oracle;\\n        trackName = _trackName;\\n        priceName = _priceName;\\n    }\\n\\n    /// @dev init the battle and set the first round's params\\n    /// this function will become the start point\\n    /// @param amount The amount of collateral, the collateral can be any ERC20 token contract, such as dai\\n    /// @param _spearPrice Init price of spear\\n    /// @param _shieldPrice Init price of shield\\n    /// @param _range The positive and negative range of price changes\\n    function init(\\n        address creater,\\n        uint256 amount,\\n        uint256 _spearPrice,\\n        uint256 _shieldPrice,\\n        uint256 _range,\\n        RangeType _ry,\\n        uint256 _battleDur\\n    ) external {\\n        require(isFirst, \\\"not first init\\\");\\n        require(\\n            _battleDur == 0 || _battleDur == 1 || _battleDur == 2,\\n            \\\"Not support battle duration\\\"\\n        );\\n        battleDur = _battleDur;\\n        isFirst = false;\\n        require(\\n            _spearPrice.add(_shieldPrice) == 1e18,\\n            \\\"Battle::init:spear + shield should 1\\\"\\n        );\\n        // require(block.timestamp <= _startTS, \\\"Battle::_startTS should in future\\\");\\n        (uint256 _startTS, uint256 _endTS) = getDurationTs();\\n        currentRoundId = _startTS;\\n        roundIds.push(_startTS);\\n        uint256 price = oracle.price(priceName);\\n        // uint priceUnder = price.multiplyDecimal(uint(1e18).sub(_range));\\n        // uint priceSuper = price.multiplyDecimal(uint(1e18).add(_range));\\n        rounds[_startTS] = RoundInfo({\\n            spearPrice: _spearPrice,\\n            shieldPrice: _shieldPrice, // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: _startTS,\\n            endTS: _endTS,\\n            range: _range,\\n            ry: _ry, // targetPriceUnder: priceUnder,\\n            targetPriceUnder: price.multiplyDecimal(uint256(1e18).sub(_range)), // targetPriceSuper: priceSuper,\\n            targetPriceSuper: price.multiplyDecimal(uint256(1e18).add(_range)),\\n            roundResult: RoundResult.NonResult\\n        });\\n\\n        spearBalanceOf[currentRoundId][address(this)] = amount;\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = amount;\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(amount);\\n        collateralSpear[currentRoundId] = _spearPrice.multiplyDecimal(amount);\\n        collateralShield[currentRoundId] = _shieldPrice.multiplyDecimal(amount);\\n        spearPrice[currentRoundId] = _spearPrice;\\n        shieldPrice[currentRoundId] = _shieldPrice;\\n        lpBalanceOf[currentRoundId][creater] = amount;\\n        userStartRoundLP[creater] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(\\n            amount\\n        );\\n\\n        // collateralToken.safeTransferFrom(creater, address(this), amount);\\n    }\\n\\n    /// @dev The price of spear will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of collateral token, collateral token should a ERC20 token\\n    /// @dev user has three status: has spear before this round, first this round , not first for this round\\n    function buySpear(uint256 amount) external {\\n        if (userStartRoundSS[msg.sender] < currentRoundId) {\\n            claim();\\n        }\\n        userStartRoundSS[msg.sender] = currentRoundId;\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint256 spearOut, bool isBigger, uint256 pre_k) =\\n            getAmountOut(\\n                amount,\\n                collateralSpear[currentRoundId],\\n                spearBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_spear[currentRoundId]\\n            );\\n        sqrt_k_spear[currentRoundId] = pre_k;\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(\\n            amount\\n        );\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(spearOut);\\n        spearBalanceOf[currentRoundId][msg.sender] = spearBalanceOf[\\n            currentRoundId\\n        ][msg.sender]\\n            .add(spearOut);\\n        if (isBigger) {\\n            collateralShield[currentRoundId] = shieldBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .div(100);\\n        } else {\\n            collateralShield[currentRoundId] = spearBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .sub(collateralSpear[currentRoundId])\\n                .multiplyDecimal(shieldBalanceOf[currentRoundId][address(this)])\\n                .divideDecimal(spearBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function _setPrice() internal {\\n        uint256 spearPriceNow =\\n            collateralSpear[currentRoundId].divideDecimal(\\n                spearBalanceOf[currentRoundId][address(this)]\\n            );\\n        uint256 shieldPriceNow =\\n            collateralShield[currentRoundId].divideDecimal(\\n                shieldBalanceOf[currentRoundId][address(this)]\\n            );\\n        if (spearPriceNow >= 99e16 || shieldPriceNow >= 99e16) {\\n            if (spearPriceNow >= 99e16) {\\n                spearPrice[currentRoundId] = 99e16;\\n                shieldPrice[currentRoundId] = 1e16;\\n            } else {\\n                spearPrice[currentRoundId] = 1e16;\\n                shieldPrice[currentRoundId] = 99e16;\\n            }\\n        } else {\\n            spearPrice[currentRoundId] = spearPriceNow;\\n            shieldPrice[currentRoundId] = shieldPriceNow;\\n        }\\n    }\\n\\n    function spearSold(uint256 _roundId) public view returns (uint256) {\\n        return\\n            totalSpear[_roundId].sub(spearBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function buySpearOut(uint256 amount) public view returns (uint256) {\\n        (uint256 spearOut, , ) =\\n            getAmountOut(\\n                amount,\\n                collateralSpear[currentRoundId],\\n                spearBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_spear[currentRoundId]\\n            );\\n        return spearOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    /// @param amount amount of spear to sell\\n    function sellSpear(uint256 amount) external {\\n        uint256 userSpearAmount = spearBalanceOf[currentRoundId][msg.sender];\\n        require(\\n            userSpearAmount >= amount,\\n            \\\"sellSpear::msg.sender has not enough spear to sell\\\"\\n        );\\n        uint256 amountOut = sellSpearOut(amount);\\n        spearBalanceOf[currentRoundId][msg.sender] = userSpearAmount.sub(\\n            amount\\n        );\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function shieldSold(uint256 _roundId) public view returns (uint256) {\\n        return\\n            totalShield[_roundId].sub(shieldBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function sellSpearOut(uint256 amount)\\n        public\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        // todo\\n        if (\\n            collateralSpear[currentRoundId] >=\\n            spearBalanceOf[currentRoundId][address(this)].mul(99).div(100)\\n        ) {\\n            amountOut = sellAmount(\\n                amount,\\n                sqrt_k_spear[currentRoundId],\\n                sqrt_k_spear[currentRoundId]\\n            );\\n        } else {\\n            amountOut = sellAmount(\\n                amount,\\n                spearBalanceOf[currentRoundId][address(this)],\\n                collateralSpear[currentRoundId]\\n            );\\n        }\\n    }\\n\\n    /// @dev The price of shield will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of energy token, energy token should a ERC20 token\\n    function buyShield(uint256 amount) external {\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint256 shieldOut, bool isBigger, uint256 pre_k) =\\n            getAmountOut(\\n                amount,\\n                collateralShield[currentRoundId],\\n                shieldBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_shield[currentRoundId]\\n            );\\n        sqrt_k_shield[currentRoundId] = pre_k;\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(\\n            amount\\n        );\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(shieldOut);\\n        shieldBalanceOf[currentRoundId][msg.sender] = shieldBalanceOf[\\n            currentRoundId\\n        ][msg.sender]\\n            .add(shieldOut);\\n        if (isBigger) {\\n            collateralSpear[currentRoundId] = spearBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .div(100);\\n        } else {\\n            collateralSpear[currentRoundId] = shieldBalanceOf[currentRoundId][\\n                address(this)\\n            ]\\n                .sub(collateralShield[currentRoundId])\\n                .multiplyDecimal(spearBalanceOf[currentRoundId][address(this)])\\n                .divideDecimal(shieldBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function buyShieldOut(uint256 amount) public view returns (uint256) {\\n        //todo\\n        (uint256 shieldOut, , ) =\\n            getAmountOut(\\n                amount,\\n                collateralShield[currentRoundId],\\n                shieldBalanceOf[currentRoundId][address(this)],\\n                sqrt_k_shield[currentRoundId]\\n            );\\n        return shieldOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    function sellShield(uint256 amount) external {\\n        uint256 userShieldAmount = shieldBalanceOf[currentRoundId][msg.sender];\\n        require(\\n            userShieldAmount >= amount,\\n            \\\"sellShield::msg.sender has not enough shield to sell\\\"\\n        );\\n        uint256 amountOut = sellShieldOut(amount);\\n        shieldBalanceOf[currentRoundId][msg.sender] = userShieldAmount.sub(\\n            amount\\n        );\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function sellShieldOut(uint256 amount)\\n        public\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        //todo\\n        if (\\n            collateralShield[currentRoundId] >=\\n            shieldBalanceOf[currentRoundId][address(this)].mul(99).div(100)\\n        ) {\\n            amountOut = sellAmount(\\n                amount,\\n                sqrt_k_shield[currentRoundId],\\n                sqrt_k_shield[currentRoundId]\\n            );\\n        } else {\\n            amountOut = sellAmount(\\n                amount,\\n                shieldBalanceOf[currentRoundId][address(this)],\\n                collateralShield[currentRoundId]\\n            );\\n        }\\n    }\\n\\n    function getDurationTs()\\n        internal\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        if (battleDur == 0) {\\n            start = block.timestamp - (block.timestamp % 86400);\\n            end = start + 86400;\\n        } else if (battleDur == 1) {\\n            start = block.timestamp - ((block.timestamp + 259200) % 604800);\\n            end = start + 604800;\\n        } else if (battleDur == 2) {}\\n    }\\n\\n    /// @dev Announce the results of this round\\n    /// The final price will be provided by an external third party Oracle\\n    function settle() external {\\n        require(\\n            block.timestamp >= rounds[currentRoundId].endTS,\\n            \\\"too early to settle\\\"\\n        );\\n        require(\\n            rounds[currentRoundId].roundResult == RoundResult.NonResult,\\n            \\\"round had settled\\\"\\n        );\\n        uint256 price = oracle.price(priceName);\\n        rounds[currentRoundId].endPrice = price;\\n        uint256 _range = rounds[currentRoundId].range;\\n        uint256 priceUnder = price.multiplyDecimal(uint256(1e18).sub(_range));\\n        uint256 priceSuper = price.multiplyDecimal(uint256(1e18).add(_range));\\n        (uint256 start_ts, uint256 end_ts) = getDurationTs();\\n        rounds[block.timestamp] = RoundInfo({\\n            spearPrice: rounds[roundIds[0]].spearPrice,\\n            shieldPrice: rounds[roundIds[0]].shieldPrice, // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: start_ts,\\n            endTS: end_ts,\\n            range: _range,\\n            ry: rounds[currentRoundId].ry,\\n            targetPriceUnder: priceUnder,\\n            targetPriceSuper: priceSuper,\\n            roundResult: RoundResult.NonResult\\n        });\\n\\n        // new round\\n        uint256 collateralAmount;\\n        if (rounds[currentRoundId].ry == RangeType.TwoWay) {\\n            if (\\n                price <= rounds[currentRoundId].targetPriceUnder ||\\n                price >= rounds[currentRoundId].targetPriceSuper\\n            ) {\\n                // spear win\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else if (rounds[currentRoundId].ry == RangeType.Positive) {\\n            if (price >= rounds[currentRoundId].targetPriceSuper) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else {\\n            if (price <= rounds[currentRoundId].targetPriceUnder) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        }\\n        if (rounds[currentRoundId].roundResult == RoundResult.SpearWin) {\\n            spearBalanceOf[block.timestamp][address(this)] = spearBalanceOf[\\n                currentRoundId\\n            ][address(this)];\\n            shieldBalanceOf[block.timestamp][address(this)] = spearBalanceOf[\\n                currentRoundId\\n            ][address(this)];\\n            collateralAmount = spearBalanceOf[currentRoundId][address(this)];\\n        } else {\\n            spearBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[\\n                currentRoundId\\n            ][address(this)];\\n            shieldBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[\\n                currentRoundId\\n            ][address(this)];\\n            collateralAmount = shieldBalanceOf[currentRoundId][address(this)];\\n        }\\n        spearPrice[block.timestamp] = spearPrice[currentRoundId];\\n        shieldPrice[block.timestamp] = shieldPrice[currentRoundId];\\n        collateralSpear[block.timestamp] = spearPrice[block.timestamp]\\n            .multiplyDecimal(collateralAmount);\\n        collateralShield[block.timestamp] = shieldPrice[block.timestamp]\\n            .multiplyDecimal(collateralAmount);\\n        currentRoundId = block.timestamp;\\n        roundIds.push(block.timestamp);\\n    }\\n\\n    // function needTokenLiqui(uint amount) public view returns(uint _energy0, uint _energy1, uint _reserve0, uint _reserve1) {\\n    //     _energy0 = energy0.divideDecimal(energy0.add(energy1)).multiplyDecimal(amount);\\n    //     _energy1 = energy1.divideDecimal(energy0.add(energy1)).multiplyDecimal(amount);\\n    //     uint per = amount.divideDecimal(energy0.add(energy1));\\n    //     _reserve0 = per.multiplyDecimal(energy0);\\n    //     _reserve1 = per.multiplyDecimal(energy1);\\n    // }\\n\\n    /// @dev The user adds energy token by calling this function, as well as the corresponding number of spear and shield\\n    /// @param amount of energy token transfer to battle contract\\n    function addLiquility(uint256 amount) external {\\n        if (userStartRoundLP[msg.sender] < currentRoundId) {\\n            removeLiquility(0);\\n        }\\n        // new\\n        uint256 collateralSS =\\n            collateralSpear[currentRoundId].add(\\n                collateralShield[currentRoundId]\\n            );\\n        uint256 deltaCollateralSpear =\\n            collateralSpear[currentRoundId]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaCollateralShield =\\n            collateralShield[currentRoundId]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaSpear =\\n            spearBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaShield =\\n            shieldBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(\\n            deltaCollateralSpear\\n        );\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(\\n            deltaCollateralShield\\n        );\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .add(deltaShield);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(\\n            deltaShield\\n        );\\n\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(\\n            amount\\n        );\\n        lpBalanceOf[currentRoundId][msg.sender] = lpBalanceOf[currentRoundId][\\n            msg.sender\\n        ]\\n            .add(amount);\\n    }\\n\\n    function addLiquilityIn(uint256 amount)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 collateralSS =\\n            collateralSpear[currentRoundId].add(\\n                collateralShield[currentRoundId]\\n            );\\n        uint256 deltaSpear =\\n            spearBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        uint256 deltaShield =\\n            shieldBalanceOf[currentRoundId][address(this)]\\n                .multiplyDecimal(amount)\\n                .divideDecimal(collateralSS);\\n        return (deltaSpear, deltaShield);\\n    }\\n\\n    function removeLiquilityOut(uint256 amount) public view returns (uint256) {\\n        uint256 spearSoldAmount = spearSold(currentRoundId);\\n        uint256 shieldSoldAmount = shieldSold(currentRoundId);\\n        uint256 maxSold =\\n            spearSoldAmount > shieldSoldAmount\\n                ? spearSoldAmount\\n                : shieldSoldAmount;\\n        uint256 deltaCollateral =\\n            lpTotalSupply[currentRoundId]\\n                .sub(maxSold)\\n                .multiplyDecimal(amount)\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n        return deltaCollateral;\\n    }\\n\\n    /// @dev The user retrieves the energy token\\n    /// @param amount of energy token to msg.sender, if msg.sender don't have enought spear and shield, the transaction\\n    /// will failed\\n    function removeLiquility(uint256 amount) public {\\n        // require(userStartRoundLP[msg.sender] !=0, \\\"user dont have liquility\\\");\\n        if (userStartRoundLP[msg.sender] == 0) {\\n            return;\\n        }\\n        uint256 lpAmount;\\n        if (userStartRoundLP[msg.sender] == currentRoundId) {\\n            // dont have history\\n            lpAmount = lpBalanceOf[currentRoundId][msg.sender];\\n        } else {\\n            // history handle\\n            lpAmount = pendingLP(msg.sender);\\n        }\\n        require(lpAmount >= amount, \\\"not enough lp to burn\\\");\\n        uint256 spearSoldAmount = spearSold(currentRoundId);\\n        uint256 shieldSoldAmount = shieldSold(currentRoundId);\\n        uint256 maxSold =\\n            spearSoldAmount > shieldSoldAmount\\n                ? spearSoldAmount\\n                : shieldSoldAmount;\\n        uint256 deltaCollateral =\\n            lpTotalSupply[currentRoundId]\\n                .sub(maxSold)\\n                .multiplyDecimal(amount)\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint256 deltaSpear =\\n            deltaCollateral\\n                .multiplyDecimal(collateralSpear[currentRoundId])\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint256 deltaShield =\\n            deltaCollateral\\n                .multiplyDecimal(collateralShield[currentRoundId])\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint256 deltaCollateralSpear =\\n            collateralSpear[currentRoundId]\\n                .multiplyDecimal(deltaCollateral)\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint256 deltaCollateralShield =\\n            collateralShield[currentRoundId]\\n                .multiplyDecimal(deltaCollateral)\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint256 deltaCollateralSurplus =\\n            collateralSurplus[currentRoundId]\\n                .multiplyDecimal(deltaCollateral)\\n                .divideDecimal(lpTotalSupply[currentRoundId]);\\n\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[\\n            currentRoundId\\n        ][address(this)]\\n            .sub(deltaShield);\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].sub(\\n            deltaCollateralSpear\\n        );\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].sub(\\n            deltaCollateralShield\\n        );\\n        collateralSurplus[currentRoundId] = collateralSurplus[currentRoundId]\\n            .sub(deltaCollateralSurplus);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].sub(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].sub(\\n            deltaShield\\n        );\\n\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].sub(\\n            amount\\n        );\\n        lpBalanceOf[currentRoundId][msg.sender] = lpAmount.sub(amount);\\n        collateralToken.safeTransfer(msg.sender, deltaCollateral);\\n    }\\n\\n    function pendingClaim(address acc) public view returns (uint256 amount) {\\n        uint256 userRoundId = userStartRoundSS[acc];\\n        if (userRoundId != 0 && userRoundId < currentRoundId) {\\n            if (rounds[userRoundId].roundResult == RoundResult.SpearWin) {\\n                amount = spearBalanceOf[userRoundId][acc];\\n            } else if (\\n                rounds[userRoundId].roundResult == RoundResult.ShieldWin\\n            ) {\\n                amount = shieldBalanceOf[userRoundId][acc];\\n            }\\n        }\\n    }\\n\\n    function pendingLP(address acc) public view returns (uint256 lpAmount) {\\n        uint256 userRoundId = userStartRoundLP[acc];\\n        if (userRoundId != 0 && userRoundId <= currentRoundId) {\\n            // future round\\n            lpAmount = lpBalanceOf[userRoundId][acc];\\n            for (uint256 i; i < roundIds.length - 1; i++) {\\n                if (roundIds[i] >= userRoundId) {\\n                    // user's all round\\n                    uint256 newLpAmount =\\n                        nextRoundLP(roundIds[i], acc, lpAmount);\\n                    lpAmount = newLpAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    function nextRoundLP(\\n        uint256 roundId,\\n        address acc,\\n        uint256 lpAmount\\n    ) public view returns (uint256 amount) {\\n        if (roundId == currentRoundId) {\\n            return lpBalanceOf[roundId][acc];\\n        }\\n        if (rounds[roundId].roundResult == RoundResult.SpearWin) {\\n            uint256 spearAmountTotal = spearBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(spearAmountTotal).divideDecimal(\\n                lpTotalSupply[roundId]\\n            );\\n        } else {\\n            uint256 shieldAmountTotal = shieldBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(shieldAmountTotal).divideDecimal(\\n                lpTotalSupply[roundId]\\n            );\\n        }\\n    }\\n\\n    /// @dev normal users get back their profits\\n    function claim() public {\\n        uint256 amount = pendingClaim(msg.sender);\\n        if (amount != 0) {\\n            spearBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            shieldBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            delete userStartRoundSS[msg.sender];\\n            collateralToken.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @dev Calculate how many spears and shields can be obtained\\n    /// @param amountIn amount transfer to battle contract\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 _pre_k\\n    )\\n        public\\n        pure\\n        returns (\\n            uint256 amountOut,\\n            bool e,\\n            uint256 pre_k\\n        )\\n    {\\n        (uint256 _amountOut, bool _e, uint256 k) =\\n            Pricing.getAmountOut(amountIn, reserveIn, reserveOut, _pre_k);\\n        amountOut = _amountOut;\\n        e = _e;\\n        pre_k = k;\\n    }\\n\\n    function sellAmount(\\n        uint256 amountToSell,\\n        uint256 reserve,\\n        uint256 energy\\n    ) public pure returns (uint256 amount) {\\n        uint256 amountInWithFee = amountToSell.mul(1000);\\n        uint256 numerator = amountInWithFee.mul(energy);\\n        uint256 denominator = reserve.mul(1000).add(amountInWithFee);\\n        amount = numerator / denominator;\\n    }\\n\\n    function test() public {}\\n\\n    // // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    // function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\\n    //     require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    //     require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    //     uint numerator = reserveIn.multiplyDecimal(amountOut).mul(1000);\\n    //     uint denominator = reserveOut.sub(amountOut).mul(1000);\\n    //     amountIn = (numerator / denominator).add(1);\\n    // }\\n}\\n\",\"keccak256\":\"0x1e3d38b0139d40fdda1f143e10eb21ef76e30822af137a57ea4f01e7517d55da\",\"license\":\"MIT\"},\"contracts/algo/Pricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/DMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Pricing {\\n    \\n    using SafeMath for uint;\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint _pre_k) internal pure returns(uint amountOut, bool e, uint pre_k) {\\n        require(amountIn > 0, 'Battle: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'Battle: INSUFFICIENT_LIQUIDITY');\\n        if (reserveIn >= reserveOut.mul(99).div(100)) {\\n            amountOut = amountIn;\\n            e = true;\\n            return (amountOut, e, _pre_k);\\n        }\\n        // if amountIn > sqrt(reserveIn)\\n        uint maxAmount = DMath.sqrt(reserveIn*reserveOut.mul(100).div(99));\\n        pre_k = maxAmount;\\n        // console.log(\\\"maxAmount %s and amountIn %s, reserveIn %s, reserveOut %s\\\", maxAmount, amountIn, reserveIn);\\n        if (amountIn.add(reserveIn) > maxAmount) {\\n            uint maxAmountIn = maxAmount.sub(reserveIn);\\n            uint amountInWithFee = maxAmountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n            amountOut = amountOut.add(amountIn.sub(maxAmountIn));\\n            e = true;\\n        } else {\\n            uint amountInWithFee = amountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n        }\\n    }\\n\\n    function getAmountIn() internal view {\\n\\n    }\\n}\",\"keccak256\":\"0x0c8127b769438edaaf2aa702faf5ccc80b23a07d6b925ae9de99bc6182396dfb\",\"license\":\"MIT\"},\"contracts/interfaces/IBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBattle {\\n    function init(uint amount, uint price0, uint pirce1, uint price2, uint endTs) external;\\n    function buySpear(uint amount) external;\\n    function sellSpear(uint amount) external;\\n    function buyShield(uint amount) external;\\n    function sellShield(uint amount) external;\\n    function settle(uint price) external;\\n    function addLiqui(uint amount) external;\\n    function removeLiqui(uint amount) external;\\n    function withdraw() external;\\n}\",\"keccak256\":\"0xc2f71ea24a60c3c921a6d6947ca4d4699592c863f37b4ca3bb3c072c5057d0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n   function price(string memory symbol) external returns(uint); \\n}\",\"keccak256\":\"0xd26b7e8adda13a8e11e63902344fe10320100a83e6b0a1ea33d4ddec517d4e15\",\"license\":\"MIT\"},\"contracts/lib/DMath.sol\":{\"content\":\"  \\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary DMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xe9a4c4d5a1e9eb41b47118bcdc8008d4c580676e6228767e1773be3ae839e94d\",\"license\":\"GPL-3.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/structs/RangeResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RoundResult {\\n    NonResult, // 0\\n    SpearWin, // 1\\n    ShieldWin //2\\n}\\n\",\"keccak256\":\"0x2e31ee8df33d61368e943c1686127f421b097fa26c97d8a4976250a0d0f6cab9\",\"license\":\"MIT\"},\"contracts/structs/RangeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RangeType {\\n    TwoWay, // 0\\n    Positive, // 1\\n    negative // 2\\n}\\n\",\"keccak256\":\"0xcb8a7a972e1c8ca1e8ef10572f2251cfe5cc308c8975c85e12b8f5b2d6c93a83\",\"license\":\"MIT\"},\"contracts/structs/RoundInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RangeType.sol\\\";\\nimport \\\"./RangeResult.sol\\\";\\n\\nstruct RoundInfo {\\n    uint256 spearPrice;\\n    uint256 shieldPrice;\\n    uint256 startPrice;\\n    uint256 endPrice;\\n    uint256 startTS;\\n    uint256 endTS;\\n    uint256 range;\\n    RangeType ry;\\n    uint256 targetPriceUnder;\\n    uint256 targetPriceSuper;\\n    RoundResult roundResult;\\n}\\n\",\"keccak256\":\"0x4add5888e42d703f9dba4a1c2decac16f55696694262c9e26cc2fc342d03e44b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614612806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806338243ade146200006f5780636dd0ce7a146200008857806383d342ba14620000bc57806392d559b114620000d3578063a3bfe27414620000fb578063fab29a271462000114575b600080fd5b6200008662000080366004620008f1565b6200012b565b005b6200009f62000099366004620009e5565b6200022d565b6040516001600160a01b0390911681526020015b60405180910390f35b62000086620000cd366004620008d2565b62000241565b620000ea620000e4366004620008d2565b62000252565b6040519015158152602001620000b3565b6200010562000260565b604051908152602001620000b3565b6200008662000125366004620008d2565b62000273565b620001426001600160a01b038b1633308962000280565b60008a8a8a8a604051620001569062000813565b62000165949392919062000a4a565b604051809103906000f08015801562000182573d6000803e3d6000fd5b5090506200019b6001600160a01b038c163089620002f3565b604051631cfd676960e31b81526001600160a01b0382169063e7eb3b4890620001d59033908b908b908b908b908b908b9060040162000a8c565b600060405180830381600087803b158015620001f057600080fd5b505af115801562000205573d6000803e3d6000fd5b505050506200021f8160006200032a90919063ffffffff16565b505050505050505050505050565b60006200023b818362000348565b92915050565b6200024e6000826200032a565b5050565b60006200023b818362000356565b60006200026e600062000379565b905090565b6200024e60008262000384565b6040516001600160a01b0380851660248301528316604482015260648101829052620002ed9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526200039b565b50505050565b6040516001600160a01b0383166024820152604481018290526200032590849063a9059cbb60e01b90606401620002b5565b505050565b600062000341836001600160a01b03841662000478565b9392505050565b6000620003418383620004ca565b6001600160a01b0381166000908152600183016020526040812054151562000341565b60006200023b825490565b600062000341836001600160a01b03841662000561565b6000620003f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200068a9092919063ffffffff16565b805190915015620003255780806020019051810190620004139190620009c3565b620003255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6000818152600183016020526040812054620004c1575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200023b565b5060006200023b565b815460009082106200052a5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016200046f565b8260000182815481106200054e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600081815260018301602052604081205480156200067f5760006200058860018362000b1c565b85549091506000906200059e9060019062000b1c565b90506000866000018281548110620005c657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110620005f857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001556200061183600162000b01565b600082815260018901602052604090205586548790806200064257634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506200023b565b60009150506200023b565b60606200069b8484600085620006a3565b949350505050565b606082471015620007065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200046f565b843b620007565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200046f565b600080866001600160a01b0316858760405162000774919062000a2c565b60006040518083038185875af1925050503d8060008114620007b3576040519150601f19603f3d011682016040523d82523d6000602084013e620007b8565b606091505b5091509150620007ca828286620007d5565b979650505050505050565b60608315620007e657508162000341565b825115620007f75782518084602001fd5b8160405162461bcd60e51b81526004016200046f919062000aec565b613a328062000bab83390190565b80356200082e8162000b91565b919050565b8035600381106200082e57600080fd5b600082601f83011262000854578081fd5b813567ffffffffffffffff8082111562000872576200087262000b7b565b604051601f8301601f19908116603f011681019082821181831017156200089d576200089d62000b7b565b81604052838152866020858801011115620008b6578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215620008e4578081fd5b8135620003418162000b91565b6000806000806000806000806000806101408b8d03121562000911578586fd5b6200091c8b62000821565b99506200092c60208c0162000821565b985060408b013567ffffffffffffffff8082111562000949578788fd5b620009578e838f0162000843565b995060608d01359150808211156200096d578788fd5b506200097c8d828e0162000843565b97505060808b0135955060a08b0135945060c08b0135935060e08b01359250620009aa6101008c0162000833565b91506101208b013590509295989b9194979a5092959850565b600060208284031215620009d5578081fd5b8151801515811462000341578182fd5b600060208284031215620009f7578081fd5b5035919050565b6000815180845262000a1881602086016020860162000b36565b601f01601f19169290920160200192915050565b6000825162000a4081846020870162000b36565b9190910192915050565b6001600160a01b0385811682528416602082015260806040820181905260009062000a7890830185620009fe565b8281036060840152620007ca8185620009fe565b6001600160a01b03881681526020810187905260408101869052606081018590526080810184905260e081016003841062000ad757634e487b7160e01b600052602160045260246000fd5b60a082019390935260c0015295945050505050565b602081526000620003416020830184620009fe565b6000821982111562000b175762000b1762000b65565b500190565b60008282101562000b315762000b3162000b65565b500390565b60005b8381101562000b5357818101518382015260200162000b39565b83811115620002ed5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000ba757600080fd5b5056fe60806040526017805460ff191660011790553480156200001e57600080fd5b5060405162003a3238038062003a32833981016040819052620000419162000241565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601480546001600160a01b038087166001600160a01b03199283161790925560018054928616929091169190911790558151620000c790600f906020850190620000e8565b508051620000dd906010906020840190620000e8565b50505050506200033f565b828054620000f690620002d3565b90600052602060002090601f0160209004810192826200011a576000855562000165565b82601f106200013557805160ff191683800117855562000165565b8280016001018555821562000165579182015b828111156200016557825182559160200191906001019062000148565b506200017392915062000177565b5090565b5b8082111562000173576000815560010162000178565b600082601f8301126200019f578081fd5b81516001600160401b0380821115620001bc57620001bc62000310565b604051601f8301601f19908116603f01168101908282118183101715620001e757620001e762000310565b8160405283815260209250868385880101111562000203578485fd5b8491505b8382101562000226578582018301518183018401529082019062000207565b838211156200023757848385830101525b9695505050505050565b6000806000806080858703121562000257578384fd5b8451620002648162000326565b6020860151909450620002778162000326565b60408601519093506001600160401b038082111562000294578384fd5b620002a2888389016200018e565b93506060870151915080821115620002b8578283fd5b50620002c7878288016200018e565b91505092959194509250565b600181811c90821680620002e857607f821691505b602082108114156200030a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200033c57600080fd5b50565b6136e3806200034f6000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c806385d100561161019d578063b2016bd4116100e9578063e7eb3b48116100a2578063f4ada3511161007c578063f4ada351146107e2578063f6e0c8f614610802578063f8a8fd6d14610344578063ff5958fc1461081557600080fd5b8063e7eb3b48146107a9578063e8a352f8146107bc578063f2fde38b146107cf57600080fd5b8063b2016bd41461072a578063c1097c0d1461073d578063c3383b5b14610750578063e5cb8d8614610763578063e6050c3814610776578063e78ccc391461078957600080fd5b806394e33d7f11610156578063a27382d611610130578063a27382d6146106ac578063a54e2ff2146106cc578063aafc7a76146106df578063ae809e8f146106ff57600080fd5b806394e33d7f1461065b5780639701f5e8146106835780639cbe5efd146106a357600080fd5b806385d1005614610548578063897f87e0146105685780638c65c81f146105935780638da5cb5b1461061757806390a4cb9b14610628578063936f28b91461063b57600080fd5b806349bf117b1161025c578063715018a611610215578063736bcfdb116101ef578063736bcfdb146104d757806374e9a267146104f757806376c4b8871461050a5780637dc0d1d01461051d57600080fd5b8063715018a61461049c578063728313c9146104a4578063732d2160146104b757600080fd5b806349bf117b146104035780634d56cc68146104165780634d61c32f146104335780634e71d92d1461045357806352707d8c1461045b5780636f4d2b671461048957600080fd5b80633203ba77116102ae5780633203ba77146103a457806335a94b7b146103ac5780633b18d439146103c15780633c45e736146103d45780633cc1f54c146103e7578063475e9888146103fa57600080fd5b80630d731228146102f65780630ef4b2481461032957806311da60b41461033c578063123656b9146103465780631c77054714610371578063221937e014610384575b600080fd5b610316610304366004613239565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610316610337366004613196565b61081d565b610344610919565b005b610316610354366004613269565b600660209081526000928352604080842090915290825290205481565b61031661037f366004613239565b611073565b610316610392366004613239565b600b6020526000908152604090205481565b601254610316565b6103b46110e1565b6040516103209190613340565b6103166103cf366004613239565b61116f565b6103446103e2366004613239565b611217565b6103446103f5366004613239565b61142a565b61031660185481565b610344610411366004613239565b611548565b6017546104239060ff1681565b6040519015158152602001610320565b610316610441366004613196565b600e6020526000908152604090205481565b610344611937565b61046e6104693660046132f3565b6119a8565b60408051938452911515602084015290820152606001610320565b610316610497366004613239565b6119d0565b6103446119fe565b6103446104b2366004613239565b611aa2565b6103166104c5366004613196565b600d6020526000908152604090205481565b6103166104e5366004613239565b600a6020526000908152604090205481565b6103166105053660046132c8565b611c75565b610316610518366004613196565b611cc3565b600154610530906001600160a01b031681565b6040516001600160a01b039091168152602001610320565b610316610556366004613239565b60086020526000908152604090205481565b610316610576366004613269565b600260209081526000928352604080842090915290825290205481565b6106006105a1366004613239565b601360205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a0154989997989697959694959394929360ff9283169391929091168b565b6040516103209b9a99989796959493929190613419565b6000546001600160a01b0316610530565b610316610636366004613239565b611db5565b610316610649366004613239565b60036020526000908152604090205481565b61066e610669366004613239565b611dd6565b60408051928352602083019190915201610320565b610316610691366004613239565b60166020526000908152604090205481565b61031660115481565b6103166106ba366004613239565b60156020526000908152604090205481565b6103166106da366004613239565b611e6f565b6103166106ed366004613239565b60076020526000908152604090205481565b61031661070d366004613269565b600460209081526000928352604080842090915290825290205481565b601454610530906001600160a01b031681565b61031661074b366004613294565b611f06565b61031661075e366004613239565b611ff2565b610316610771366004613239565b61203d565b610344610784366004613239565b61206b565b610316610797366004613239565b600c6020526000908152604090205481565b6103446107b73660046131b0565b61233b565b6103166107ca366004613239565b6127e9565b6103446107dd366004613196565b61282a565b6103166107f0366004613239565b60056020526000908152604090205481565b610344610810366004613239565b612944565b6103b4612a44565b6001600160a01b0381166000908152600d60205260408120548015801590610846575060115481105b156109135760016000828152601360205260409020600a015460ff16600281111561088157634e487b7160e01b600052602160045260246000fd5b14156108b15760008181526004602090815260408083206001600160a01b03871684529091529020549150610913565b60026000828152601360205260409020600a015460ff1660028111156108e757634e487b7160e01b600052602160045260246000fd5b14156109135760008181526006602090815260408083206001600160a01b038716845290915290205491505b50919050565b6011546000908152601360205260409020600501544210156109785760405162461bcd60e51b8152602060048201526013602482015272746f6f206561726c7920746f20736574746c6560681b60448201526064015b60405180910390fd5b6011546000908152601360205260408120600a015460ff1660028111156109af57634e487b7160e01b600052602160045260246000fd5b146109f05760405162461bcd60e51b81526020600482015260116024820152701c9bdd5b99081a1859081cd95d1d1b1959607a1b604482015260640161096f565b600154604051631fc58c3360e31b81526000916001600160a01b03169063fe2c619890610a2290601090600401613373565b602060405180830381600087803b158015610a3c57600080fd5b505af1158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190613251565b601180546000908152601360205260408082206003018490559154815290812060060154919250610ab7610ab0670de0b6b3a764000084612a51565b8490612a5d565b90506000610ad7610ad0670de0b6b3a764000085612a7f565b8590612a5d565b9050600080610ae4612a8b565b91509150604051806101600160405280601360006012600081548110610b1a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600001548152602001601360006012600081548110610b6257634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206001015481526020018781526020016000815260200183815260200182815260200186815260200160136000601154815260200190815260200160002060070160009054906101000a900460ff166002811115610be857634e487b7160e01b600052602160045260246000fd5b81526020810186905260408101859052606001600081525060136000428152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115610c9157634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115610cde57634e487b7160e01b600052602160045260246000fd5b02179055506000915081905060115460009081526013602052604090206007015460ff166002811115610d2157634e487b7160e01b600052602160045260246000fd5b1415610db45760115460009081526013602052604090206008015487111580610d5e57506011546000908152601360205260409020600901548710155b15610d8e576011546000908152601360205260409020600a0180546001919060ff191682805b0217905550610e93565b6011546000908152601360205260409020600a0180546002919060ff1916600183610d84565b600160115460009081526013602052604090206007015460ff166002811115610ded57634e487b7160e01b600052602160045260246000fd5b1415610e33576011546000908152601360205260409020600901548710610d8e576011546000908152601360205260409020600a0180546001919060ff19168280610d84565b6011546000908152601360205260409020600801548711610e73576011546000908152601360205260409020600a0180546001919060ff19168280610d84565b6011546000908152601360205260409020600a01805460ff191660021790555b60016011546000908152601360205260409020600a015460ff166002811115610ecc57634e487b7160e01b600052602160045260246000fd5b1415610f475750601180546000908152600460208181526040808420308086529083528185205442808752858552838720838852855283872091909155865486528484528286208287528452828620549086526006845282862082875284528286205594548452918152818320938352929092522054610fb8565b506011805460009081526006602081815260408084203080865290835281852054428087526004855283872083885285528387209190915586548652848452828620828752845282862054908652848452828620828752845282862055945484529181528183209383529290925220545b601180546000908152600b60208181526040808420544280865282862091825595548552600c83528185205495855293209390935590915254610ffb9082612a5d565b42600090815260086020908152604080832093909355600c905220546110219082612a5d565b4260008181526009602052604081209290925560118190556012805460018101825592527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34449091015550505050505050565b6000806110816011546119d0565b9050600061109060115461203d565b905060008183116110a157816110a3565b825b601154600090815260036020526040812054919250906110d7906110d1886110cb8387612a51565b90612a5d565b90612b08565b9695505050505050565b601080546110ee906135ff565b80601f016020809104026020016040519081016040528092919081815260200182805461111a906135ff565b80156111675780601f1061113c57610100808354040283529160200191611167565b820191906000526020600020905b81548152906001019060200180831161114a57829003601f168201915b505050505081565b60115460009081526006602090815260408083203084529091528120546111a49060649061119e906063612b20565b90612b2c565b601154600090815260096020526040902054106111df576011546000908152601660205260409020546111d990839080611c75565b92915050565b601154600081815260066020908152604080832030845282528083205493835260099091529020546111d9918491611c75565b919050565b601154336000908152600d6020526040902054101561123857611238611937565b601154336000818152600d6020526040902091909155601454611268916001600160a01b03909116903084612b38565b6011546000818152600860209081526040808320546004835281842030855283528184205494845260159092528220549192839283926112a99287926119a8565b6011805460009081526015602090815260408083208590559254825260089052205492955090935091506112dd9085612a7f565b60118054600090815260086020908152604080832094909455915481526004825282812030825290915220546113139084612a51565b601180546000908152600460208181526040808420308552825280842095909555925482528252828120338252909152205461134f9084612a7f565b601154600090815260046020908152604080832033845290915290205581156113b157601154600090815260066020908152604080832030845290915290205461139a906064612b2c565b60115460009081526009602052604090205561141c565b6011546000818152600460209081526040808320308085528184528285205486865260068552838620828752855283862054968652600885529285205494529091526114099290916110d191906110cb908490612a51565b6011546000908152600960205260409020555b611424612ba3565b50505050565b6011546000908152600660209081526040808320338452909152902054818110156114b45760405162461bcd60e51b815260206004820152603460248201527f73656c6c536869656c643a3a6d73672e73656e64657220686173206e6f7420656044820152731b9bdd59da081cda1a595b19081d1bc81cd95b1b60621b606482015260840161096f565b60006114bf8361116f565b90506114cb8284612a51565b60118054600090815260066020818152604080842033855282528084209590955592548252825282812030825290915220546115079084612a7f565b601154600090815260066020908152604080832030845290915290205561152c612ba3565b601454611543906001600160a01b03163383612cd7565b505050565b336000908152600e602052604090205461155f5750565b601154336000908152600e60205260408120549091141561159d575060115460009081526002602090815260408083203384529091529020546115a9565b6115a633611cc3565b90505b818110156115f15760405162461bcd60e51b81526020600482015260156024820152743737ba1032b737bab3b4103638103a3790313ab93760591b604482015260640161096f565b60006115fe6011546119d0565b9050600061160d60115461203d565b9050600081831161161e5781611620565b825b60115460009081526003602052604081205491925090611648906110d1886110cb8387612a51565b6011546000908152600360209081526040808320546008909252822054929350909161167a91906110d1908590612a5d565b601154600090815260036020908152604080832054600990925282205492935090916116ac91906110d1908690612a5d565b601154600090815260036020908152604080832054600890925282205492935090916116dd91906110d19087612a5d565b6011546000908152600360209081526040808320546009909252822054929350909161170e91906110d19088612a5d565b601154600090815260036020908152604080832054600a909252822054929350909161173f91906110d19089612a5d565b60115460009081526004602090815260408083203084529091529020549091506117699086612a51565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546117ab9085612a51565b60118054600090815260066020908152604080832030845282528083209490945591548152600890915220546117e19084612a51565b60118054600090815260086020908152604080832094909455915481526009909152205461180f9083612a51565b6011805460009081526009602090815260408083209490945591548152600a909152205461183d9082612a51565b601180546000908152600a6020908152604080832094909455915481526005909152205461186b9086612a51565b6011805460009081526005602090815260408083209490945591548152600790915220546118999085612a51565b601180546000908152600760209081526040808320949094559154338252600e83528382208190558152600390915220546118d4908c612a51565b6011546000908152600360205260409020556118f08a8c612a51565b60115460009081526002602090815260408083203380855292529091209190915560145461192a916001600160a01b039091169088612cd7565b5050505050505050505050565b60006119423361081d565b905080156119a557336000818152600d602081815260408084208054855260048352818520868652835281852085905580548552600683528185208686528352908420849055919052556014546119a5916001600160a01b039091169083612cd7565b50565b6000806000806000806119bd8a8a8a8a612d07565b919c909b50909950975050505050505050565b600081815260046020908152604080832030845282528083205484845260059092528220546111d991612a51565b6000546001600160a01b03163314611a585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601454611aba906001600160a01b0316333084612b38565b601154600081815260096020908152604080832054600683528184203085528352818420549484526016909252822054919283928392611afb9287926119a8565b601180546000908152601660209081526040808320859055925482526009905220549295509093509150611b2f9085612a7f565b6011805460009081526009602090815260408083209490945591548152600682528281203082529091522054611b659084612a51565b6011805460009081526006602081815260408084203085528252808420959095559254825282528281203382529091522054611ba19084612a7f565b60115460009081526006602090815260408083203384529091529020558115611c03576011546000908152600460209081526040808320308452909152902054611bec906064612b2c565b60115460009081526008602052604090205561141c565b601154600081815260066020908152604080832030808552818452828520548686526004855283862082875285528386205496865260098552928520549452909152611c5b9290916110d191906110cb908490612a51565b601154600090815260086020526040902055611424612ba3565b600080611c84856103e8612b20565b90506000611c928285612b20565b90506000611cac83611ca6886103e8612b20565b90612a7f565b9050611cb8818361349e565b979650505050505050565b6001600160a01b0381166000908152600e60205260408120548015801590611ced57506011548111155b156109135760008181526002602090815260408083206001600160a01b038716845290915281205492505b601254611d27906001906135bc565b811015611dae578160128281548110611d5057634e487b7160e01b600052603260045260246000fd5b906000526020600020015410611d9c576000611d9860128381548110611d8657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548686611f06565b9350505b80611da681613634565b915050611d18565b5050919050565b60128181548110611dc557600080fd5b600091825260209091200154905081565b601154600090815260096020908152604080832054600890925282205482918291611e0091612a7f565b601154600090815260046020908152604080832030845290915281205491925090611e319083906110d19088612a5d565b601154600090815260066020908152604080832030845290915281205491925090611e629084906110d19089612a5d565b9196919550909350505050565b6011546000908152600460209081526040808320308452909152812054611e9e9060649061119e906063612b20565b60115460009081526008602052604090205410611ed3576011546000908152601560205260409020546111d990839080611c75565b601154600081815260046020908152604080832030845282528083205493835260089091529020546111d9918491611c75565b6000601154841415611f3b575060008381526002602090815260408083206001600160a01b0386168452909152902054611feb565b60016000858152601360205260409020600a015460ff166002811115611f7157634e487b7160e01b600052602160045260246000fd5b1415611fb3576000848152600460209081526040808320308452825280832054878452600390925290912054611fab906110d18584612a5d565b915050611feb565b6000848152600660209081526040808320308452825280832054878452600390925290912054611fe7906110d18584612a5d565b9150505b9392505050565b6011546000818152600960209081526040808320546006835281842030855283528184205494845260169092528220549192839261203392869290916119a8565b5090949350505050565b600081815260066020908152604080832030845282528083205484845260079092528220546111d991612a51565b601154336000908152600e6020526040902054101561208e5761208e6000611548565b60115460009081526009602090815260408083205460089092528220546120b491612a7f565b601154600090815260086020526040812054919250906120da9083906110d19086612a5d565b601154600090815260096020526040812054919250906121009084906110d19087612a5d565b6011546000908152600460209081526040808320308452909152812054919250906121319085906110d19088612a5d565b6011546000908152600660209081526040808320308452909152812054919250906121629086906110d19089612a5d565b6011546000908152600860205260409020549091506121819085612a7f565b6011805460009081526008602090815260408083209490945591548152600990915220546121af9084612a7f565b60118054600090815260096020908152604080832094909455915481526004825282812030825290915220546121e59083612a7f565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546122279082612a7f565b601180546000908152600660209081526040808320308452825280832094909455915481526005909152205461225d9083612a7f565b60118054600090815260056020908152604080832094909455915481526007909152205461228b9082612a7f565b6011546000908152600760205260409020556014546122b5906001600160a01b0316333089612b38565b601154336000908152600e602090815260408083208490559282526003905220546122e09087612a7f565b60118054600090815260036020908152604080832094909455915481526002825282812033825290915220546123169087612a7f565b6011546000908152600260209081526040808320338452909152902055505050505050565b60175460ff1661237e5760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08199a5c9cdd081a5b9a5d60921b604482015260640161096f565b80158061238b5750806001145b806123965750806002145b6123e25760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420737570706f727420626174746c65206475726174696f6e0000000000604482015260640161096f565b60188190556017805460ff191690556123fb8585612a7f565b670de0b6b3a76400001461245d5760405162461bcd60e51b8152602060048201526024808201527f426174746c653a3a696e69743a7370656172202b20736869656c642073686f756044820152636c64203160e01b606482015260840161096f565b600080612468612a8b565b6011829055601280546001818101835560009283527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490910184905554604051631fc58c3360e31b8152939550919350916001600160a01b039091169063fe2c6198906124da90601090600401613373565b602060405180830381600087803b1580156124f457600080fd5b505af1158015612508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252c9190613251565b90506040518061016001604052808981526020018881526020018281526020016000815260200184815260200183815260200187815260200186600281111561258557634e487b7160e01b600052602160045260246000fd5b815260200161259f610ab0670de0b6b3a76400008a612a51565b81526020016125b9610ab0670de0b6b3a76400008a612a7f565b8152602001600081525060136000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083600281111561265457634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff191660018360028111156126a157634e487b7160e01b600052602160045260246000fd5b02179055505060118054600090815260046020908152604080832030845282528083208e9055925482526005905220546126dc91508a612a7f565b60118054600090815260056020908152604080832094909455825482526006815283822030835281528382208d90559154815260079091522054612720908a612a7f565b60115460009081526007602052604090205561273c888a612a5d565b601154600090815260086020526040902055612758878a612a5d565b6011805460009081526009602090815260408083209490945582548252600b81528382208c905582548252600c81528382208b905582548252600281528382206001600160a01b038f16835281528382208d90559154600e83528382208190558152600390915220546127cb908a612a7f565b60115460009081526003602052604090205550505050505050505050565b6011546000818152600860209081526040808320546004835281842030855283528184205494845260159092528220549192839261203392869290916119a8565b6000546001600160a01b031633146128845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096f565b6001600160a01b0381166128e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161096f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6011546000908152600460209081526040808320338452909152902054818110156129cc5760405162461bcd60e51b815260206004820152603260248201527f73656c6c53706561723a3a6d73672e73656e64657220686173206e6f7420656e6044820152711bdd59da081cdc19585c881d1bc81cd95b1b60721b606482015260840161096f565b60006129d783611e6f565b90506129e38284612a51565b6011805460009081526004602081815260408084203385528252808420959095559254825282528281203082529091522054612a1f9084612a7f565b601154600090815260046020908152604080832030845290915290205561152c612ba3565b600f80546110ee906135ff565b6000611feb82846135bc565b6000612a6b6012600a6134f5565b612a758484612b20565b611feb919061349e565b6000611feb8284613486565b60008060185460001415612ac557612aa6620151804261364f565b612ab090426135bc565b9150612abf8262015180613486565b90509091565b60185460011415612b045762093a80612ae1426203f480613486565b612aeb919061364f565b612af590426135bc565b9150612abf8262093a80613486565b9091565b6000611feb8261119e612b1d6012600a6134f5565b86905b6000611feb828461359d565b6000611feb828461349e565b6040516001600160a01b03808516602483015283166044820152606481018290526114249085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612edc565b601154600081815260046020908152604080832030845282528083205493835260089091528120549091612bd79190612b08565b6011546000818152600660209081526040808320308452825280832054938352600990915281205492935091612c0c91612b08565b9050670dbd2fc137a3000082101580612c2d5750670dbd2fc137a300008110155b15612caf57670dbd2fc137a300008210612c7857601180546000908152600b60209081526040808320670dbd2fc137a30000905592548252600c905220662386f26fc1000090555050565b601180546000908152600b60209081526040808320662386f26fc10000905592548252600c905220670dbd2fc137a3000090555050565b601180546000908152600b6020908152604080832086905592548252600c9052208190555050565b6040516001600160a01b03831660248201526044810182905261154390849063a9059cbb60e01b90606401612b6c565b6000806000808711612d655760405162461bcd60e51b815260206004820152602160248201527f426174746c653a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b606482015260840161096f565b600086118015612d755750600085115b612dc15760405162461bcd60e51b815260206004820152601e60248201527f426174746c653a20494e53554646494349454e545f4c49515549444954590000604482015260640161096f565b612dd1606461119e876063612b20565b8610612de557508591506001905082612ed2565b6000612e09612dfa606361119e896064612b20565b612e04908961359d565b612fae565b915081905080612e198989612a7f565b1115612e8e576000612e2b8289612a51565b90506000612e3b826103e8612b20565b90506000612e49828a612b20565b90506000612e5d83611ca68d6103e8612b20565b9050612e69818361349e565b9750612e7f612e788d86612a51565b8990612a7f565b97506001965050505050612ed0565b6000612e9c896103e8612b20565b90506000612eaa8289612b20565b90506000612ebe83611ca68c6103e8612b20565b9050612eca818361349e565b96505050505b505b9450945094915050565b6000612f31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130179092919063ffffffff16565b8051909150156115435780806020019051810190612f4f9190613219565b6115435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161096f565b600060038211156130095750806000612fc860028361349e565b612fd3906001613486565b90505b8181101561091357905080600281612fee818661349e565b612ff89190613486565b613002919061349e565b9050612fd6565b811561121257506001919050565b6060613026848460008561302e565b949350505050565b60608247101561308f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161096f565b843b6130dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161096f565b600080866001600160a01b031685876040516130f99190613324565b60006040518083038185875af1925050503d8060008114613136576040519150601f19603f3d011682016040523d82523d6000602084013e61313b565b606091505b5091509150611cb882828660608315613155575081611feb565b8251156131655782518084602001fd5b8160405162461bcd60e51b815260040161096f9190613340565b80356001600160a01b038116811461121257600080fd5b6000602082840312156131a7578081fd5b611feb8261317f565b600080600080600080600060e0888a0312156131ca578283fd5b6131d38861317f565b96506020880135955060408801359450606088013593506080880135925060a088013560038110613202578283fd5b8092505060c0880135905092959891949750929550565b60006020828403121561322a578081fd5b81518015158114611feb578182fd5b60006020828403121561324a578081fd5b5035919050565b600060208284031215613262578081fd5b5051919050565b6000806040838503121561327b578182fd5b8235915061328b6020840161317f565b90509250929050565b6000806000606084860312156132a8578283fd5b833592506132b86020850161317f565b9150604084013590509250925092565b6000806000606084860312156132dc578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613308578384fd5b5050823594602084013594506040840135936060013592509050565b600082516133368184602087016135d3565b9190910192915050565b602081526000825180602084015261335f8160408501602087016135d3565b601f01601f19169190910160400192915050565b6000602080835281845483600182811c91508083168061339457607f831692505b8583108114156133b257634e487b7160e01b87526022600452602487fd5b8786018381526020018180156133cf57600181146133e05761340a565b60ff1986168252878201965061340a565b60008b815260209020895b86811015613404578154848201529085019089016133eb565b83019750505b50949998505050505050505050565b6000610160820190508c82528b60208301528a60408301528960608301528860808301528760a08301528660c08301526134528661368f565b8560e0830152846101008301528361012083015261346f8361368f565b826101408301529c9b505050505050505050505050565b6000821982111561349957613499613663565b500190565b6000826134ad576134ad613679565b500490565b600181815b808511156134ed5781600019048211156134d3576134d3613663565b808516156134e057918102915b93841c93908002906134b7565b509250929050565b6000611feb838360008261350b575060016111d9565b81613518575060006111d9565b816001811461352e576002811461353857613554565b60019150506111d9565b60ff84111561354957613549613663565b50506001821b6111d9565b5060208310610133831016604e8410600b8410161715613577575081810a6111d9565b61358183836134b2565b806000190482111561359557613595613663565b029392505050565b60008160001904831182151516156135b7576135b7613663565b500290565b6000828210156135ce576135ce613663565b500390565b60005b838110156135ee5781810151838201526020016135d6565b838111156114245750506000910152565b600181811c9082168061361357607f821691505b6020821081141561091357634e487b7160e01b600052602260045260246000fd5b600060001982141561364857613648613663565b5060010190565b60008261365e5761365e613679565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600381106119a557634e487b7160e01b600052602160045260246000fdfea2646970667358221220ef295d77ff073c7546f0b977625b25f7a66df7142d567183f0c8839243e3589a64736f6c63430008040033a264697066735822122080cf2c55c150b4c03f60415150c0ef4cc3459ffac12df0f153ac81c5a92b0a6164736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806338243ade146200006f5780636dd0ce7a146200008857806383d342ba14620000bc57806392d559b114620000d3578063a3bfe27414620000fb578063fab29a271462000114575b600080fd5b6200008662000080366004620008f1565b6200012b565b005b6200009f62000099366004620009e5565b6200022d565b6040516001600160a01b0390911681526020015b60405180910390f35b62000086620000cd366004620008d2565b62000241565b620000ea620000e4366004620008d2565b62000252565b6040519015158152602001620000b3565b6200010562000260565b604051908152602001620000b3565b6200008662000125366004620008d2565b62000273565b620001426001600160a01b038b1633308962000280565b60008a8a8a8a604051620001569062000813565b62000165949392919062000a4a565b604051809103906000f08015801562000182573d6000803e3d6000fd5b5090506200019b6001600160a01b038c163089620002f3565b604051631cfd676960e31b81526001600160a01b0382169063e7eb3b4890620001d59033908b908b908b908b908b908b9060040162000a8c565b600060405180830381600087803b158015620001f057600080fd5b505af115801562000205573d6000803e3d6000fd5b505050506200021f8160006200032a90919063ffffffff16565b505050505050505050505050565b60006200023b818362000348565b92915050565b6200024e6000826200032a565b5050565b60006200023b818362000356565b60006200026e600062000379565b905090565b6200024e60008262000384565b6040516001600160a01b0380851660248301528316604482015260648101829052620002ed9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526200039b565b50505050565b6040516001600160a01b0383166024820152604481018290526200032590849063a9059cbb60e01b90606401620002b5565b505050565b600062000341836001600160a01b03841662000478565b9392505050565b6000620003418383620004ca565b6001600160a01b0381166000908152600183016020526040812054151562000341565b60006200023b825490565b600062000341836001600160a01b03841662000561565b6000620003f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200068a9092919063ffffffff16565b805190915015620003255780806020019051810190620004139190620009c3565b620003255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6000818152600183016020526040812054620004c1575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200023b565b5060006200023b565b815460009082106200052a5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016200046f565b8260000182815481106200054e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600081815260018301602052604081205480156200067f5760006200058860018362000b1c565b85549091506000906200059e9060019062000b1c565b90506000866000018281548110620005c657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110620005f857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001556200061183600162000b01565b600082815260018901602052604090205586548790806200064257634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506200023b565b60009150506200023b565b60606200069b8484600085620006a3565b949350505050565b606082471015620007065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200046f565b843b620007565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200046f565b600080866001600160a01b0316858760405162000774919062000a2c565b60006040518083038185875af1925050503d8060008114620007b3576040519150601f19603f3d011682016040523d82523d6000602084013e620007b8565b606091505b5091509150620007ca828286620007d5565b979650505050505050565b60608315620007e657508162000341565b825115620007f75782518084602001fd5b8160405162461bcd60e51b81526004016200046f919062000aec565b613a328062000bab83390190565b80356200082e8162000b91565b919050565b8035600381106200082e57600080fd5b600082601f83011262000854578081fd5b813567ffffffffffffffff8082111562000872576200087262000b7b565b604051601f8301601f19908116603f011681019082821181831017156200089d576200089d62000b7b565b81604052838152866020858801011115620008b6578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215620008e4578081fd5b8135620003418162000b91565b6000806000806000806000806000806101408b8d03121562000911578586fd5b6200091c8b62000821565b99506200092c60208c0162000821565b985060408b013567ffffffffffffffff8082111562000949578788fd5b620009578e838f0162000843565b995060608d01359150808211156200096d578788fd5b506200097c8d828e0162000843565b97505060808b0135955060a08b0135945060c08b0135935060e08b01359250620009aa6101008c0162000833565b91506101208b013590509295989b9194979a5092959850565b600060208284031215620009d5578081fd5b8151801515811462000341578182fd5b600060208284031215620009f7578081fd5b5035919050565b6000815180845262000a1881602086016020860162000b36565b601f01601f19169290920160200192915050565b6000825162000a4081846020870162000b36565b9190910192915050565b6001600160a01b0385811682528416602082015260806040820181905260009062000a7890830185620009fe565b8281036060840152620007ca8185620009fe565b6001600160a01b03881681526020810187905260408101869052606081018590526080810184905260e081016003841062000ad757634e487b7160e01b600052602160045260246000fd5b60a082019390935260c0015295945050505050565b602081526000620003416020830184620009fe565b6000821982111562000b175762000b1762000b65565b500190565b60008282101562000b315762000b3162000b65565b500390565b60005b8381101562000b5357818101518382015260200162000b39565b83811115620002ed5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000ba757600080fd5b5056fe60806040526017805460ff191660011790553480156200001e57600080fd5b5060405162003a3238038062003a32833981016040819052620000419162000241565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601480546001600160a01b038087166001600160a01b03199283161790925560018054928616929091169190911790558151620000c790600f906020850190620000e8565b508051620000dd906010906020840190620000e8565b50505050506200033f565b828054620000f690620002d3565b90600052602060002090601f0160209004810192826200011a576000855562000165565b82601f106200013557805160ff191683800117855562000165565b8280016001018555821562000165579182015b828111156200016557825182559160200191906001019062000148565b506200017392915062000177565b5090565b5b8082111562000173576000815560010162000178565b600082601f8301126200019f578081fd5b81516001600160401b0380821115620001bc57620001bc62000310565b604051601f8301601f19908116603f01168101908282118183101715620001e757620001e762000310565b8160405283815260209250868385880101111562000203578485fd5b8491505b8382101562000226578582018301518183018401529082019062000207565b838211156200023757848385830101525b9695505050505050565b6000806000806080858703121562000257578384fd5b8451620002648162000326565b6020860151909450620002778162000326565b60408601519093506001600160401b038082111562000294578384fd5b620002a2888389016200018e565b93506060870151915080821115620002b8578283fd5b50620002c7878288016200018e565b91505092959194509250565b600181811c90821680620002e857607f821691505b602082108114156200030a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200033c57600080fd5b50565b6136e3806200034f6000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c806385d100561161019d578063b2016bd4116100e9578063e7eb3b48116100a2578063f4ada3511161007c578063f4ada351146107e2578063f6e0c8f614610802578063f8a8fd6d14610344578063ff5958fc1461081557600080fd5b8063e7eb3b48146107a9578063e8a352f8146107bc578063f2fde38b146107cf57600080fd5b8063b2016bd41461072a578063c1097c0d1461073d578063c3383b5b14610750578063e5cb8d8614610763578063e6050c3814610776578063e78ccc391461078957600080fd5b806394e33d7f11610156578063a27382d611610130578063a27382d6146106ac578063a54e2ff2146106cc578063aafc7a76146106df578063ae809e8f146106ff57600080fd5b806394e33d7f1461065b5780639701f5e8146106835780639cbe5efd146106a357600080fd5b806385d1005614610548578063897f87e0146105685780638c65c81f146105935780638da5cb5b1461061757806390a4cb9b14610628578063936f28b91461063b57600080fd5b806349bf117b1161025c578063715018a611610215578063736bcfdb116101ef578063736bcfdb146104d757806374e9a267146104f757806376c4b8871461050a5780637dc0d1d01461051d57600080fd5b8063715018a61461049c578063728313c9146104a4578063732d2160146104b757600080fd5b806349bf117b146104035780634d56cc68146104165780634d61c32f146104335780634e71d92d1461045357806352707d8c1461045b5780636f4d2b671461048957600080fd5b80633203ba77116102ae5780633203ba77146103a457806335a94b7b146103ac5780633b18d439146103c15780633c45e736146103d45780633cc1f54c146103e7578063475e9888146103fa57600080fd5b80630d731228146102f65780630ef4b2481461032957806311da60b41461033c578063123656b9146103465780631c77054714610371578063221937e014610384575b600080fd5b610316610304366004613239565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b610316610337366004613196565b61081d565b610344610919565b005b610316610354366004613269565b600660209081526000928352604080842090915290825290205481565b61031661037f366004613239565b611073565b610316610392366004613239565b600b6020526000908152604090205481565b601254610316565b6103b46110e1565b6040516103209190613340565b6103166103cf366004613239565b61116f565b6103446103e2366004613239565b611217565b6103446103f5366004613239565b61142a565b61031660185481565b610344610411366004613239565b611548565b6017546104239060ff1681565b6040519015158152602001610320565b610316610441366004613196565b600e6020526000908152604090205481565b610344611937565b61046e6104693660046132f3565b6119a8565b60408051938452911515602084015290820152606001610320565b610316610497366004613239565b6119d0565b6103446119fe565b6103446104b2366004613239565b611aa2565b6103166104c5366004613196565b600d6020526000908152604090205481565b6103166104e5366004613239565b600a6020526000908152604090205481565b6103166105053660046132c8565b611c75565b610316610518366004613196565b611cc3565b600154610530906001600160a01b031681565b6040516001600160a01b039091168152602001610320565b610316610556366004613239565b60086020526000908152604090205481565b610316610576366004613269565b600260209081526000928352604080842090915290825290205481565b6106006105a1366004613239565b601360205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a0154989997989697959694959394929360ff9283169391929091168b565b6040516103209b9a99989796959493929190613419565b6000546001600160a01b0316610530565b610316610636366004613239565b611db5565b610316610649366004613239565b60036020526000908152604090205481565b61066e610669366004613239565b611dd6565b60408051928352602083019190915201610320565b610316610691366004613239565b60166020526000908152604090205481565b61031660115481565b6103166106ba366004613239565b60156020526000908152604090205481565b6103166106da366004613239565b611e6f565b6103166106ed366004613239565b60076020526000908152604090205481565b61031661070d366004613269565b600460209081526000928352604080842090915290825290205481565b601454610530906001600160a01b031681565b61031661074b366004613294565b611f06565b61031661075e366004613239565b611ff2565b610316610771366004613239565b61203d565b610344610784366004613239565b61206b565b610316610797366004613239565b600c6020526000908152604090205481565b6103446107b73660046131b0565b61233b565b6103166107ca366004613239565b6127e9565b6103446107dd366004613196565b61282a565b6103166107f0366004613239565b60056020526000908152604090205481565b610344610810366004613239565b612944565b6103b4612a44565b6001600160a01b0381166000908152600d60205260408120548015801590610846575060115481105b156109135760016000828152601360205260409020600a015460ff16600281111561088157634e487b7160e01b600052602160045260246000fd5b14156108b15760008181526004602090815260408083206001600160a01b03871684529091529020549150610913565b60026000828152601360205260409020600a015460ff1660028111156108e757634e487b7160e01b600052602160045260246000fd5b14156109135760008181526006602090815260408083206001600160a01b038716845290915290205491505b50919050565b6011546000908152601360205260409020600501544210156109785760405162461bcd60e51b8152602060048201526013602482015272746f6f206561726c7920746f20736574746c6560681b60448201526064015b60405180910390fd5b6011546000908152601360205260408120600a015460ff1660028111156109af57634e487b7160e01b600052602160045260246000fd5b146109f05760405162461bcd60e51b81526020600482015260116024820152701c9bdd5b99081a1859081cd95d1d1b1959607a1b604482015260640161096f565b600154604051631fc58c3360e31b81526000916001600160a01b03169063fe2c619890610a2290601090600401613373565b602060405180830381600087803b158015610a3c57600080fd5b505af1158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190613251565b601180546000908152601360205260408082206003018490559154815290812060060154919250610ab7610ab0670de0b6b3a764000084612a51565b8490612a5d565b90506000610ad7610ad0670de0b6b3a764000085612a7f565b8590612a5d565b9050600080610ae4612a8b565b91509150604051806101600160405280601360006012600081548110610b1a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600001548152602001601360006012600081548110610b6257634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206001015481526020018781526020016000815260200183815260200182815260200186815260200160136000601154815260200190815260200160002060070160009054906101000a900460ff166002811115610be857634e487b7160e01b600052602160045260246000fd5b81526020810186905260408101859052606001600081525060136000428152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115610c9157634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115610cde57634e487b7160e01b600052602160045260246000fd5b02179055506000915081905060115460009081526013602052604090206007015460ff166002811115610d2157634e487b7160e01b600052602160045260246000fd5b1415610db45760115460009081526013602052604090206008015487111580610d5e57506011546000908152601360205260409020600901548710155b15610d8e576011546000908152601360205260409020600a0180546001919060ff191682805b0217905550610e93565b6011546000908152601360205260409020600a0180546002919060ff1916600183610d84565b600160115460009081526013602052604090206007015460ff166002811115610ded57634e487b7160e01b600052602160045260246000fd5b1415610e33576011546000908152601360205260409020600901548710610d8e576011546000908152601360205260409020600a0180546001919060ff19168280610d84565b6011546000908152601360205260409020600801548711610e73576011546000908152601360205260409020600a0180546001919060ff19168280610d84565b6011546000908152601360205260409020600a01805460ff191660021790555b60016011546000908152601360205260409020600a015460ff166002811115610ecc57634e487b7160e01b600052602160045260246000fd5b1415610f475750601180546000908152600460208181526040808420308086529083528185205442808752858552838720838852855283872091909155865486528484528286208287528452828620549086526006845282862082875284528286205594548452918152818320938352929092522054610fb8565b506011805460009081526006602081815260408084203080865290835281852054428087526004855283872083885285528387209190915586548652848452828620828752845282862054908652848452828620828752845282862055945484529181528183209383529290925220545b601180546000908152600b60208181526040808420544280865282862091825595548552600c83528185205495855293209390935590915254610ffb9082612a5d565b42600090815260086020908152604080832093909355600c905220546110219082612a5d565b4260008181526009602052604081209290925560118190556012805460018101825592527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34449091015550505050505050565b6000806110816011546119d0565b9050600061109060115461203d565b905060008183116110a157816110a3565b825b601154600090815260036020526040812054919250906110d7906110d1886110cb8387612a51565b90612a5d565b90612b08565b9695505050505050565b601080546110ee906135ff565b80601f016020809104026020016040519081016040528092919081815260200182805461111a906135ff565b80156111675780601f1061113c57610100808354040283529160200191611167565b820191906000526020600020905b81548152906001019060200180831161114a57829003601f168201915b505050505081565b60115460009081526006602090815260408083203084529091528120546111a49060649061119e906063612b20565b90612b2c565b601154600090815260096020526040902054106111df576011546000908152601660205260409020546111d990839080611c75565b92915050565b601154600081815260066020908152604080832030845282528083205493835260099091529020546111d9918491611c75565b919050565b601154336000908152600d6020526040902054101561123857611238611937565b601154336000818152600d6020526040902091909155601454611268916001600160a01b03909116903084612b38565b6011546000818152600860209081526040808320546004835281842030855283528184205494845260159092528220549192839283926112a99287926119a8565b6011805460009081526015602090815260408083208590559254825260089052205492955090935091506112dd9085612a7f565b60118054600090815260086020908152604080832094909455915481526004825282812030825290915220546113139084612a51565b601180546000908152600460208181526040808420308552825280842095909555925482528252828120338252909152205461134f9084612a7f565b601154600090815260046020908152604080832033845290915290205581156113b157601154600090815260066020908152604080832030845290915290205461139a906064612b2c565b60115460009081526009602052604090205561141c565b6011546000818152600460209081526040808320308085528184528285205486865260068552838620828752855283862054968652600885529285205494529091526114099290916110d191906110cb908490612a51565b6011546000908152600960205260409020555b611424612ba3565b50505050565b6011546000908152600660209081526040808320338452909152902054818110156114b45760405162461bcd60e51b815260206004820152603460248201527f73656c6c536869656c643a3a6d73672e73656e64657220686173206e6f7420656044820152731b9bdd59da081cda1a595b19081d1bc81cd95b1b60621b606482015260840161096f565b60006114bf8361116f565b90506114cb8284612a51565b60118054600090815260066020818152604080842033855282528084209590955592548252825282812030825290915220546115079084612a7f565b601154600090815260066020908152604080832030845290915290205561152c612ba3565b601454611543906001600160a01b03163383612cd7565b505050565b336000908152600e602052604090205461155f5750565b601154336000908152600e60205260408120549091141561159d575060115460009081526002602090815260408083203384529091529020546115a9565b6115a633611cc3565b90505b818110156115f15760405162461bcd60e51b81526020600482015260156024820152743737ba1032b737bab3b4103638103a3790313ab93760591b604482015260640161096f565b60006115fe6011546119d0565b9050600061160d60115461203d565b9050600081831161161e5781611620565b825b60115460009081526003602052604081205491925090611648906110d1886110cb8387612a51565b6011546000908152600360209081526040808320546008909252822054929350909161167a91906110d1908590612a5d565b601154600090815260036020908152604080832054600990925282205492935090916116ac91906110d1908690612a5d565b601154600090815260036020908152604080832054600890925282205492935090916116dd91906110d19087612a5d565b6011546000908152600360209081526040808320546009909252822054929350909161170e91906110d19088612a5d565b601154600090815260036020908152604080832054600a909252822054929350909161173f91906110d19089612a5d565b60115460009081526004602090815260408083203084529091529020549091506117699086612a51565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546117ab9085612a51565b60118054600090815260066020908152604080832030845282528083209490945591548152600890915220546117e19084612a51565b60118054600090815260086020908152604080832094909455915481526009909152205461180f9083612a51565b6011805460009081526009602090815260408083209490945591548152600a909152205461183d9082612a51565b601180546000908152600a6020908152604080832094909455915481526005909152205461186b9086612a51565b6011805460009081526005602090815260408083209490945591548152600790915220546118999085612a51565b601180546000908152600760209081526040808320949094559154338252600e83528382208190558152600390915220546118d4908c612a51565b6011546000908152600360205260409020556118f08a8c612a51565b60115460009081526002602090815260408083203380855292529091209190915560145461192a916001600160a01b039091169088612cd7565b5050505050505050505050565b60006119423361081d565b905080156119a557336000818152600d602081815260408084208054855260048352818520868652835281852085905580548552600683528185208686528352908420849055919052556014546119a5916001600160a01b039091169083612cd7565b50565b6000806000806000806119bd8a8a8a8a612d07565b919c909b50909950975050505050505050565b600081815260046020908152604080832030845282528083205484845260059092528220546111d991612a51565b6000546001600160a01b03163314611a585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601454611aba906001600160a01b0316333084612b38565b601154600081815260096020908152604080832054600683528184203085528352818420549484526016909252822054919283928392611afb9287926119a8565b601180546000908152601660209081526040808320859055925482526009905220549295509093509150611b2f9085612a7f565b6011805460009081526009602090815260408083209490945591548152600682528281203082529091522054611b659084612a51565b6011805460009081526006602081815260408084203085528252808420959095559254825282528281203382529091522054611ba19084612a7f565b60115460009081526006602090815260408083203384529091529020558115611c03576011546000908152600460209081526040808320308452909152902054611bec906064612b2c565b60115460009081526008602052604090205561141c565b601154600081815260066020908152604080832030808552818452828520548686526004855283862082875285528386205496865260098552928520549452909152611c5b9290916110d191906110cb908490612a51565b601154600090815260086020526040902055611424612ba3565b600080611c84856103e8612b20565b90506000611c928285612b20565b90506000611cac83611ca6886103e8612b20565b90612a7f565b9050611cb8818361349e565b979650505050505050565b6001600160a01b0381166000908152600e60205260408120548015801590611ced57506011548111155b156109135760008181526002602090815260408083206001600160a01b038716845290915281205492505b601254611d27906001906135bc565b811015611dae578160128281548110611d5057634e487b7160e01b600052603260045260246000fd5b906000526020600020015410611d9c576000611d9860128381548110611d8657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548686611f06565b9350505b80611da681613634565b915050611d18565b5050919050565b60128181548110611dc557600080fd5b600091825260209091200154905081565b601154600090815260096020908152604080832054600890925282205482918291611e0091612a7f565b601154600090815260046020908152604080832030845290915281205491925090611e319083906110d19088612a5d565b601154600090815260066020908152604080832030845290915281205491925090611e629084906110d19089612a5d565b9196919550909350505050565b6011546000908152600460209081526040808320308452909152812054611e9e9060649061119e906063612b20565b60115460009081526008602052604090205410611ed3576011546000908152601560205260409020546111d990839080611c75565b601154600081815260046020908152604080832030845282528083205493835260089091529020546111d9918491611c75565b6000601154841415611f3b575060008381526002602090815260408083206001600160a01b0386168452909152902054611feb565b60016000858152601360205260409020600a015460ff166002811115611f7157634e487b7160e01b600052602160045260246000fd5b1415611fb3576000848152600460209081526040808320308452825280832054878452600390925290912054611fab906110d18584612a5d565b915050611feb565b6000848152600660209081526040808320308452825280832054878452600390925290912054611fe7906110d18584612a5d565b9150505b9392505050565b6011546000818152600960209081526040808320546006835281842030855283528184205494845260169092528220549192839261203392869290916119a8565b5090949350505050565b600081815260066020908152604080832030845282528083205484845260079092528220546111d991612a51565b601154336000908152600e6020526040902054101561208e5761208e6000611548565b60115460009081526009602090815260408083205460089092528220546120b491612a7f565b601154600090815260086020526040812054919250906120da9083906110d19086612a5d565b601154600090815260096020526040812054919250906121009084906110d19087612a5d565b6011546000908152600460209081526040808320308452909152812054919250906121319085906110d19088612a5d565b6011546000908152600660209081526040808320308452909152812054919250906121629086906110d19089612a5d565b6011546000908152600860205260409020549091506121819085612a7f565b6011805460009081526008602090815260408083209490945591548152600990915220546121af9084612a7f565b60118054600090815260096020908152604080832094909455915481526004825282812030825290915220546121e59083612a7f565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546122279082612a7f565b601180546000908152600660209081526040808320308452825280832094909455915481526005909152205461225d9083612a7f565b60118054600090815260056020908152604080832094909455915481526007909152205461228b9082612a7f565b6011546000908152600760205260409020556014546122b5906001600160a01b0316333089612b38565b601154336000908152600e602090815260408083208490559282526003905220546122e09087612a7f565b60118054600090815260036020908152604080832094909455915481526002825282812033825290915220546123169087612a7f565b6011546000908152600260209081526040808320338452909152902055505050505050565b60175460ff1661237e5760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08199a5c9cdd081a5b9a5d60921b604482015260640161096f565b80158061238b5750806001145b806123965750806002145b6123e25760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420737570706f727420626174746c65206475726174696f6e0000000000604482015260640161096f565b60188190556017805460ff191690556123fb8585612a7f565b670de0b6b3a76400001461245d5760405162461bcd60e51b8152602060048201526024808201527f426174746c653a3a696e69743a7370656172202b20736869656c642073686f756044820152636c64203160e01b606482015260840161096f565b600080612468612a8b565b6011829055601280546001818101835560009283527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490910184905554604051631fc58c3360e31b8152939550919350916001600160a01b039091169063fe2c6198906124da90601090600401613373565b602060405180830381600087803b1580156124f457600080fd5b505af1158015612508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252c9190613251565b90506040518061016001604052808981526020018881526020018281526020016000815260200184815260200183815260200187815260200186600281111561258557634e487b7160e01b600052602160045260246000fd5b815260200161259f610ab0670de0b6b3a76400008a612a51565b81526020016125b9610ab0670de0b6b3a76400008a612a7f565b8152602001600081525060136000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083600281111561265457634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff191660018360028111156126a157634e487b7160e01b600052602160045260246000fd5b02179055505060118054600090815260046020908152604080832030845282528083208e9055925482526005905220546126dc91508a612a7f565b60118054600090815260056020908152604080832094909455825482526006815283822030835281528382208d90559154815260079091522054612720908a612a7f565b60115460009081526007602052604090205561273c888a612a5d565b601154600090815260086020526040902055612758878a612a5d565b6011805460009081526009602090815260408083209490945582548252600b81528382208c905582548252600c81528382208b905582548252600281528382206001600160a01b038f16835281528382208d90559154600e83528382208190558152600390915220546127cb908a612a7f565b60115460009081526003602052604090205550505050505050505050565b6011546000818152600860209081526040808320546004835281842030855283528184205494845260159092528220549192839261203392869290916119a8565b6000546001600160a01b031633146128845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096f565b6001600160a01b0381166128e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161096f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6011546000908152600460209081526040808320338452909152902054818110156129cc5760405162461bcd60e51b815260206004820152603260248201527f73656c6c53706561723a3a6d73672e73656e64657220686173206e6f7420656e6044820152711bdd59da081cdc19585c881d1bc81cd95b1b60721b606482015260840161096f565b60006129d783611e6f565b90506129e38284612a51565b6011805460009081526004602081815260408084203385528252808420959095559254825282528281203082529091522054612a1f9084612a7f565b601154600090815260046020908152604080832030845290915290205561152c612ba3565b600f80546110ee906135ff565b6000611feb82846135bc565b6000612a6b6012600a6134f5565b612a758484612b20565b611feb919061349e565b6000611feb8284613486565b60008060185460001415612ac557612aa6620151804261364f565b612ab090426135bc565b9150612abf8262015180613486565b90509091565b60185460011415612b045762093a80612ae1426203f480613486565b612aeb919061364f565b612af590426135bc565b9150612abf8262093a80613486565b9091565b6000611feb8261119e612b1d6012600a6134f5565b86905b6000611feb828461359d565b6000611feb828461349e565b6040516001600160a01b03808516602483015283166044820152606481018290526114249085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612edc565b601154600081815260046020908152604080832030845282528083205493835260089091528120549091612bd79190612b08565b6011546000818152600660209081526040808320308452825280832054938352600990915281205492935091612c0c91612b08565b9050670dbd2fc137a3000082101580612c2d5750670dbd2fc137a300008110155b15612caf57670dbd2fc137a300008210612c7857601180546000908152600b60209081526040808320670dbd2fc137a30000905592548252600c905220662386f26fc1000090555050565b601180546000908152600b60209081526040808320662386f26fc10000905592548252600c905220670dbd2fc137a3000090555050565b601180546000908152600b6020908152604080832086905592548252600c9052208190555050565b6040516001600160a01b03831660248201526044810182905261154390849063a9059cbb60e01b90606401612b6c565b6000806000808711612d655760405162461bcd60e51b815260206004820152602160248201527f426174746c653a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b606482015260840161096f565b600086118015612d755750600085115b612dc15760405162461bcd60e51b815260206004820152601e60248201527f426174746c653a20494e53554646494349454e545f4c49515549444954590000604482015260640161096f565b612dd1606461119e876063612b20565b8610612de557508591506001905082612ed2565b6000612e09612dfa606361119e896064612b20565b612e04908961359d565b612fae565b915081905080612e198989612a7f565b1115612e8e576000612e2b8289612a51565b90506000612e3b826103e8612b20565b90506000612e49828a612b20565b90506000612e5d83611ca68d6103e8612b20565b9050612e69818361349e565b9750612e7f612e788d86612a51565b8990612a7f565b97506001965050505050612ed0565b6000612e9c896103e8612b20565b90506000612eaa8289612b20565b90506000612ebe83611ca68c6103e8612b20565b9050612eca818361349e565b96505050505b505b9450945094915050565b6000612f31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130179092919063ffffffff16565b8051909150156115435780806020019051810190612f4f9190613219565b6115435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161096f565b600060038211156130095750806000612fc860028361349e565b612fd3906001613486565b90505b8181101561091357905080600281612fee818661349e565b612ff89190613486565b613002919061349e565b9050612fd6565b811561121257506001919050565b6060613026848460008561302e565b949350505050565b60608247101561308f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161096f565b843b6130dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161096f565b600080866001600160a01b031685876040516130f99190613324565b60006040518083038185875af1925050503d8060008114613136576040519150601f19603f3d011682016040523d82523d6000602084013e61313b565b606091505b5091509150611cb882828660608315613155575081611feb565b8251156131655782518084602001fd5b8160405162461bcd60e51b815260040161096f9190613340565b80356001600160a01b038116811461121257600080fd5b6000602082840312156131a7578081fd5b611feb8261317f565b600080600080600080600060e0888a0312156131ca578283fd5b6131d38861317f565b96506020880135955060408801359450606088013593506080880135925060a088013560038110613202578283fd5b8092505060c0880135905092959891949750929550565b60006020828403121561322a578081fd5b81518015158114611feb578182fd5b60006020828403121561324a578081fd5b5035919050565b600060208284031215613262578081fd5b5051919050565b6000806040838503121561327b578182fd5b8235915061328b6020840161317f565b90509250929050565b6000806000606084860312156132a8578283fd5b833592506132b86020850161317f565b9150604084013590509250925092565b6000806000606084860312156132dc578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613308578384fd5b5050823594602084013594506040840135936060013592509050565b600082516133368184602087016135d3565b9190910192915050565b602081526000825180602084015261335f8160408501602087016135d3565b601f01601f19169190910160400192915050565b6000602080835281845483600182811c91508083168061339457607f831692505b8583108114156133b257634e487b7160e01b87526022600452602487fd5b8786018381526020018180156133cf57600181146133e05761340a565b60ff1986168252878201965061340a565b60008b815260209020895b86811015613404578154848201529085019089016133eb565b83019750505b50949998505050505050505050565b6000610160820190508c82528b60208301528a60408301528960608301528860808301528760a08301528660c08301526134528661368f565b8560e0830152846101008301528361012083015261346f8361368f565b826101408301529c9b505050505050505050505050565b6000821982111561349957613499613663565b500190565b6000826134ad576134ad613679565b500490565b600181815b808511156134ed5781600019048211156134d3576134d3613663565b808516156134e057918102915b93841c93908002906134b7565b509250929050565b6000611feb838360008261350b575060016111d9565b81613518575060006111d9565b816001811461352e576002811461353857613554565b60019150506111d9565b60ff84111561354957613549613663565b50506001821b6111d9565b5060208310610133831016604e8410600b8410161715613577575081810a6111d9565b61358183836134b2565b806000190482111561359557613595613663565b029392505050565b60008160001904831182151516156135b7576135b7613663565b500290565b6000828210156135ce576135ce613663565b500390565b60005b838110156135ee5781810151838201526020016135d6565b838111156114245750506000910152565b600181811c9082168061361357607f821691505b6020821081141561091357634e487b7160e01b600052602260045260246000fd5b600060001982141561364857613648613663565b5060010190565b60008261365e5761365e613679565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600381106119a557634e487b7160e01b600052602160045260246000fdfea2646970667358221220ef295d77ff073c7546f0b977625b25f7a66df7142d567183f0c8839243e3589a64736f6c63430008040033a264697066735822122080cf2c55c150b4c03f60415150c0ef4cc3459ffac12df0f153ac81c5a92b0a6164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3456,
        "contract": "contracts/Arena.sol:Arena",
        "label": "battleSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1666_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1666_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1665,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1389_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1389_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1384,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1388,
            "contract": "contracts/Arena.sol:Arena",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}