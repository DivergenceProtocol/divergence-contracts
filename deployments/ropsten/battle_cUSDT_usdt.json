{
  "address": "0x114F6764d3baBBBEF3D270dE446C19Df3b913822",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquilityIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyShieldOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buySpear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buySpearOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralShield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralSpear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralSurplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pre_k",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "e",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pre_k",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_trackName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_priceName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_spearPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shieldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_range",
          "type": "uint256"
        },
        {
          "internalType": "enum RangeType",
          "name": "_ry",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_startTS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTS",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "acc",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "nextRoundLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acc",
          "type": "address"
        }
      ],
      "name": "pendingClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acc",
          "type": "address"
        }
      ],
      "name": "pendingLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquilityOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundIdsLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "spearPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shieldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "range",
          "type": "uint256"
        },
        {
          "internalType": "enum RangeType",
          "name": "ry",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "targetPriceUnder",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPriceSuper",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundResult",
          "name": "roundResult",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energy",
          "type": "uint256"
        }
      ],
      "name": "sellAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellShieldOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellSpear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sellSpearOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shieldBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shieldPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "shieldSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "spearBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "spearPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "spearSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sqrt_k_shield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sqrt_k_spear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalShield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSpear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trackName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStartRoundLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStartRoundSS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x591c02eb88107934c3fc8a5d1b8e1d931242731b3d2d31120c0575a19d42e0ce",
  "receipt": {
    "to": null,
    "from": "0x77Bec02085C22d64e3c9D8022B2aE1B648563d3d",
    "contractAddress": "0x114F6764d3baBBBEF3D270dE446C19Df3b913822",
    "transactionIndex": 1,
    "gasUsed": "3157396",
    "logsBloom": "0x
    "blockHash": "0xd9283d75c05a86d35d7bf404812ca2a5c0d3f5fe5e25d824cf179a3df0cab614",
    "transactionHash": "0x591c02eb88107934c3fc8a5d1b8e1d931242731b3d2d31120c0575a19d42e0ce",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10108721,
        "transactionHash": "0x591c02eb88107934c3fc8a5d1b8e1d931242731b3d2d31120c0575a19d42e0ce",
        "address": "0x114F6764d3baBBBEF3D270dE446C19Df3b913822",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000077bec02085c22d64e3c9d8022b2ae1b648563d3d"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xd9283d75c05a86d35d7bf404812ca2a5c0d3f5fe5e25d824cf179a3df0cab614"
      }
    ],
    "blockNumber": 10108721,
    "cumulativeGasUsed": "3320409",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "33e692906ffbf4642436f977ab99a8cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquilityIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyShieldOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buySpear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buySpearOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralShield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralSpear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pre_k\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"e\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pre_k\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_priceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spearPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shieldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"},{\"internalType\":\"enum RangeType\",\"name\":\"_ry\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTS\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"nextRoundLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"pendingClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"pendingLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquilityOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundIdsLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spearPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shieldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"},{\"internalType\":\"enum RangeType\",\"name\":\"ry\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"targetPriceUnder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPriceSuper\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundResult\",\"name\":\"roundResult\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellShieldOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellSpear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellSpearOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shieldBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shieldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"shieldSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spearBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spearPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"spearSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sqrt_k_shield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sqrt_k_spear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalShield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSpear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStartRoundLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStartRoundSS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquility(uint256)\":{\"details\":\"The user adds energy token by calling this function, as well as the corresponding number of spear and shield\",\"params\":{\"amount\":\"of energy token transfer to battle contract\"}},\"buyShield(uint256)\":{\"details\":\"The price of shield will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\",\"params\":{\"amount\":\"the amount of energy token, energy token should a ERC20 token\"}},\"buySpear(uint256)\":{\"details\":\"The price of spear will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.user has three status: has spear before this round, first this round , not first for this round\",\"params\":{\"amount\":\"the amount of collateral token, collateral token should a ERC20 token\"}},\"claim()\":{\"details\":\"normal users get back their profits\"},\"getAmountOut(uint256,uint256,uint256,uint256)\":{\"details\":\"Calculate how many spears and shields can be obtained\",\"params\":{\"amountIn\":\"amount transfer to battle contract\"}},\"init(address,address,string,string,uint256,uint256,uint256,uint256,uint8,uint256,uint256)\":{\"details\":\"init the battle and set the first round's params this function will become the start point \",\"params\":{\"_endTS\":\"The end timestamp of first round \",\"_range\":\"The positive and negative range of price changes\",\"_shieldPrice\":\"Init price of shield\",\"_spearPrice\":\"Init price of spear\",\"_startTS\":\"The start timestamp of first round\",\"amount\":\"The amount of collateral, the collateral can be any ERC20 token contract, such as dai\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquility(uint256)\":{\"details\":\"The user retrieves the energy token\",\"params\":{\"amount\":\"of energy token to msg.sender, if msg.sender don't have enought spear and shield, the transaction will failed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sellShield(uint256)\":{\"details\":\"sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\"},\"sellSpear(uint256)\":{\"details\":\"sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\",\"params\":{\"amount\":\"amount of spear to sell\"}},\"settle()\":{\"details\":\"Announce the results of this round The final price will be provided by an external third party Oracle\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"collateralShield\":{\"details\":\"collateral token belong to shield side\"},\"collateralSpear\":{\"details\":\"collateral token belong to spear side\"},\"collateralSurplus\":{\"details\":\"collateral token belong to non-spear and non-shield\"},\"lpBalanceOf\":{\"details\":\"user's lp balance per round\"},\"shieldBalanceOf\":{\"details\":\"user's shield balance per round\"},\"spearBalanceOf\":{\"details\":\"user's spear balance per round\"},\"spearPrice\":{\"details\":\"shield amount belong to the battle contract per round\"}},\"title\":\"Battle contains multi-round \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Battle.sol\":\"Battle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBattle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./lib/DMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./structs/RoundInfo.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**@title Battle contains multi-round */\\ncontract Battle is Ownable {\\n    \\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n    using SafeDecimalMath for uint;\\n    using DMath for uint;\\n\\n    IOracle public oracle;\\n\\n    /// @dev user's lp balance per round\\n    mapping(uint => mapping(address=>uint)) public lpBalanceOf;\\n    mapping(uint => uint) public lpTotalSupply;\\n    /// @dev user's spear balance per round\\n    mapping(uint => mapping(address=>uint)) public spearBalanceOf;\\n    mapping(uint => uint) public totalSpear;\\n    /// @dev user's shield balance per round\\n    mapping(uint => mapping(address=>uint)) public shieldBalanceOf;\\n    mapping(uint => uint) public totalShield;\\n    /// @dev collateral token belong to spear side\\n    mapping(uint => uint) public collateralSpear;\\n    /// @dev collateral token belong to shield side\\n    mapping(uint => uint) public collateralShield;\\n    /// @dev collateral token belong to non-spear and non-shield\\n    mapping(uint => uint) public collateralSurplus;\\n    /// @dev spear amount belong to the battle contract per round\\n    // mapping(uint => uint) public spearNum;\\n    /// @dev shield amount belong to the battle contract per round\\n    // mapping(uint => uint) public shieldNum;\\n    mapping(uint => uint) public spearPrice;\\n    mapping(uint => uint) public shieldPrice;\\n    mapping(address => uint) public userStartRoundSS;\\n    mapping(address => uint) public userStartRoundLP;\\n\\n    string public trackName;\\n    string public priceName;\\n    \\n    uint public currentRoundId;\\n    uint[] public roundIds;\\n    mapping(uint => RoundInfo) public rounds;\\n\\n    IERC20 public collateralToken;\\n\\n    mapping(uint => uint) public sqrt_k_spear;\\n    mapping(uint => uint) public sqrt_k_shield;\\n\\n    function roundIdsLen() public view returns(uint) {\\n        return roundIds.length;\\n    }\\n\\n    /// @dev init the battle and set the first round's params\\n    /// this function will become the start point \\n    /// @param amount The amount of collateral, the collateral can be any ERC20 token contract, such as dai\\n    /// @param _spearPrice Init price of spear\\n    /// @param _shieldPrice Init price of shield\\n    /// @param _range The positive and negative range of price changes\\n    /// @param _startTS The start timestamp of first round\\n    /// @param _endTS The end timestamp of first round \\n    function init(address _collateral, IOracle _oracle, string memory _trackName, string memory _priceName, uint amount, uint _spearPrice, uint _shieldPrice, uint _range, RangeType _ry, uint _startTS, uint _endTS) external {\\n        collateralToken = IERC20(_collateral);\\n        oracle = _oracle;\\n        trackName = _trackName;\\n        priceName = _priceName;\\n        require(_spearPrice.add(_shieldPrice) == 1e18, \\\"Battle::init:spear + shield should 1\\\");\\n        require(block.timestamp <= _startTS, \\\"Battle::_startTS should in future\\\");\\n        currentRoundId = _startTS;\\n        roundIds.push(_startTS);\\n        uint price = oracle.price(priceName);\\n        uint priceUnder = price.multiplyDecimal(uint(1e18).sub(_range));\\n        uint priceSuper = price.multiplyDecimal(uint(1e18).add(_range));\\n        rounds[_startTS] = RoundInfo({\\n            spearPrice: _spearPrice,\\n            shieldPrice: _shieldPrice,\\n            // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: _startTS,\\n            endTS: _endTS,\\n            range: _range,\\n            ry: _ry,\\n            targetPriceUnder: priceUnder,\\n            targetPriceSuper: priceSuper,\\n            roundResult: RoundResult.NonResult\\n        });\\n        spearBalanceOf[currentRoundId][address(this)] = amount;\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = amount;\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(amount);\\n        collateralSpear[currentRoundId] = _spearPrice.multiplyDecimal(amount);\\n        collateralShield[currentRoundId] = _shieldPrice.multiplyDecimal(amount);\\n        spearPrice[currentRoundId] = _spearPrice;\\n        shieldPrice[currentRoundId] = _shieldPrice;\\n        lpBalanceOf[currentRoundId][msg.sender] = amount;\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(amount);\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @dev The price of spear will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of collateral token, collateral token should a ERC20 token\\n    /// @dev user has three status: has spear before this round, first this round , not first for this round\\n    function buySpear(uint amount) external {\\n        if (userStartRoundSS[msg.sender] < currentRoundId) {\\n            claim();\\n        }\\n        userStartRoundSS[msg.sender] = currentRoundId;\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint spearOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralSpear[currentRoundId], spearBalanceOf[currentRoundId][address(this)], sqrt_k_spear[currentRoundId]);\\n        sqrt_k_spear[currentRoundId] = pre_k;\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(amount);\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].sub(spearOut);\\n        spearBalanceOf[currentRoundId][msg.sender] = spearBalanceOf[currentRoundId][msg.sender].add(spearOut);\\n        if(isBigger) {\\n            collateralShield[currentRoundId] = shieldBalanceOf[currentRoundId][address(this)].div(100);\\n        } else {\\n            collateralShield[currentRoundId] = spearBalanceOf[currentRoundId][address(this)].sub(collateralSpear[currentRoundId])\\n                                                                                            .multiplyDecimal(shieldBalanceOf[currentRoundId][address(this)])\\n                                                                                            .divideDecimal(spearBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function _setPrice() internal {\\n        uint spearPriceNow= collateralSpear[currentRoundId].divideDecimal(spearBalanceOf[currentRoundId][address(this)]);\\n        uint shieldPriceNow = collateralShield[currentRoundId].divideDecimal(shieldBalanceOf[currentRoundId][address(this)]);\\n        if (spearPriceNow >= 99e16 || shieldPriceNow >= 99e16) {\\n            if(spearPriceNow >= 99e16) {\\n                spearPrice[currentRoundId] = 99e16;\\n                shieldPrice[currentRoundId] = 1e16;\\n            } else {\\n                spearPrice[currentRoundId] = 1e16;\\n                shieldPrice[currentRoundId] = 99e16;\\n            }\\n        } else {\\n           spearPrice[currentRoundId] = spearPriceNow; \\n           shieldPrice[currentRoundId] = shieldPriceNow;\\n        }\\n    }\\n\\n    function spearSold(uint _roundId) public view returns(uint) {\\n        return totalSpear[_roundId].sub(spearBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function buySpearOut(uint amount) public view returns(uint) {\\n        (uint spearOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralSpear[currentRoundId], spearBalanceOf[currentRoundId][address(this)], sqrt_k_spear[currentRoundId]);\\n        return spearOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    /// @param amount amount of spear to sell\\n    function sellSpear(uint amount) external {\\n        uint userSpearAmount = spearBalanceOf[currentRoundId][msg.sender];\\n        require(userSpearAmount >= amount, \\\"sellSpear::msg.sender has not enough spear to sell\\\");\\n        uint amountOut = sellSpearOut(amount);\\n        spearBalanceOf[currentRoundId][msg.sender] = userSpearAmount.sub(amount);\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function shieldSold(uint _roundId) public view returns(uint) {\\n        return totalShield[_roundId].sub(shieldBalanceOf[_roundId][address(this)]);\\n    }\\n\\n    function sellSpearOut(uint amount) public view returns(uint amountOut) {\\n        // todo\\n        if (collateralSpear[currentRoundId] >= spearBalanceOf[currentRoundId][address(this)].mul(99).div(100)) {\\n            amountOut = sellAmount(amount, sqrt_k_spear[currentRoundId], sqrt_k_spear[currentRoundId]);\\n        } else {\\n            amountOut = sellAmount(amount, spearBalanceOf[currentRoundId][address(this)], collateralSpear[currentRoundId]);\\n        }\\n    }\\n\\n    /// @dev The price of shield will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.\\n    /// @param amount the amount of energy token, energy token should a ERC20 token\\n    function buyShield(uint amount) external {\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        (uint shieldOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralShield[currentRoundId], shieldBalanceOf[currentRoundId][address(this)], sqrt_k_shield[currentRoundId]);\\n        sqrt_k_shield[currentRoundId] = pre_k;\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].sub(shieldOut);\\n        shieldBalanceOf[currentRoundId][msg.sender] = shieldBalanceOf[currentRoundId][msg.sender].add(shieldOut);\\n        if(isBigger) {\\n            collateralSpear[currentRoundId] = spearBalanceOf[currentRoundId][address(this)].div(100);\\n        } else {\\n            collateralSpear[currentRoundId] = shieldBalanceOf[currentRoundId][address(this)].sub(collateralShield[currentRoundId])\\n            .multiplyDecimal(spearBalanceOf[currentRoundId][address(this)])\\n            .divideDecimal(shieldBalanceOf[currentRoundId][address(this)]);\\n        }\\n        _setPrice();\\n    }\\n\\n    function buyShieldOut(uint amount) public view returns(uint) {\\n        //todo\\n        (uint shieldOut, bool isBigger, uint pre_k) = getAmountOut(amount, collateralShield[currentRoundId], shieldBalanceOf[currentRoundId][address(this)], sqrt_k_shield[currentRoundId]);\\n        return shieldOut;\\n    }\\n\\n    /// @dev sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)\\n    function sellShield(uint amount) external {\\n        uint userShieldAmount = shieldBalanceOf[currentRoundId][msg.sender];\\n        require(userShieldAmount >= amount, \\\"sellShield::msg.sender has not enough shield to sell\\\");\\n        uint amountOut = sellShieldOut(amount);\\n        shieldBalanceOf[currentRoundId][msg.sender] = userShieldAmount.sub(amount);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].add(amount);\\n        _setPrice();\\n        collateralToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function sellShieldOut(uint amount) public view returns(uint amountOut) {\\n        //todo\\n        if (collateralShield[currentRoundId] >= shieldBalanceOf[currentRoundId][address(this)].mul(99).div(100)) {\\n            amountOut = sellAmount(amount, sqrt_k_shield[currentRoundId], sqrt_k_shield[currentRoundId]);\\n        } else {\\n            amountOut = sellAmount(amount, shieldBalanceOf[currentRoundId][address(this)], collateralShield[currentRoundId]);\\n        }\\n    }\\n\\n    /// @dev Announce the results of this round\\n    /// The final price will be provided by an external third party Oracle\\n    function settle() external {\\n        require(block.timestamp >= rounds[currentRoundId].endTS, \\\"too early to settle\\\");\\n        require(rounds[currentRoundId].roundResult == RoundResult.NonResult, \\\"round had settled\\\");\\n        uint price = oracle.price(priceName);\\n        rounds[currentRoundId].endPrice = price;\\n\\n        uint _range = rounds[currentRoundId].range;\\n        uint priceUnder = price.multiplyDecimal(uint(1e18).sub(_range));\\n        uint priceSuper = price.multiplyDecimal(uint(1e18).add(_range));\\n        rounds[block.timestamp] = RoundInfo({\\n            spearPrice: rounds[roundIds[0]].spearPrice,\\n            shieldPrice: rounds[roundIds[0]].shieldPrice,\\n            // todo\\n            startPrice: price,\\n            endPrice: 0,\\n            startTS: block.timestamp,\\n            endTS: block.timestamp.add(rounds[currentRoundId].endTS.sub(rounds[currentRoundId].startTS)),\\n            range: _range,\\n            ry: rounds[currentRoundId].ry,\\n            targetPriceUnder: priceUnder,\\n            targetPriceSuper: priceSuper,\\n            roundResult: RoundResult.NonResult \\n        });\\n       \\n        // new round\\n        uint collateralAmount;\\n        if (rounds[currentRoundId].ry == RangeType.TwoWay) {\\n            if (price <= rounds[currentRoundId].targetPriceUnder || price >= rounds[currentRoundId].targetPriceSuper) {\\n                // spear win\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else if (rounds[currentRoundId].ry == RangeType.Positive){\\n            if (price >= rounds[currentRoundId].targetPriceSuper) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        } else {\\n            if (price <= rounds[currentRoundId].targetPriceUnder) {\\n                rounds[currentRoundId].roundResult = RoundResult.SpearWin;\\n            } else {\\n                rounds[currentRoundId].roundResult = RoundResult.ShieldWin;\\n            }\\n        }\\n        if(rounds[currentRoundId].roundResult == RoundResult.SpearWin) {\\n            spearBalanceOf[block.timestamp][address(this)] = spearBalanceOf[currentRoundId][address(this)];\\n            shieldBalanceOf[block.timestamp][address(this)] = spearBalanceOf[currentRoundId][address(this)];\\n            collateralAmount = spearBalanceOf[currentRoundId][address(this)];\\n        } else {\\n            spearBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[currentRoundId][address(this)];\\n            shieldBalanceOf[block.timestamp][address(this)] = shieldBalanceOf[currentRoundId][address(this)];\\n            collateralAmount = shieldBalanceOf[currentRoundId][address(this)];\\n        }\\n        spearPrice[block.timestamp] = spearPrice[currentRoundId];\\n        shieldPrice[block.timestamp] = shieldPrice[currentRoundId];\\n        collateralSpear[block.timestamp] = spearPrice[block.timestamp].multiplyDecimal(collateralAmount);\\n        collateralShield[block.timestamp] = shieldPrice[block.timestamp].multiplyDecimal(collateralAmount);\\n        currentRoundId= block.timestamp;\\n        roundIds.push(block.timestamp);\\n    }\\n\\n    // function needTokenLiqui(uint amount) public view returns(uint _energy0, uint _energy1, uint _reserve0, uint _reserve1) {\\n    //     _energy0 = energy0.divideDecimal(energy0.add(energy1)).multiplyDecimal(amount);\\n    //     _energy1 = energy1.divideDecimal(energy0.add(energy1)).multiplyDecimal(amount);\\n    //     uint per = amount.divideDecimal(energy0.add(energy1));\\n    //     _reserve0 = per.multiplyDecimal(energy0);\\n    //     _reserve1 = per.multiplyDecimal(energy1);\\n    // }\\n\\n    /// @dev The user adds energy token by calling this function, as well as the corresponding number of spear and shield\\n    /// @param amount of energy token transfer to battle contract\\n    function addLiquility(uint amount) external {\\n        if (userStartRoundLP[msg.sender] < currentRoundId) {\\n            removeLiquility(0);\\n        }\\n        // new\\n        uint collateralSS = collateralSpear[currentRoundId].add(collateralShield[currentRoundId]);\\n        uint deltaCollateralSpear = collateralSpear[currentRoundId].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaCollateralShield = collateralShield[currentRoundId].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaSpear = spearBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaShield = shieldBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].add(deltaCollateralSpear);\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].add(deltaCollateralShield);\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].add(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].add(deltaShield);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].add(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].add(deltaShield);\\n\\n        collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].add(amount);\\n        lpBalanceOf[currentRoundId][msg.sender] = lpBalanceOf[currentRoundId][msg.sender].add(amount);\\n    }\\n\\n    function addLiquilityIn(uint amount) public view returns(uint, uint) {\\n        uint collateralSS = collateralSpear[currentRoundId].add(collateralShield[currentRoundId]);\\n        uint deltaSpear = spearBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        uint deltaShield = shieldBalanceOf[currentRoundId][address(this)].multiplyDecimal(amount).divideDecimal(collateralSS);\\n        return (deltaSpear, deltaShield);\\n    }\\n\\n    function removeLiquilityOut(uint amount) public view returns(uint) {\\n        uint spearSoldAmount = spearSold(currentRoundId);\\n        uint shieldSoldAmount = shieldSold(currentRoundId);\\n        uint maxSold = spearSoldAmount > shieldSoldAmount ? spearSoldAmount : shieldSoldAmount;\\n        uint deltaCollateral = lpTotalSupply[currentRoundId].sub(maxSold).multiplyDecimal(amount).divideDecimal(lpTotalSupply[currentRoundId]);\\n        return deltaCollateral;\\n    }\\n\\n    /// @dev The user retrieves the energy token\\n    /// @param amount of energy token to msg.sender, if msg.sender don't have enought spear and shield, the transaction\\n    /// will failed\\n    function removeLiquility(uint amount) public  {\\n        // require(userStartRoundLP[msg.sender] !=0, \\\"user dont have liquility\\\");\\n        if(userStartRoundLP[msg.sender] == 0) {\\n            return;\\n        }\\n        uint lpAmount;\\n        if (userStartRoundLP[msg.sender] == currentRoundId) {\\n            // dont have history\\n            lpAmount = lpBalanceOf[currentRoundId][msg.sender];\\n        } else {\\n            // history handle\\n            lpAmount = pendingLP(msg.sender);\\n        }\\n        require(lpAmount >= amount, \\\"not enough lp to burn\\\");\\n        uint spearSoldAmount = spearSold(currentRoundId);\\n        uint shieldSoldAmount = shieldSold(currentRoundId);\\n        uint maxSold = spearSoldAmount > shieldSoldAmount ? spearSoldAmount : shieldSoldAmount;\\n        uint deltaCollateral = lpTotalSupply[currentRoundId].sub(maxSold).multiplyDecimal(amount).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaSpear = deltaCollateral.multiplyDecimal(collateralSpear[currentRoundId]).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaShield = deltaCollateral.multiplyDecimal(collateralShield[currentRoundId]).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaCollateralSpear = collateralSpear[currentRoundId].multiplyDecimal(deltaCollateral).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaCollateralShield = collateralShield[currentRoundId].multiplyDecimal(deltaCollateral).divideDecimal(lpTotalSupply[currentRoundId]);\\n        uint deltaCollateralSurplus = collateralSurplus[currentRoundId].multiplyDecimal(deltaCollateral).divideDecimal(lpTotalSupply[currentRoundId]);\\n\\n        spearBalanceOf[currentRoundId][address(this)] = spearBalanceOf[currentRoundId][address(this)].sub(deltaSpear);\\n        shieldBalanceOf[currentRoundId][address(this)] = shieldBalanceOf[currentRoundId][address(this)].sub(deltaShield);\\n        collateralSpear[currentRoundId] = collateralSpear[currentRoundId].sub(deltaCollateralSpear);\\n        collateralShield[currentRoundId] = collateralShield[currentRoundId].sub(deltaCollateralShield);\\n        collateralSurplus[currentRoundId] = collateralSurplus[currentRoundId].sub(deltaCollateralSurplus);\\n\\n        totalSpear[currentRoundId] = totalSpear[currentRoundId].sub(deltaSpear);\\n        totalShield[currentRoundId] = totalShield[currentRoundId].sub(deltaShield);\\n\\n        userStartRoundLP[msg.sender] = currentRoundId;\\n        lpTotalSupply[currentRoundId] = lpTotalSupply[currentRoundId].sub(amount);\\n        lpBalanceOf[currentRoundId][msg.sender] = lpAmount.sub(amount);\\n        collateralToken.safeTransfer(msg.sender, deltaCollateral);\\n        \\n    }\\n\\n    function pendingClaim(address acc) public view returns(uint amount) {\\n        uint userRoundId = userStartRoundSS[acc];\\n        if(userRoundId != 0 && userRoundId < currentRoundId) {\\n            if(rounds[userRoundId].roundResult == RoundResult.SpearWin) {\\n                amount = spearBalanceOf[userRoundId][acc];\\n            } else if (rounds[userRoundId].roundResult == RoundResult.ShieldWin) {\\n                amount = shieldBalanceOf[userRoundId][acc];\\n            }\\n        }\\n    }\\n\\n    function pendingLP(address acc) public view returns(uint lpAmount) {\\n        uint userRoundId = userStartRoundLP[acc];\\n        if(userRoundId != 0 && userRoundId <= currentRoundId) {\\n                // future round\\n                lpAmount = lpBalanceOf[userRoundId][acc];\\n                for(uint i; i < roundIds.length-1;i++) {\\n                    if (roundIds[i] >= userRoundId) {\\n                        // user's all round\\n                        uint newLpAmount = nextRoundLP(roundIds[i], acc, lpAmount);\\n                        lpAmount = newLpAmount;\\n                    }\\n                }\\n        }\\n    }\\n\\n    function nextRoundLP(uint roundId, address acc, uint lpAmount) public view returns(uint amount) {\\n        if(roundId == currentRoundId) {\\n            return lpBalanceOf[roundId][acc];\\n        }\\n        if(rounds[roundId].roundResult == RoundResult.SpearWin) {\\n            uint spearAmountTotal = spearBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(spearAmountTotal).divideDecimal(lpTotalSupply[roundId]);\\n        } else {\\n            uint shieldAmountTotal = shieldBalanceOf[roundId][address(this)];\\n            amount = lpAmount.multiplyDecimal(shieldAmountTotal).divideDecimal(lpTotalSupply[roundId]);\\n        }\\n    }\\n\\n    /// @dev normal users get back their profits\\n    function claim() public {\\n        uint amount = pendingClaim(msg.sender);\\n        if (amount != 0) {\\n            spearBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            shieldBalanceOf[userStartRoundSS[msg.sender]][msg.sender] = 0;\\n            delete userStartRoundSS[msg.sender];\\n            collateralToken.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @dev Calculate how many spears and shields can be obtained\\n    /// @param amountIn amount transfer to battle contract\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint _pre_k) public pure returns (uint amountOut, bool e, uint pre_k) {\\n        require(amountIn > 0, 'Battle: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'Battle: INSUFFICIENT_LIQUIDITY');\\n        if (reserveIn >= reserveOut.mul(99).div(100)) {\\n            amountOut = amountIn;\\n            e = true;\\n            return (amountOut, e, _pre_k);\\n        }\\n        // if amountIn > sqrt(reserveIn)\\n        uint maxAmount = DMath.sqrt(reserveIn*reserveOut.mul(100).div(99));\\n        pre_k = maxAmount;\\n        // console.log(\\\"maxAmount %s and amountIn %s, reserveIn %s, reserveOut %s\\\", maxAmount, amountIn, reserveIn);\\n        if (amountIn.add(reserveIn) > maxAmount) {\\n            uint maxAmountIn = maxAmount.sub(reserveIn);\\n            uint amountInWithFee = maxAmountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n            amountOut = amountOut.add(amountIn.sub(maxAmountIn));\\n            e = true;\\n        } else {\\n            uint amountInWithFee = amountIn.mul(1000);\\n            uint numerator = amountInWithFee.mul(reserveOut);\\n            uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n            amountOut = numerator / denominator;\\n        }\\n    }\\n\\n    function sellAmount(uint amountToSell, uint reserve, uint energy) public pure returns(uint amount) {\\n        uint amountInWithFee = amountToSell.mul(1000);\\n        uint numerator = amountInWithFee.mul(energy);\\n        uint denominator = reserve.mul(1000).add(amountInWithFee);\\n        amount = numerator / denominator;\\n    }\\n\\n    function test() public {}\\n\\n    // // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    // function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\\n    //     require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    //     require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    //     uint numerator = reserveIn.multiplyDecimal(amountOut).mul(1000);\\n    //     uint denominator = reserveOut.sub(amountOut).mul(1000);\\n    //     amountIn = (numerator / denominator).add(1);\\n    // }\\n}\\n\",\"keccak256\":\"0x1666823aa7f0879d050e07e2fd86fcbae6208a5a550845786c98021714c14ad4\",\"license\":\"MIT\"},\"contracts/interfaces/IBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBattle {\\n    function init(uint amount, uint price0, uint pirce1, uint price2, uint endTs) external;\\n    function buySpear(uint amount) external;\\n    function sellSpear(uint amount) external;\\n    function buyShield(uint amount) external;\\n    function sellShield(uint amount) external;\\n    function settle(uint price) external;\\n    function addLiqui(uint amount) external;\\n    function removeLiqui(uint amount) external;\\n    function withdraw() external;\\n}\",\"keccak256\":\"0xc2f71ea24a60c3c921a6d6947ca4d4699592c863f37b4ca3bb3c072c5057d0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n   function price(string memory symbol) external returns(uint); \\n}\",\"keccak256\":\"0xd26b7e8adda13a8e11e63902344fe10320100a83e6b0a1ea33d4ddec517d4e15\",\"license\":\"MIT\"},\"contracts/lib/DMath.sol\":{\"content\":\"  \\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary DMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xe9a4c4d5a1e9eb41b47118bcdc8008d4c580676e6228767e1773be3ae839e94d\",\"license\":\"GPL-3.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/structs/RangeResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RoundResult {\\n    NonResult, // 0\\n    SpearWin, // 1\\n    ShieldWin //2\\n}\\n\",\"keccak256\":\"0x2e31ee8df33d61368e943c1686127f421b097fa26c97d8a4976250a0d0f6cab9\",\"license\":\"MIT\"},\"contracts/structs/RangeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nenum RangeType {\\n    TwoWay, // 0\\n    Positive, // 1\\n    negative // 2\\n}\\n\",\"keccak256\":\"0xcb8a7a972e1c8ca1e8ef10572f2251cfe5cc308c8975c85e12b8f5b2d6c93a83\",\"license\":\"MIT\"},\"contracts/structs/RoundInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RangeType.sol\\\";\\nimport \\\"./RangeResult.sol\\\";\\n\\nstruct RoundInfo {\\n    uint256 spearPrice;\\n    uint256 shieldPrice;\\n    uint256 startPrice;\\n    uint256 endPrice;\\n    uint256 startTS;\\n    uint256 endTS;\\n    uint256 range;\\n    RangeType ry;\\n    uint256 targetPriceUnder;\\n    uint256 targetPriceSuper;\\n    RoundResult roundResult;\\n}\\n\",\"keccak256\":\"0x4add5888e42d703f9dba4a1c2decac16f55696694262c9e26cc2fc342d03e44b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506137b6806100616000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063897f87e011610182578063b2016bd4116100e9578063e8a352f8116100a2578063f6e0c8f61161007c578063f6e0c8f614610793578063f80a389a146107a6578063f8a8fd6d1461030e578063ff5958fc146107b957600080fd5b8063e8a352f81461074d578063f2fde38b14610760578063f4ada3511461077357600080fd5b8063b2016bd4146106ce578063c1097c0d146106e1578063c3383b5b146106f4578063e5cb8d8614610707578063e6050c381461071a578063e78ccc391461072d57600080fd5b80639701f5e81161013b5780639701f5e8146106275780639cbe5efd14610647578063a27382d614610650578063a54e2ff214610670578063aafc7a7614610683578063ae809e8f146106a357600080fd5b8063897f87e01461050c5780638c65c81f146105375780638da5cb5b146105bb57806390a4cb9b146105cc578063936f28b9146105df57806394e33d7f146105ff57600080fd5b80634d61c32f11610226578063732d2160116101df578063732d21601461045b578063736bcfdb1461047b57806374e9a2671461049b57806376c4b887146104ae5780637dc0d1d0146104c157806385d10056146104ec57600080fd5b80634d61c32f146103d75780634e71d92d146103f757806352707d8c146103ff5780636f4d2b671461042d578063715018a614610440578063728313c91461044857600080fd5b80633203ba77116102785780633203ba771461036e57806335a94b7b146103765780633b18d4391461038b5780633c45e7361461039e5780633cc1f54c146103b157806349bf117b146103c457600080fd5b80630d731228146102c05780630ef4b248146102f357806311da60b414610306578063123656b9146103105780631c7705471461033b578063221937e01461034e575b600080fd5b6102e06102ce3660046132f8565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b6102e06103013660046131e9565b6107c1565b61030e6108bd565b005b6102e061031e366004613328565b600660209081526000928352604080842090915290825290205481565b6102e06103493660046132f8565b61102e565b6102e061035c3660046132f8565b600b6020526000908152604090205481565b6012546102e0565b61037e61109c565b6040516102ea9190613406565b6102e06103993660046132f8565b61112a565b61030e6103ac3660046132f8565b6111d2565b61030e6103bf3660046132f8565b6113e5565b61030e6103d23660046132f8565b611503565b6102e06103e53660046131e9565b600e6020526000908152604090205481565b61030e6118f2565b61041261040d3660046133b9565b611963565b604080519384529115156020840152908201526060016102ea565b6102e061043b3660046132f8565b611b3e565b61030e611b6c565b61030e6104563660046132f8565b611c10565b6102e06104693660046131e9565b600d6020526000908152604090205481565b6102e06104893660046132f8565b600a6020526000908152604090205481565b6102e06104a936600461338e565b611de3565b6102e06104bc3660046131e9565b611e2b565b6001546104d4906001600160a01b031681565b6040516001600160a01b0390911681526020016102ea565b6102e06104fa3660046132f8565b60086020526000908152604090205481565b6102e061051a366004613328565b600260209081526000928352604080842090915290825290205481565b6105a46105453660046132f8565b601360205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a0154989997989697959694959394929360ff9283169391929091168b565b6040516102ea9b9a999897969594939291906134df565b6000546001600160a01b03166104d4565b6102e06105da3660046132f8565b611f1d565b6102e06105ed3660046132f8565b60036020526000908152604090205481565b61061261060d3660046132f8565b611f3e565b604080519283526020830191909152016102ea565b6102e06106353660046132f8565b60166020526000908152604090205481565b6102e060115481565b6102e061065e3660046132f8565b60156020526000908152604090205481565b6102e061067e3660046132f8565b611fd7565b6102e06106913660046132f8565b60076020526000908152604090205481565b6102e06106b1366004613328565b600460209081526000928352604080842090915290825290205481565b6014546104d4906001600160a01b031681565b6102e06106ef366004613357565b61206e565b6102e06107023660046132f8565b61215a565b6102e06107153660046132f8565b6121ab565b61030e6107283660046132f8565b6121d9565b6102e061073b3660046132f8565b600c6020526000908152604090205481565b6102e061075b3660046132f8565b6124a9565b61030e61076e3660046131e9565b6124ee565b6102e06107813660046132f8565b60056020526000908152604090205481565b61030e6107a13660046132f8565b612608565b61030e6107b4366004613205565b612708565b61037e612bc6565b6001600160a01b0381166000908152600d602052604081205480158015906107ea575060115481105b156108b75760016000828152601360205260409020600a015460ff16600281111561082557634e487b7160e01b600052602160045260246000fd5b14156108555760008181526004602090815260408083206001600160a01b038716845290915290205491506108b7565b60026000828152601360205260409020600a015460ff16600281111561088b57634e487b7160e01b600052602160045260246000fd5b14156108b75760008181526006602090815260408083206001600160a01b038716845290915290205491505b50919050565b60115460009081526013602052604090206005015442101561091c5760405162461bcd60e51b8152602060048201526013602482015272746f6f206561726c7920746f20736574746c6560681b60448201526064015b60405180910390fd5b6011546000908152601360205260408120600a015460ff16600281111561095357634e487b7160e01b600052602160045260246000fd5b146109945760405162461bcd60e51b81526020600482015260116024820152701c9bdd5b99081a1859081cd95d1d1b1959607a1b6044820152606401610913565b600154604051631fc58c3360e31b81526000916001600160a01b03169063fe2c6198906109c690601090600401613439565b602060405180830381600087803b1580156109e057600080fd5b505af11580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a189190613310565b601180546000908152601360205260408082206003018490559154815290812060060154919250610a5b610a54670de0b6b3a764000084612bd3565b8490612bdf565b90506000610a7b610a74670de0b6b3a764000085612c01565b8590612bdf565b9050604051806101600160405280601360006012600081548110610aaf57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600001548152602001601360006012600081548110610af757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154835282810193909352604091820181206001015484528383018990528382018190524260608501526011548152601390925290206004810154600590910154608090920191610b5f91610b589190612bd3565b4290612c01565b81526020808201869052601154600090815260139091526040908190206007015491019060ff166002811115610ba557634e487b7160e01b600052602160045260246000fd5b81526020810184905260408101839052606001600081525060136000428152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115610c4e57634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115610c9b57634e487b7160e01b600052602160045260246000fd5b02179055506000915081905060115460009081526013602052604090206007015460ff166002811115610cde57634e487b7160e01b600052602160045260246000fd5b1415610d715760115460009081526013602052604090206008015485111580610d1b57506011546000908152601360205260409020600901548510155b15610d4b576011546000908152601360205260409020600a0180546001919060ff191682805b0217905550610e50565b6011546000908152601360205260409020600a0180546002919060ff1916600183610d41565b600160115460009081526013602052604090206007015460ff166002811115610daa57634e487b7160e01b600052602160045260246000fd5b1415610df0576011546000908152601360205260409020600901548510610d4b576011546000908152601360205260409020600a0180546001919060ff19168280610d41565b6011546000908152601360205260409020600801548511610e30576011546000908152601360205260409020600a0180546001919060ff19168280610d41565b6011546000908152601360205260409020600a01805460ff191660021790555b60016011546000908152601360205260409020600a015460ff166002811115610e8957634e487b7160e01b600052602160045260246000fd5b1415610f045750601180546000908152600460208181526040808420308086529083528185205442808752858552838720838852855283872091909155865486528484528286208287528452828620549086526006845282862082875284528286205594548452918152818320938352929092522054610f75565b506011805460009081526006602081815260408084203080865290835281852054428087526004855283872083885285528387209190915586548652848452828620828752845282862054908652848452828620828752845282862055945484529181528183209383529290925220545b601180546000908152600b60208181526040808420544280865282862091825595548552600c83528185205495855293209390935590915254610fb89082612bdf565b42600090815260086020908152604080832093909355600c90522054610fde9082612bdf565b4260008181526009602052604081209290925560118190556012805460018101825592527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444909101555050505050565b60008061103c601154611b3e565b9050600061104b6011546121ab565b9050600081831161105c578161105e565b825b601154600090815260036020526040812054919250906110929061108c886110868387612bd3565b90612bdf565b90612c0d565b9695505050505050565b601080546110a9906136d1565b80601f01602080910402602001604051908101604052809291908181526020018280546110d5906136d1565b80156111225780601f106110f757610100808354040283529160200191611122565b820191906000526020600020905b81548152906001019060200180831161110557829003601f168201915b505050505081565b601154600090815260066020908152604080832030845290915281205461115f90606490611159906063612c25565b90612c31565b6011546000908152600960205260409020541061119a5760115460009081526016602052604090205461119490839080611de3565b92915050565b60115460008181526006602090815260408083203084528252808320549383526009909152902054611194918491611de3565b919050565b601154336000908152600d602052604090205410156111f3576111f36118f2565b601154336000818152600d6020526040902091909155601454611223916001600160a01b03909116903084612c3d565b601154600081815260086020908152604080832054600483528184203085528352818420549484526015909252822054919283928392611264928792611963565b6011805460009081526015602090815260408083208590559254825260089052205492955090935091506112989085612c01565b60118054600090815260086020908152604080832094909455915481526004825282812030825290915220546112ce9084612bd3565b601180546000908152600460208181526040808420308552825280842095909555925482528252828120338252909152205461130a9084612c01565b6011546000908152600460209081526040808320338452909152902055811561136c576011546000908152600660209081526040808320308452909152902054611355906064612c31565b6011546000908152600960205260409020556113d7565b6011546000818152600460209081526040808320308085528184528285205486865260068552838620828752855283862054968652600885529285205494529091526113c492909161108c9190611086908490612bd3565b6011546000908152600960205260409020555b6113df612ca8565b50505050565b60115460009081526006602090815260408083203384529091529020548181101561146f5760405162461bcd60e51b815260206004820152603460248201527f73656c6c536869656c643a3a6d73672e73656e64657220686173206e6f7420656044820152731b9bdd59da081cda1a595b19081d1bc81cd95b1b60621b6064820152608401610913565b600061147a8361112a565b90506114868284612bd3565b60118054600090815260066020818152604080842033855282528084209590955592548252825282812030825290915220546114c29084612c01565b60115460009081526006602090815260408083203084529091529020556114e7612ca8565b6014546114fe906001600160a01b03163383612ddc565b505050565b336000908152600e602052604090205461151a5750565b601154336000908152600e60205260408120549091141561155857506011546000908152600260209081526040808320338452909152902054611564565b61156133611e2b565b90505b818110156115ac5760405162461bcd60e51b81526020600482015260156024820152743737ba1032b737bab3b4103638103a3790313ab93760591b6044820152606401610913565b60006115b9601154611b3e565b905060006115c86011546121ab565b905060008183116115d957816115db565b825b601154600090815260036020526040812054919250906116039061108c886110868387612bd3565b60115460009081526003602090815260408083205460089092528220549293509091611635919061108c908590612bdf565b60115460009081526003602090815260408083205460099092528220549293509091611667919061108c908690612bdf565b60115460009081526003602090815260408083205460089092528220549293509091611698919061108c9087612bdf565b601154600090815260036020908152604080832054600990925282205492935090916116c9919061108c9088612bdf565b601154600090815260036020908152604080832054600a90925282205492935090916116fa919061108c9089612bdf565b60115460009081526004602090815260408083203084529091529020549091506117249086612bd3565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546117669085612bd3565b601180546000908152600660209081526040808320308452825280832094909455915481526008909152205461179c9084612bd3565b6011805460009081526008602090815260408083209490945591548152600990915220546117ca9083612bd3565b6011805460009081526009602090815260408083209490945591548152600a90915220546117f89082612bd3565b601180546000908152600a602090815260408083209490945591548152600590915220546118269086612bd3565b6011805460009081526005602090815260408083209490945591548152600790915220546118549085612bd3565b601180546000908152600760209081526040808320949094559154338252600e835283822081905581526003909152205461188f908c612bd3565b6011546000908152600360205260409020556118ab8a8c612bd3565b6011546000908152600260209081526040808320338085529252909120919091556014546118e5916001600160a01b039091169088612ddc565b5050505050505050505050565b60006118fd336107c1565b9050801561196057336000818152600d60208181526040808420805485526004835281852086865283528185208590558054855260068352818520868652835290842084905591905255601454611960916001600160a01b039091169083612ddc565b50565b60008060008087116119c15760405162461bcd60e51b815260206004820152602160248201527f426174746c653a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b6064820152608401610913565b6000861180156119d15750600085115b611a1d5760405162461bcd60e51b815260206004820152601e60248201527f426174746c653a20494e53554646494349454e545f4c495155494449545900006044820152606401610913565b611a2d6064611159876063612c25565b8610611a4157508591506001905082611b34565b6000611a65611a566063611159896064612c25565b611a60908961366f565b612e0c565b915081905080611a758989612c01565b1115611af0576000611a878289612bd3565b90506000611a97826103e8612c25565b90506000611aa5828a612c25565b90506000611abf83611ab98d6103e8612c25565b90612c01565b9050611acb8183613564565b9750611ae1611ada8d86612bd3565b8990612c01565b97506001965050505050611b32565b6000611afe896103e8612c25565b90506000611b0c8289612c25565b90506000611b2083611ab98c6103e8612c25565b9050611b2c8183613564565b96505050505b505b9450945094915050565b6000818152600460209081526040808320308452825280832054848452600590925282205461119491612bd3565b6000546001600160a01b03163314611bc65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610913565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601454611c28906001600160a01b0316333084612c3d565b601154600081815260096020908152604080832054600683528184203085528352818420549484526016909252822054919283928392611c69928792611963565b601180546000908152601660209081526040808320859055925482526009905220549295509093509150611c9d9085612c01565b6011805460009081526009602090815260408083209490945591548152600682528281203082529091522054611cd39084612bd3565b6011805460009081526006602081815260408084203085528252808420959095559254825282528281203382529091522054611d0f9084612c01565b60115460009081526006602090815260408083203384529091529020558115611d71576011546000908152600460209081526040808320308452909152902054611d5a906064612c31565b6011546000908152600860205260409020556113d7565b601154600081815260066020908152604080832030808552818452828520548686526004855283862082875285528386205496865260098552928520549452909152611dc992909161108c9190611086908490612bd3565b6011546000908152600860205260409020556113df612ca8565b600080611df2856103e8612c25565b90506000611e008285612c25565b90506000611e1483611ab9886103e8612c25565b9050611e208183613564565b979650505050505050565b6001600160a01b0381166000908152600e60205260408120548015801590611e5557506011548111155b156108b75760008181526002602090815260408083206001600160a01b038716845290915281205492505b601254611e8f9060019061368e565b811015611f16578160128281548110611eb857634e487b7160e01b600052603260045260246000fd5b906000526020600020015410611f04576000611f0060128381548110611eee57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154868661206e565b9350505b80611f0e81613706565b915050611e80565b5050919050565b60128181548110611f2d57600080fd5b600091825260209091200154905081565b601154600090815260096020908152604080832054600890925282205482918291611f6891612c01565b601154600090815260046020908152604080832030845290915281205491925090611f9990839061108c9088612bdf565b601154600090815260066020908152604080832030845290915281205491925090611fca90849061108c9089612bdf565b9196919550909350505050565b601154600090815260046020908152604080832030845290915281205461200690606490611159906063612c25565b6011546000908152600860205260409020541061203b5760115460009081526015602052604090205461119490839080611de3565b60115460008181526004602090815260408083203084528252808320549383526008909152902054611194918491611de3565b60006011548414156120a3575060008381526002602090815260408083206001600160a01b0386168452909152902054612153565b60016000858152601360205260409020600a015460ff1660028111156120d957634e487b7160e01b600052602160045260246000fd5b141561211b5760008481526004602090815260408083203084528252808320548784526003909252909120546121139061108c8584612bdf565b915050612153565b600084815260066020908152604080832030845282528083205487845260039092529091205461214f9061108c8584612bdf565b9150505b9392505050565b601154600081815260096020908152604080832054600683528184203085528352818420549484526016909252822054919283928392839261219f9288929190611963565b50909695505050505050565b6000818152600660209081526040808320308452825280832054848452600790925282205461119491612bd3565b601154336000908152600e602052604090205410156121fc576121fc6000611503565b601154600090815260096020908152604080832054600890925282205461222291612c01565b6011546000908152600860205260408120549192509061224890839061108c9086612bdf565b6011546000908152600960205260408120549192509061226e90849061108c9087612bdf565b60115460009081526004602090815260408083203084529091528120549192509061229f90859061108c9088612bdf565b6011546000908152600660209081526040808320308452909152812054919250906122d090869061108c9089612bdf565b6011546000908152600860205260409020549091506122ef9085612c01565b60118054600090815260086020908152604080832094909455915481526009909152205461231d9084612c01565b60118054600090815260096020908152604080832094909455915481526004825282812030825290915220546123539083612c01565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546123959082612c01565b60118054600090815260066020908152604080832030845282528083209490945591548152600590915220546123cb9083612c01565b6011805460009081526005602090815260408083209490945591548152600790915220546123f99082612c01565b601154600090815260076020526040902055601454612423906001600160a01b0316333089612c3d565b601154336000908152600e6020908152604080832084905592825260039052205461244e9087612c01565b60118054600090815260036020908152604080832094909455915481526002825282812033825290915220546124849087612c01565b6011546000908152600260209081526040808320338452909152902055505050505050565b601154600081815260086020908152604080832054600483528184203085528352818420549484526015909252822054919283928392839261219f9288929190611963565b6000546001600160a01b031633146125485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610913565b6001600160a01b0381166125ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610913565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6011546000908152600460209081526040808320338452909152902054818110156126905760405162461bcd60e51b815260206004820152603260248201527f73656c6c53706561723a3a6d73672e73656e64657220686173206e6f7420656e6044820152711bdd59da081cdc19585c881d1bc81cd95b1b60721b6064820152608401610913565b600061269b83611fd7565b90506126a78284612bd3565b60118054600090815260046020818152604080842033855282528084209590955592548252825282812030825290915220546126e39084612c01565b60115460009081526004602090815260408083203084529091529020556114e7612ca8565b601480546001600160a01b03808e166001600160a01b03199283161790925560018054928d1692909116919091179055885161274b90600f9060208c01906130af565b50875161275f9060109060208b01906130af565b5061276a8686612c01565b670de0b6b3a7640000146127cc5760405162461bcd60e51b8152602060048201526024808201527f426174746c653a3a696e69743a7370656172202b20736869656c642073686f756044820152636c64203160e01b6064820152608401610913565b814211156128265760405162461bcd60e51b815260206004820152602160248201527f426174746c653a3a5f737461727454532073686f756c6420696e2066757475726044820152606560f81b6064820152608401610913565b6011829055601280546001818101835560009283527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490910184905554604051631fc58c3360e31b81526001600160a01b039091169063fe2c61989061289190601090600401613439565b602060405180830381600087803b1580156128ab57600080fd5b505af11580156128bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e39190613310565b905060006129036128fc670de0b6b3a764000088612bd3565b8390612bdf565b9050600061291c610a54670de0b6b3a764000089612c01565b90506040518061016001604052808a81526020018981526020018481526020016000815260200186815260200185815260200188815260200187600281111561297557634e487b7160e01b600052602160045260246000fd5b81526020810184905260408101839052606001600081525060136000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115612a1e57634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115612a6b57634e487b7160e01b600052602160045260246000fd5b02179055505060118054600090815260046020908152604080832030845282528083208f905592548252600590522054612aa691508b612c01565b60118054600090815260056020908152604080832094909455825482526006815283822030835281528382208e90559154815260079091522054612aea908b612c01565b601154600090815260076020526040902055612b06898b612bdf565b601154600090815260086020526040902055612b22888b612bdf565b6011805460009081526009602090815260408083209490945582548252600b81528382208d905582548252600c81528382208c9055825482526002815283822033835281528382208e90559154600e8352838220819055815260039091522054612b8c908b612c01565b601154600090815260036020526040902055601454612bb6906001600160a01b031633308d612c3d565b5050505050505050505050505050565b600f80546110a9906136d1565b6000612153828461368e565b6000612bed6012600a6135c7565b612bf78484612c25565b6121539190613564565b6000612153828461354c565b600061215382611159612c226012600a6135c7565b86905b6000612153828461366f565b60006121538284613564565b6040516001600160a01b03808516602483015283166044820152606481018290526113df9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612e75565b601154600081815260046020908152604080832030845282528083205493835260089091528120549091612cdc9190612c0d565b6011546000818152600660209081526040808320308452825280832054938352600990915281205492935091612d1191612c0d565b9050670dbd2fc137a3000082101580612d325750670dbd2fc137a300008110155b15612db457670dbd2fc137a300008210612d7d57601180546000908152600b60209081526040808320670dbd2fc137a30000905592548252600c905220662386f26fc1000090555050565b601180546000908152600b60209081526040808320662386f26fc10000905592548252600c905220670dbd2fc137a3000090555050565b601180546000908152600b6020908152604080832086905592548252600c9052208190555050565b6040516001600160a01b0383166024820152604481018290526114fe90849063a9059cbb60e01b90606401612c71565b60006003821115612e675750806000612e26600283613564565b612e3190600161354c565b90505b818110156108b757905080600281612e4c8186613564565b612e56919061354c565b612e609190613564565b9050612e34565b81156111cd57506001919050565b6000612eca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f479092919063ffffffff16565b8051909150156114fe5780806020019051810190612ee891906132d8565b6114fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610913565b6060612f568484600085612f5e565b949350505050565b606082471015612fbf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610913565b843b61300d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610913565b600080866001600160a01b0316858760405161302991906133ea565b60006040518083038185875af1925050503d8060008114613066576040519150601f19603f3d011682016040523d82523d6000602084013e61306b565b606091505b5091509150611e2082828660608315613085575081612153565b8251156130955782518084602001fd5b8160405162461bcd60e51b81526004016109139190613406565b8280546130bb906136d1565b90600052602060002090601f0160209004810192826130dd5760008555613123565b82601f106130f657805160ff1916838001178555613123565b82800160010185558215613123579182015b82811115613123578251825591602001919060010190613108565b5061312f929150613133565b5090565b5b8082111561312f5760008155600101613134565b80356111cd8161376b565b8035600381106111cd57600080fd5b600082601f830112613172578081fd5b813567ffffffffffffffff8082111561318d5761318d613737565b604051601f8301601f19908116603f011681019082821181831017156131b5576131b5613737565b816040528381528660208588010111156131cd578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156131fa578081fd5b81356121538161376b565b60008060008060008060008060008060006101608c8e031215613226578687fd5b61322f8c613148565b9a5061323d60208d01613148565b995067ffffffffffffffff8060408e01351115613258578788fd5b6132688e60408f01358f01613162565b99508060608e0135111561327a578788fd5b5061328b8d60608e01358e01613162565b975060808c0135965060a08c0135955060c08c0135945060e08c013593506132b66101008d01613153565b92506101208c013591506101408c013590509295989b509295989b9093969950565b6000602082840312156132e9578081fd5b81518015158114612153578182fd5b600060208284031215613309578081fd5b5035919050565b600060208284031215613321578081fd5b5051919050565b6000806040838503121561333a578182fd5b82359150602083013561334c8161376b565b809150509250929050565b60008060006060848603121561336b578283fd5b83359250602084013561337d8161376b565b929592945050506040919091013590565b6000806000606084860312156133a2578283fd5b505081359360208301359350604090920135919050565b600080600080608085870312156133ce578384fd5b5050823594602084013594506040840135936060013592509050565b600082516133fc8184602087016136a5565b9190910192915050565b60208152600082518060208401526134258160408501602087016136a5565b601f01601f19169190910160400192915050565b6000602080835281845483600182811c91508083168061345a57607f831692505b85831081141561347857634e487b7160e01b87526022600452602487fd5b87860183815260200181801561349557600181146134a6576134d0565b60ff198616825287820196506134d0565b60008b815260209020895b868110156134ca578154848201529085019089016134b1565b83019750505b50949998505050505050505050565b6000610160820190508c82528b60208301528a60408301528960608301528860808301528760a08301528660c08301526135188661374d565b8560e083015284610100830152836101208301526135358361374d565b826101408301529c9b505050505050505050505050565b6000821982111561355f5761355f613721565b500190565b60008261357f57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156135bf5781600019048211156135a5576135a5613721565b808516156135b257918102915b93841c9390800290613589565b509250929050565b600061215383836000826135dd57506001611194565b816135ea57506000611194565b8160018114613600576002811461360a57613626565b6001915050611194565b60ff84111561361b5761361b613721565b50506001821b611194565b5060208310610133831016604e8410600b8410161715613649575081810a611194565b6136538383613584565b806000190482111561366757613667613721565b029392505050565b600081600019048311821515161561368957613689613721565b500290565b6000828210156136a0576136a0613721565b500390565b60005b838110156136c05781810151838201526020016136a8565b838111156113df5750506000910152565b600181811c908216806136e557607f821691505b602082108114156108b757634e487b7160e01b600052602260045260246000fd5b600060001982141561371a5761371a613721565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6003811061196057634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461196057600080fdfea2646970667358221220a7017f1ca70eea37e3ffbda00e0e5a053b1c97a3d084ed43f9d745a633f0759364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063897f87e011610182578063b2016bd4116100e9578063e8a352f8116100a2578063f6e0c8f61161007c578063f6e0c8f614610793578063f80a389a146107a6578063f8a8fd6d1461030e578063ff5958fc146107b957600080fd5b8063e8a352f81461074d578063f2fde38b14610760578063f4ada3511461077357600080fd5b8063b2016bd4146106ce578063c1097c0d146106e1578063c3383b5b146106f4578063e5cb8d8614610707578063e6050c381461071a578063e78ccc391461072d57600080fd5b80639701f5e81161013b5780639701f5e8146106275780639cbe5efd14610647578063a27382d614610650578063a54e2ff214610670578063aafc7a7614610683578063ae809e8f146106a357600080fd5b8063897f87e01461050c5780638c65c81f146105375780638da5cb5b146105bb57806390a4cb9b146105cc578063936f28b9146105df57806394e33d7f146105ff57600080fd5b80634d61c32f11610226578063732d2160116101df578063732d21601461045b578063736bcfdb1461047b57806374e9a2671461049b57806376c4b887146104ae5780637dc0d1d0146104c157806385d10056146104ec57600080fd5b80634d61c32f146103d75780634e71d92d146103f757806352707d8c146103ff5780636f4d2b671461042d578063715018a614610440578063728313c91461044857600080fd5b80633203ba77116102785780633203ba771461036e57806335a94b7b146103765780633b18d4391461038b5780633c45e7361461039e5780633cc1f54c146103b157806349bf117b146103c457600080fd5b80630d731228146102c05780630ef4b248146102f357806311da60b414610306578063123656b9146103105780631c7705471461033b578063221937e01461034e575b600080fd5b6102e06102ce3660046132f8565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b6102e06103013660046131e9565b6107c1565b61030e6108bd565b005b6102e061031e366004613328565b600660209081526000928352604080842090915290825290205481565b6102e06103493660046132f8565b61102e565b6102e061035c3660046132f8565b600b6020526000908152604090205481565b6012546102e0565b61037e61109c565b6040516102ea9190613406565b6102e06103993660046132f8565b61112a565b61030e6103ac3660046132f8565b6111d2565b61030e6103bf3660046132f8565b6113e5565b61030e6103d23660046132f8565b611503565b6102e06103e53660046131e9565b600e6020526000908152604090205481565b61030e6118f2565b61041261040d3660046133b9565b611963565b604080519384529115156020840152908201526060016102ea565b6102e061043b3660046132f8565b611b3e565b61030e611b6c565b61030e6104563660046132f8565b611c10565b6102e06104693660046131e9565b600d6020526000908152604090205481565b6102e06104893660046132f8565b600a6020526000908152604090205481565b6102e06104a936600461338e565b611de3565b6102e06104bc3660046131e9565b611e2b565b6001546104d4906001600160a01b031681565b6040516001600160a01b0390911681526020016102ea565b6102e06104fa3660046132f8565b60086020526000908152604090205481565b6102e061051a366004613328565b600260209081526000928352604080842090915290825290205481565b6105a46105453660046132f8565b601360205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a0154989997989697959694959394929360ff9283169391929091168b565b6040516102ea9b9a999897969594939291906134df565b6000546001600160a01b03166104d4565b6102e06105da3660046132f8565b611f1d565b6102e06105ed3660046132f8565b60036020526000908152604090205481565b61061261060d3660046132f8565b611f3e565b604080519283526020830191909152016102ea565b6102e06106353660046132f8565b60166020526000908152604090205481565b6102e060115481565b6102e061065e3660046132f8565b60156020526000908152604090205481565b6102e061067e3660046132f8565b611fd7565b6102e06106913660046132f8565b60076020526000908152604090205481565b6102e06106b1366004613328565b600460209081526000928352604080842090915290825290205481565b6014546104d4906001600160a01b031681565b6102e06106ef366004613357565b61206e565b6102e06107023660046132f8565b61215a565b6102e06107153660046132f8565b6121ab565b61030e6107283660046132f8565b6121d9565b6102e061073b3660046132f8565b600c6020526000908152604090205481565b6102e061075b3660046132f8565b6124a9565b61030e61076e3660046131e9565b6124ee565b6102e06107813660046132f8565b60056020526000908152604090205481565b61030e6107a13660046132f8565b612608565b61030e6107b4366004613205565b612708565b61037e612bc6565b6001600160a01b0381166000908152600d602052604081205480158015906107ea575060115481105b156108b75760016000828152601360205260409020600a015460ff16600281111561082557634e487b7160e01b600052602160045260246000fd5b14156108555760008181526004602090815260408083206001600160a01b038716845290915290205491506108b7565b60026000828152601360205260409020600a015460ff16600281111561088b57634e487b7160e01b600052602160045260246000fd5b14156108b75760008181526006602090815260408083206001600160a01b038716845290915290205491505b50919050565b60115460009081526013602052604090206005015442101561091c5760405162461bcd60e51b8152602060048201526013602482015272746f6f206561726c7920746f20736574746c6560681b60448201526064015b60405180910390fd5b6011546000908152601360205260408120600a015460ff16600281111561095357634e487b7160e01b600052602160045260246000fd5b146109945760405162461bcd60e51b81526020600482015260116024820152701c9bdd5b99081a1859081cd95d1d1b1959607a1b6044820152606401610913565b600154604051631fc58c3360e31b81526000916001600160a01b03169063fe2c6198906109c690601090600401613439565b602060405180830381600087803b1580156109e057600080fd5b505af11580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a189190613310565b601180546000908152601360205260408082206003018490559154815290812060060154919250610a5b610a54670de0b6b3a764000084612bd3565b8490612bdf565b90506000610a7b610a74670de0b6b3a764000085612c01565b8590612bdf565b9050604051806101600160405280601360006012600081548110610aaf57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020600001548152602001601360006012600081548110610af757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154835282810193909352604091820181206001015484528383018990528382018190524260608501526011548152601390925290206004810154600590910154608090920191610b5f91610b589190612bd3565b4290612c01565b81526020808201869052601154600090815260139091526040908190206007015491019060ff166002811115610ba557634e487b7160e01b600052602160045260246000fd5b81526020810184905260408101839052606001600081525060136000428152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115610c4e57634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115610c9b57634e487b7160e01b600052602160045260246000fd5b02179055506000915081905060115460009081526013602052604090206007015460ff166002811115610cde57634e487b7160e01b600052602160045260246000fd5b1415610d715760115460009081526013602052604090206008015485111580610d1b57506011546000908152601360205260409020600901548510155b15610d4b576011546000908152601360205260409020600a0180546001919060ff191682805b0217905550610e50565b6011546000908152601360205260409020600a0180546002919060ff1916600183610d41565b600160115460009081526013602052604090206007015460ff166002811115610daa57634e487b7160e01b600052602160045260246000fd5b1415610df0576011546000908152601360205260409020600901548510610d4b576011546000908152601360205260409020600a0180546001919060ff19168280610d41565b6011546000908152601360205260409020600801548511610e30576011546000908152601360205260409020600a0180546001919060ff19168280610d41565b6011546000908152601360205260409020600a01805460ff191660021790555b60016011546000908152601360205260409020600a015460ff166002811115610e8957634e487b7160e01b600052602160045260246000fd5b1415610f045750601180546000908152600460208181526040808420308086529083528185205442808752858552838720838852855283872091909155865486528484528286208287528452828620549086526006845282862082875284528286205594548452918152818320938352929092522054610f75565b506011805460009081526006602081815260408084203080865290835281852054428087526004855283872083885285528387209190915586548652848452828620828752845282862054908652848452828620828752845282862055945484529181528183209383529290925220545b601180546000908152600b60208181526040808420544280865282862091825595548552600c83528185205495855293209390935590915254610fb89082612bdf565b42600090815260086020908152604080832093909355600c90522054610fde9082612bdf565b4260008181526009602052604081209290925560118190556012805460018101825592527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444909101555050505050565b60008061103c601154611b3e565b9050600061104b6011546121ab565b9050600081831161105c578161105e565b825b601154600090815260036020526040812054919250906110929061108c886110868387612bd3565b90612bdf565b90612c0d565b9695505050505050565b601080546110a9906136d1565b80601f01602080910402602001604051908101604052809291908181526020018280546110d5906136d1565b80156111225780601f106110f757610100808354040283529160200191611122565b820191906000526020600020905b81548152906001019060200180831161110557829003601f168201915b505050505081565b601154600090815260066020908152604080832030845290915281205461115f90606490611159906063612c25565b90612c31565b6011546000908152600960205260409020541061119a5760115460009081526016602052604090205461119490839080611de3565b92915050565b60115460008181526006602090815260408083203084528252808320549383526009909152902054611194918491611de3565b919050565b601154336000908152600d602052604090205410156111f3576111f36118f2565b601154336000818152600d6020526040902091909155601454611223916001600160a01b03909116903084612c3d565b601154600081815260086020908152604080832054600483528184203085528352818420549484526015909252822054919283928392611264928792611963565b6011805460009081526015602090815260408083208590559254825260089052205492955090935091506112989085612c01565b60118054600090815260086020908152604080832094909455915481526004825282812030825290915220546112ce9084612bd3565b601180546000908152600460208181526040808420308552825280842095909555925482528252828120338252909152205461130a9084612c01565b6011546000908152600460209081526040808320338452909152902055811561136c576011546000908152600660209081526040808320308452909152902054611355906064612c31565b6011546000908152600960205260409020556113d7565b6011546000818152600460209081526040808320308085528184528285205486865260068552838620828752855283862054968652600885529285205494529091526113c492909161108c9190611086908490612bd3565b6011546000908152600960205260409020555b6113df612ca8565b50505050565b60115460009081526006602090815260408083203384529091529020548181101561146f5760405162461bcd60e51b815260206004820152603460248201527f73656c6c536869656c643a3a6d73672e73656e64657220686173206e6f7420656044820152731b9bdd59da081cda1a595b19081d1bc81cd95b1b60621b6064820152608401610913565b600061147a8361112a565b90506114868284612bd3565b60118054600090815260066020818152604080842033855282528084209590955592548252825282812030825290915220546114c29084612c01565b60115460009081526006602090815260408083203084529091529020556114e7612ca8565b6014546114fe906001600160a01b03163383612ddc565b505050565b336000908152600e602052604090205461151a5750565b601154336000908152600e60205260408120549091141561155857506011546000908152600260209081526040808320338452909152902054611564565b61156133611e2b565b90505b818110156115ac5760405162461bcd60e51b81526020600482015260156024820152743737ba1032b737bab3b4103638103a3790313ab93760591b6044820152606401610913565b60006115b9601154611b3e565b905060006115c86011546121ab565b905060008183116115d957816115db565b825b601154600090815260036020526040812054919250906116039061108c886110868387612bd3565b60115460009081526003602090815260408083205460089092528220549293509091611635919061108c908590612bdf565b60115460009081526003602090815260408083205460099092528220549293509091611667919061108c908690612bdf565b60115460009081526003602090815260408083205460089092528220549293509091611698919061108c9087612bdf565b601154600090815260036020908152604080832054600990925282205492935090916116c9919061108c9088612bdf565b601154600090815260036020908152604080832054600a90925282205492935090916116fa919061108c9089612bdf565b60115460009081526004602090815260408083203084529091529020549091506117249086612bd3565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546117669085612bd3565b601180546000908152600660209081526040808320308452825280832094909455915481526008909152205461179c9084612bd3565b6011805460009081526008602090815260408083209490945591548152600990915220546117ca9083612bd3565b6011805460009081526009602090815260408083209490945591548152600a90915220546117f89082612bd3565b601180546000908152600a602090815260408083209490945591548152600590915220546118269086612bd3565b6011805460009081526005602090815260408083209490945591548152600790915220546118549085612bd3565b601180546000908152600760209081526040808320949094559154338252600e835283822081905581526003909152205461188f908c612bd3565b6011546000908152600360205260409020556118ab8a8c612bd3565b6011546000908152600260209081526040808320338085529252909120919091556014546118e5916001600160a01b039091169088612ddc565b5050505050505050505050565b60006118fd336107c1565b9050801561196057336000818152600d60208181526040808420805485526004835281852086865283528185208590558054855260068352818520868652835290842084905591905255601454611960916001600160a01b039091169083612ddc565b50565b60008060008087116119c15760405162461bcd60e51b815260206004820152602160248201527f426174746c653a20494e53554646494349454e545f494e5055545f414d4f554e6044820152601560fa1b6064820152608401610913565b6000861180156119d15750600085115b611a1d5760405162461bcd60e51b815260206004820152601e60248201527f426174746c653a20494e53554646494349454e545f4c495155494449545900006044820152606401610913565b611a2d6064611159876063612c25565b8610611a4157508591506001905082611b34565b6000611a65611a566063611159896064612c25565b611a60908961366f565b612e0c565b915081905080611a758989612c01565b1115611af0576000611a878289612bd3565b90506000611a97826103e8612c25565b90506000611aa5828a612c25565b90506000611abf83611ab98d6103e8612c25565b90612c01565b9050611acb8183613564565b9750611ae1611ada8d86612bd3565b8990612c01565b97506001965050505050611b32565b6000611afe896103e8612c25565b90506000611b0c8289612c25565b90506000611b2083611ab98c6103e8612c25565b9050611b2c8183613564565b96505050505b505b9450945094915050565b6000818152600460209081526040808320308452825280832054848452600590925282205461119491612bd3565b6000546001600160a01b03163314611bc65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610913565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601454611c28906001600160a01b0316333084612c3d565b601154600081815260096020908152604080832054600683528184203085528352818420549484526016909252822054919283928392611c69928792611963565b601180546000908152601660209081526040808320859055925482526009905220549295509093509150611c9d9085612c01565b6011805460009081526009602090815260408083209490945591548152600682528281203082529091522054611cd39084612bd3565b6011805460009081526006602081815260408084203085528252808420959095559254825282528281203382529091522054611d0f9084612c01565b60115460009081526006602090815260408083203384529091529020558115611d71576011546000908152600460209081526040808320308452909152902054611d5a906064612c31565b6011546000908152600860205260409020556113d7565b601154600081815260066020908152604080832030808552818452828520548686526004855283862082875285528386205496865260098552928520549452909152611dc992909161108c9190611086908490612bd3565b6011546000908152600860205260409020556113df612ca8565b600080611df2856103e8612c25565b90506000611e008285612c25565b90506000611e1483611ab9886103e8612c25565b9050611e208183613564565b979650505050505050565b6001600160a01b0381166000908152600e60205260408120548015801590611e5557506011548111155b156108b75760008181526002602090815260408083206001600160a01b038716845290915281205492505b601254611e8f9060019061368e565b811015611f16578160128281548110611eb857634e487b7160e01b600052603260045260246000fd5b906000526020600020015410611f04576000611f0060128381548110611eee57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154868661206e565b9350505b80611f0e81613706565b915050611e80565b5050919050565b60128181548110611f2d57600080fd5b600091825260209091200154905081565b601154600090815260096020908152604080832054600890925282205482918291611f6891612c01565b601154600090815260046020908152604080832030845290915281205491925090611f9990839061108c9088612bdf565b601154600090815260066020908152604080832030845290915281205491925090611fca90849061108c9089612bdf565b9196919550909350505050565b601154600090815260046020908152604080832030845290915281205461200690606490611159906063612c25565b6011546000908152600860205260409020541061203b5760115460009081526015602052604090205461119490839080611de3565b60115460008181526004602090815260408083203084528252808320549383526008909152902054611194918491611de3565b60006011548414156120a3575060008381526002602090815260408083206001600160a01b0386168452909152902054612153565b60016000858152601360205260409020600a015460ff1660028111156120d957634e487b7160e01b600052602160045260246000fd5b141561211b5760008481526004602090815260408083203084528252808320548784526003909252909120546121139061108c8584612bdf565b915050612153565b600084815260066020908152604080832030845282528083205487845260039092529091205461214f9061108c8584612bdf565b9150505b9392505050565b601154600081815260096020908152604080832054600683528184203085528352818420549484526016909252822054919283928392839261219f9288929190611963565b50909695505050505050565b6000818152600660209081526040808320308452825280832054848452600790925282205461119491612bd3565b601154336000908152600e602052604090205410156121fc576121fc6000611503565b601154600090815260096020908152604080832054600890925282205461222291612c01565b6011546000908152600860205260408120549192509061224890839061108c9086612bdf565b6011546000908152600960205260408120549192509061226e90849061108c9087612bdf565b60115460009081526004602090815260408083203084529091528120549192509061229f90859061108c9088612bdf565b6011546000908152600660209081526040808320308452909152812054919250906122d090869061108c9089612bdf565b6011546000908152600860205260409020549091506122ef9085612c01565b60118054600090815260086020908152604080832094909455915481526009909152205461231d9084612c01565b60118054600090815260096020908152604080832094909455915481526004825282812030825290915220546123539083612c01565b60118054600090815260046020908152604080832030808552908352818420959095559254825260068152828220938252929092529020546123959082612c01565b60118054600090815260066020908152604080832030845282528083209490945591548152600590915220546123cb9083612c01565b6011805460009081526005602090815260408083209490945591548152600790915220546123f99082612c01565b601154600090815260076020526040902055601454612423906001600160a01b0316333089612c3d565b601154336000908152600e6020908152604080832084905592825260039052205461244e9087612c01565b60118054600090815260036020908152604080832094909455915481526002825282812033825290915220546124849087612c01565b6011546000908152600260209081526040808320338452909152902055505050505050565b601154600081815260086020908152604080832054600483528184203085528352818420549484526015909252822054919283928392839261219f9288929190611963565b6000546001600160a01b031633146125485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610913565b6001600160a01b0381166125ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610913565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6011546000908152600460209081526040808320338452909152902054818110156126905760405162461bcd60e51b815260206004820152603260248201527f73656c6c53706561723a3a6d73672e73656e64657220686173206e6f7420656e6044820152711bdd59da081cdc19585c881d1bc81cd95b1b60721b6064820152608401610913565b600061269b83611fd7565b90506126a78284612bd3565b60118054600090815260046020818152604080842033855282528084209590955592548252825282812030825290915220546126e39084612c01565b60115460009081526004602090815260408083203084529091529020556114e7612ca8565b601480546001600160a01b03808e166001600160a01b03199283161790925560018054928d1692909116919091179055885161274b90600f9060208c01906130af565b50875161275f9060109060208b01906130af565b5061276a8686612c01565b670de0b6b3a7640000146127cc5760405162461bcd60e51b8152602060048201526024808201527f426174746c653a3a696e69743a7370656172202b20736869656c642073686f756044820152636c64203160e01b6064820152608401610913565b814211156128265760405162461bcd60e51b815260206004820152602160248201527f426174746c653a3a5f737461727454532073686f756c6420696e2066757475726044820152606560f81b6064820152608401610913565b6011829055601280546001818101835560009283527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490910184905554604051631fc58c3360e31b81526001600160a01b039091169063fe2c61989061289190601090600401613439565b602060405180830381600087803b1580156128ab57600080fd5b505af11580156128bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e39190613310565b905060006129036128fc670de0b6b3a764000088612bd3565b8390612bdf565b9050600061291c610a54670de0b6b3a764000089612c01565b90506040518061016001604052808a81526020018981526020018481526020016000815260200186815260200185815260200188815260200187600281111561297557634e487b7160e01b600052602160045260246000fd5b81526020810184905260408101839052606001600081525060136000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115612a1e57634e487b7160e01b600052602160045260246000fd5b021790555061010082015160088201556101208201516009820155610140820151600a8201805460ff19166001836002811115612a6b57634e487b7160e01b600052602160045260246000fd5b02179055505060118054600090815260046020908152604080832030845282528083208f905592548252600590522054612aa691508b612c01565b60118054600090815260056020908152604080832094909455825482526006815283822030835281528382208e90559154815260079091522054612aea908b612c01565b601154600090815260076020526040902055612b06898b612bdf565b601154600090815260086020526040902055612b22888b612bdf565b6011805460009081526009602090815260408083209490945582548252600b81528382208d905582548252600c81528382208c9055825482526002815283822033835281528382208e90559154600e8352838220819055815260039091522054612b8c908b612c01565b601154600090815260036020526040902055601454612bb6906001600160a01b031633308d612c3d565b5050505050505050505050505050565b600f80546110a9906136d1565b6000612153828461368e565b6000612bed6012600a6135c7565b612bf78484612c25565b6121539190613564565b6000612153828461354c565b600061215382611159612c226012600a6135c7565b86905b6000612153828461366f565b60006121538284613564565b6040516001600160a01b03808516602483015283166044820152606481018290526113df9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612e75565b601154600081815260046020908152604080832030845282528083205493835260089091528120549091612cdc9190612c0d565b6011546000818152600660209081526040808320308452825280832054938352600990915281205492935091612d1191612c0d565b9050670dbd2fc137a3000082101580612d325750670dbd2fc137a300008110155b15612db457670dbd2fc137a300008210612d7d57601180546000908152600b60209081526040808320670dbd2fc137a30000905592548252600c905220662386f26fc1000090555050565b601180546000908152600b60209081526040808320662386f26fc10000905592548252600c905220670dbd2fc137a3000090555050565b601180546000908152600b6020908152604080832086905592548252600c9052208190555050565b6040516001600160a01b0383166024820152604481018290526114fe90849063a9059cbb60e01b90606401612c71565b60006003821115612e675750806000612e26600283613564565b612e3190600161354c565b90505b818110156108b757905080600281612e4c8186613564565b612e56919061354c565b612e609190613564565b9050612e34565b81156111cd57506001919050565b6000612eca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f479092919063ffffffff16565b8051909150156114fe5780806020019051810190612ee891906132d8565b6114fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610913565b6060612f568484600085612f5e565b949350505050565b606082471015612fbf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610913565b843b61300d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610913565b600080866001600160a01b0316858760405161302991906133ea565b60006040518083038185875af1925050503d8060008114613066576040519150601f19603f3d011682016040523d82523d6000602084013e61306b565b606091505b5091509150611e2082828660608315613085575081612153565b8251156130955782518084602001fd5b8160405162461bcd60e51b81526004016109139190613406565b8280546130bb906136d1565b90600052602060002090601f0160209004810192826130dd5760008555613123565b82601f106130f657805160ff1916838001178555613123565b82800160010185558215613123579182015b82811115613123578251825591602001919060010190613108565b5061312f929150613133565b5090565b5b8082111561312f5760008155600101613134565b80356111cd8161376b565b8035600381106111cd57600080fd5b600082601f830112613172578081fd5b813567ffffffffffffffff8082111561318d5761318d613737565b604051601f8301601f19908116603f011681019082821181831017156131b5576131b5613737565b816040528381528660208588010111156131cd578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156131fa578081fd5b81356121538161376b565b60008060008060008060008060008060006101608c8e031215613226578687fd5b61322f8c613148565b9a5061323d60208d01613148565b995067ffffffffffffffff8060408e01351115613258578788fd5b6132688e60408f01358f01613162565b99508060608e0135111561327a578788fd5b5061328b8d60608e01358e01613162565b975060808c0135965060a08c0135955060c08c0135945060e08c013593506132b66101008d01613153565b92506101208c013591506101408c013590509295989b509295989b9093969950565b6000602082840312156132e9578081fd5b81518015158114612153578182fd5b600060208284031215613309578081fd5b5035919050565b600060208284031215613321578081fd5b5051919050565b6000806040838503121561333a578182fd5b82359150602083013561334c8161376b565b809150509250929050565b60008060006060848603121561336b578283fd5b83359250602084013561337d8161376b565b929592945050506040919091013590565b6000806000606084860312156133a2578283fd5b505081359360208301359350604090920135919050565b600080600080608085870312156133ce578384fd5b5050823594602084013594506040840135936060013592509050565b600082516133fc8184602087016136a5565b9190910192915050565b60208152600082518060208401526134258160408501602087016136a5565b601f01601f19169190910160400192915050565b6000602080835281845483600182811c91508083168061345a57607f831692505b85831081141561347857634e487b7160e01b87526022600452602487fd5b87860183815260200181801561349557600181146134a6576134d0565b60ff198616825287820196506134d0565b60008b815260209020895b868110156134ca578154848201529085019089016134b1565b83019750505b50949998505050505050505050565b6000610160820190508c82528b60208301528a60408301528960608301528860808301528760a08301528660c08301526135188661374d565b8560e083015284610100830152836101208301526135358361374d565b826101408301529c9b505050505050505050505050565b6000821982111561355f5761355f613721565b500190565b60008261357f57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156135bf5781600019048211156135a5576135a5613721565b808516156135b257918102915b93841c9390800290613589565b509250929050565b600061215383836000826135dd57506001611194565b816135ea57506000611194565b8160018114613600576002811461360a57613626565b6001915050611194565b60ff84111561361b5761361b613721565b50506001821b611194565b5060208310610133831016604e8410600b8410161715613649575081810a611194565b6136538383613584565b806000190482111561366757613667613721565b029392505050565b600081600019048311821515161561368957613689613721565b500290565b6000828210156136a0576136a0613721565b500390565b60005b838110156136c05781810151838201526020016136a8565b838111156113df5750506000910152565b600181811c908216806136e557607f821691505b602082108114156108b757634e487b7160e01b600052602260045260246000fd5b600060001982141561371a5761371a613721565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6003811061196057634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461196057600080fdfea2646970667358221220a7017f1ca70eea37e3ffbda00e0e5a053b1c97a3d084ed43f9d745a633f0759364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquility(uint256)": {
        "details": "The user adds energy token by calling this function, as well as the corresponding number of spear and shield",
        "params": {
          "amount": "of energy token transfer to battle contract"
        }
      },
      "buyShield(uint256)": {
        "details": "The price of shield will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.",
        "params": {
          "amount": "the amount of energy token, energy token should a ERC20 token"
        }
      },
      "buySpear(uint256)": {
        "details": "The price of spear will not exceed 0.99. When the price is less than 0.99, amm satisfies x*y=k, and when the price exceeds 0.99, it satisfies x+y=k.user has three status: has spear before this round, first this round , not first for this round",
        "params": {
          "amount": "the amount of collateral token, collateral token should a ERC20 token"
        }
      },
      "claim()": {
        "details": "normal users get back their profits"
      },
      "getAmountOut(uint256,uint256,uint256,uint256)": {
        "details": "Calculate how many spears and shields can be obtained",
        "params": {
          "amountIn": "amount transfer to battle contract"
        }
      },
      "init(address,address,string,string,uint256,uint256,uint256,uint256,uint8,uint256,uint256)": {
        "details": "init the battle and set the first round's params this function will become the start point ",
        "params": {
          "_endTS": "The end timestamp of first round ",
          "_range": "The positive and negative range of price changes",
          "_shieldPrice": "Init price of shield",
          "_spearPrice": "Init price of spear",
          "_startTS": "The start timestamp of first round",
          "amount": "The amount of collateral, the collateral can be any ERC20 token contract, such as dai"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquility(uint256)": {
        "details": "The user retrieves the energy token",
        "params": {
          "amount": "of energy token to msg.sender, if msg.sender don't have enought spear and shield, the transaction will failed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sellShield(uint256)": {
        "details": "sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)"
      },
      "sellSpear(uint256)": {
        "details": "sell spear to battle contract, amm satisfies x*y=k. if the price exceeds 0.99, the price will start form last sqrt(k)",
        "params": {
          "amount": "amount of spear to sell"
        }
      },
      "settle()": {
        "details": "Announce the results of this round The final price will be provided by an external third party Oracle"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "collateralShield": {
        "details": "collateral token belong to shield side"
      },
      "collateralSpear": {
        "details": "collateral token belong to spear side"
      },
      "collateralSurplus": {
        "details": "collateral token belong to non-spear and non-shield"
      },
      "lpBalanceOf": {
        "details": "user's lp balance per round"
      },
      "shieldBalanceOf": {
        "details": "user's shield balance per round"
      },
      "spearBalanceOf": {
        "details": "user's spear balance per round"
      },
      "spearPrice": {
        "details": "shield amount belong to the battle contract per round"
      }
    },
    "title": "Battle contains multi-round ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1901,
        "contract": "contracts/Battle.sol:Battle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3554,
        "contract": "contracts/Battle.sol:Battle",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOracle)6240"
      },
      {
        "astId": 3561,
        "contract": "contracts/Battle.sol:Battle",
        "label": "lpBalanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3565,
        "contract": "contracts/Battle.sol:Battle",
        "label": "lpTotalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3572,
        "contract": "contracts/Battle.sol:Battle",
        "label": "spearBalanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3576,
        "contract": "contracts/Battle.sol:Battle",
        "label": "totalSpear",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3583,
        "contract": "contracts/Battle.sol:Battle",
        "label": "shieldBalanceOf",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3587,
        "contract": "contracts/Battle.sol:Battle",
        "label": "totalShield",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3592,
        "contract": "contracts/Battle.sol:Battle",
        "label": "collateralSpear",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3597,
        "contract": "contracts/Battle.sol:Battle",
        "label": "collateralShield",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3602,
        "contract": "contracts/Battle.sol:Battle",
        "label": "collateralSurplus",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3607,
        "contract": "contracts/Battle.sol:Battle",
        "label": "spearPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3611,
        "contract": "contracts/Battle.sol:Battle",
        "label": "shieldPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3615,
        "contract": "contracts/Battle.sol:Battle",
        "label": "userStartRoundSS",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3619,
        "contract": "contracts/Battle.sol:Battle",
        "label": "userStartRoundLP",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3621,
        "contract": "contracts/Battle.sol:Battle",
        "label": "trackName",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3623,
        "contract": "contracts/Battle.sol:Battle",
        "label": "priceName",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3625,
        "contract": "contracts/Battle.sol:Battle",
        "label": "currentRoundId",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3628,
        "contract": "contracts/Battle.sol:Battle",
        "label": "roundIds",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3633,
        "contract": "contracts/Battle.sol:Battle",
        "label": "rounds",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(RoundInfo)6760_storage)"
      },
      {
        "astId": 3636,
        "contract": "contracts/Battle.sol:Battle",
        "label": "collateralToken",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IERC20)2582"
      },
      {
        "astId": 3640,
        "contract": "contracts/Battle.sol:Battle",
        "label": "sqrt_k_spear",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3644,
        "contract": "contracts/Battle.sol:Battle",
        "label": "sqrt_k_shield",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2582": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)6240": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_enum(RangeType)6731": {
        "encoding": "inplace",
        "label": "enum RangeType",
        "numberOfBytes": "1"
      },
      "t_enum(RoundResult)6725": {
        "encoding": "inplace",
        "label": "enum RoundResult",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoundInfo)6760_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RoundInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundInfo)6760_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoundInfo)6760_storage": {
        "encoding": "inplace",
        "label": "struct RoundInfo",
        "members": [
          {
            "astId": 6737,
            "contract": "contracts/Battle.sol:Battle",
            "label": "spearPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6739,
            "contract": "contracts/Battle.sol:Battle",
            "label": "shieldPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6741,
            "contract": "contracts/Battle.sol:Battle",
            "label": "startPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6743,
            "contract": "contracts/Battle.sol:Battle",
            "label": "endPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6745,
            "contract": "contracts/Battle.sol:Battle",
            "label": "startTS",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6747,
            "contract": "contracts/Battle.sol:Battle",
            "label": "endTS",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6749,
            "contract": "contracts/Battle.sol:Battle",
            "label": "range",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6752,
            "contract": "contracts/Battle.sol:Battle",
            "label": "ry",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(RangeType)6731"
          },
          {
            "astId": 6754,
            "contract": "contracts/Battle.sol:Battle",
            "label": "targetPriceUnder",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6756,
            "contract": "contracts/Battle.sol:Battle",
            "label": "targetPriceSuper",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6759,
            "contract": "contracts/Battle.sol:Battle",
            "label": "roundResult",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(RoundResult)6725"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}